//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	partitionBy       PartitionBy
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexOption       *IndexOption
	indexOptions      []*IndexOption
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
	showFilter        *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const PREPARE = 57362
const EXECUTE = 57363
const ALL = 57364
const DISTINCT = 57365
const AS = 57366
const EXISTS = 57367
const ASC = 57368
const DESC = 57369
const INTO = 57370
const DUPLICATE = 57371
const KEY = 57372
const DEFAULT = 57373
const SET = 57374
const LOCK = 57375
const KEYS = 57376
const VALUES = 57377
const LAST_INSERT_ID = 57378
const NEXT = 57379
const VALUE = 57380
const SHARE = 57381
const MODE = 57382
const SQL_NO_CACHE = 57383
const SQL_CACHE = 57384
const JOIN = 57385
const STRAIGHT_JOIN = 57386
const LEFT = 57387
const RIGHT = 57388
const INNER = 57389
const OUTER = 57390
const CROSS = 57391
const NATURAL = 57392
const USE = 57393
const FORCE = 57394
const ON = 57395
const USING = 57396
const ID = 57397
const HEX = 57398
const STRING = 57399
const INTEGRAL = 57400
const FLOAT = 57401
const HEXNUM = 57402
const VALUE_ARG = 57403
const LIST_ARG = 57404
const COMMENT = 57405
const COMMENT_KEYWORD = 57406
const BIT_LITERAL = 57407
const NULL = 57408
const TRUE = 57409
const FALSE = 57410
const OR = 57411
const AND = 57412
const NOT = 57413
const BETWEEN = 57414
const CASE = 57415
const WHEN = 57416
const THEN = 57417
const ELSE = 57418
const END = 57419
const LE = 57420
const GE = 57421
const NE = 57422
const NULL_SAFE_EQUAL = 57423
const IS = 57424
const LIKE = 57425
const REGEXP = 57426
const IN = 57427
const NULL_SAFE_NOTEQUAL = 57428
const SHIFT_LEFT = 57429
const SHIFT_RIGHT = 57430
const DIV = 57431
const MOD = 57432
const UNARY = 57433
const COLLATE = 57434
const BINARY = 57435
const UNDERSCORE_BINARY = 57436
const INTERVAL = 57437
const JSON_EXTRACT_OP = 57438
const JSON_UNQUOTE_EXTRACT_OP = 57439
const CREATE = 57440
const ALTER = 57441
const DROP = 57442
const RENAME = 57443
const ANALYZE = 57444
const ADD = 57445
const SCHEMA = 57446
const TABLE = 57447
const INDEX = 57448
const VIEW = 57449
const TO = 57450
const IGNORE = 57451
const IF = 57452
const UNIQUE = 57453
const PRIMARY = 57454
const COLUMN = 57455
const CONSTRAINT = 57456
const SPATIAL = 57457
const FULLTEXT = 57458
const FOREIGN = 57459
const KEY_BLOCK_SIZE = 57460
const SHOW = 57461
const DESCRIBE = 57462
const EXPLAIN = 57463
const DATE = 57464
const ESCAPE = 57465
const REPAIR = 57466
const OPTIMIZE = 57467
const TRUNCATE = 57468
const MAXVALUE = 57469
const PARTITION = 57470
const REORGANIZE = 57471
const LESS = 57472
const THAN = 57473
const PROCEDURE = 57474
const TRIGGER = 57475
const VINDEX = 57476
const VINDEXES = 57477
const STATUS = 57478
const VARIABLES = 57479
const BEGIN = 57480
const START = 57481
const TRANSACTION = 57482
const COMMIT = 57483
const ROLLBACK = 57484
const BIT = 57485
const TINYINT = 57486
const SMALLINT = 57487
const MEDIUMINT = 57488
const INT = 57489
const INTEGER = 57490
const BIGINT = 57491
const INTNUM = 57492
const REAL = 57493
const DOUBLE = 57494
const FLOAT_TYPE = 57495
const DECIMAL = 57496
const NUMERIC = 57497
const TIME = 57498
const TIMESTAMP = 57499
const DATETIME = 57500
const YEAR = 57501
const CHAR = 57502
const VARCHAR = 57503
const BOOL = 57504
const CHARACTER = 57505
const VARBINARY = 57506
const NCHAR = 57507
const TEXT = 57508
const TINYTEXT = 57509
const MEDIUMTEXT = 57510
const LONGTEXT = 57511
const BLOB = 57512
const TINYBLOB = 57513
const MEDIUMBLOB = 57514
const LONGBLOB = 57515
const JSON = 57516
const ENUM = 57517
const GEOMETRY = 57518
const POINT = 57519
const LINESTRING = 57520
const POLYGON = 57521
const GEOMETRYCOLLECTION = 57522
const MULTIPOINT = 57523
const MULTILINESTRING = 57524
const MULTIPOLYGON = 57525
const NULLX = 57526
const AUTO_INCREMENT = 57527
const APPROXNUM = 57528
const SIGNED = 57529
const UNSIGNED = 57530
const ZEROFILL = 57531
const DATABASES = 57532
const TABLES = 57533
const VITESS_KEYSPACES = 57534
const VITESS_SHARDS = 57535
const VITESS_TABLETS = 57536
const VSCHEMA_TABLES = 57537
const EXTENDED = 57538
const FULL = 57539
const PROCESSLIST = 57540
const NAMES = 57541
const CHARSET = 57542
const GLOBAL = 57543
const SESSION = 57544
const ISOLATION = 57545
const LEVEL = 57546
const READ = 57547
const WRITE = 57548
const ONLY = 57549
const REPEATABLE = 57550
const COMMITTED = 57551
const UNCOMMITTED = 57552
const SERIALIZABLE = 57553
const CURRENT_TIMESTAMP = 57554
const DATABASE = 57555
const CURRENT_DATE = 57556
const CURRENT_TIME = 57557
const LOCALTIME = 57558
const LOCALTIMESTAMP = 57559
const UTC_DATE = 57560
const UTC_TIME = 57561
const UTC_TIMESTAMP = 57562
const REPLACE = 57563
const CONVERT = 57564
const CAST = 57565
const SUBSTR = 57566
const SUBSTRING = 57567
const GROUP_CONCAT = 57568
const SEPARATOR = 57569
const ROW_NUMBER = 57570
const OVER = 57571
const MATCH = 57572
const AGAINST = 57573
const BOOLEAN = 57574
const LANGUAGE = 57575
const WITH = 57576
const QUERY = 57577
const EXPANSION = 57578
const UNUSED = 57579

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"PREPARE",
	"EXECUTE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"NULL_SAFE_NOTEQUAL",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"ROW_NUMBER",
	"OVER",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 30,
	-2, 4,
	-1, 40,
	153, 270,
	154, 270,
	-2, 260,
	-1, 244,
	112, 607,
	-2, 603,
	-1, 245,
	112, 608,
	-2, 604,
	-1, 305,
	1, 317,
	5, 317,
	12, 317,
	13, 317,
	14, 317,
	15, 317,
	17, 317,
	19, 317,
	32, 317,
	33, 317,
	43, 317,
	44, 317,
	45, 317,
	46, 317,
	47, 317,
	49, 317,
	50, 317,
	53, 317,
	54, 317,
	56, 317,
	57, 317,
	255, 317,
	-2, 336,
	-1, 317,
	82, 768,
	-2, 65,
	-1, 318,
	82, 729,
	-2, 66,
	-1, 323,
	82, 713,
	-2, 569,
	-1, 325,
	82, 750,
	-2, 571,
	-1, 588,
	54, 48,
	56, 48,
	-2, 50,
	-1, 725,
	112, 610,
	-2, 606,
	-1, 931,
	5, 31,
	-2, 403,
	-1, 957,
	5, 30,
	-2, 544,
	-1, 1198,
	5, 31,
	-2, 545,
	-1, 1243,
	5, 30,
	-2, 547,
	-1, 1308,
	5, 31,
	-2, 548,
}

const yyPrivate = 57344

const yyLast = 11139

var yyAct = [...]int{

	275, 51, 1297, 873, 663, 788, 249, 1253, 534, 1098,
	471, 596, 274, 1126, 806, 1099, 1019, 580, 853, 829,
	582, 867, 1095, 960, 217, 828, 825, 223, 57, 789,
	976, 322, 923, 1064, 760, 757, 1010, 750, 1022, 776,
	727, 472, 466, 316, 965, 863, 602, 839, 601, 247,
	421, 785, 51, 584, 302, 569, 533, 3, 478, 301,
	228, 905, 486, 232, 313, 56, 306, 309, 1330, 1318,
	1328, 1304, 218, 219, 220, 221, 1326, 874, 1317, 1089,
	949, 1190, 425, 300, 446, 890, 187, 183, 184, 185,
	1262, 1121, 1122, 549, 821, 822, 1120, 759, 236, 820,
	461, 889, 1303, 61, 603, 846, 604, 1277, 222, 499,
	498, 508, 509, 501, 502, 503, 504, 505, 506, 507,
	500, 985, 692, 510, 984, 1001, 1215, 986, 894, 693,
	63, 64, 65, 66, 854, 434, 69, 888, 1230, 1173,
	1171, 216, 457, 458, 1327, 464, 1325, 1298, 448, 1193,
	450, 1132, 1133, 1134, 1043, 786, 435, 1254, 428, 1137,
	1135, 181, 180, 1260, 181, 841, 841, 807, 809, 245,
	1256, 671, 1040, 662, 841, 447, 449, 238, 1042, 453,
	975, 974, 973, 423, 431, 195, 885, 882, 883, 182,
	881, 523, 524, 995, 422, 186, 1285, 1201, 1051, 939,
	452, 452, 452, 452, 82, 452, 917, 699, 192, 490,
	441, 192, 452, 1030, 826, 892, 895, 499, 498, 508,
	509, 501, 502, 503, 504, 505, 506, 507, 500, 51,
	500, 510, 510, 510, 696, 192, 192, 483, 1255, 82,
	485, 1028, 808, 192, 520, 82, 1091, 522, 1047, 319,
	887, 1141, 251, 485, 1289, 474, 445, 1151, 840, 840,
	854, 1261, 1259, 924, 838, 836, 1278, 840, 837, 963,
	900, 1041, 886, 1039, 532, 777, 536, 537, 538, 539,
	540, 541, 542, 543, 544, 475, 547, 548, 550, 550,
	550, 550, 550, 550, 550, 550, 558, 559, 560, 561,
	605, 1302, 1142, 777, 666, 946, 1029, 581, 999, 891,
	1292, 1034, 1031, 1024, 1025, 1032, 1027, 1026, 305, 480,
	1136, 437, 438, 439, 893, 1310, 1046, 843, 1033, 935,
	734, 934, 844, 476, 1036, 503, 504, 505, 506, 507,
	500, 1221, 201, 510, 732, 733, 731, 484, 483, 1220,
	192, 901, 192, 465, 1014, 1013, 484, 483, 192, 702,
	703, 427, 936, 1093, 485, 192, 211, 54, 1002, 82,
	82, 82, 82, 485, 82, 1311, 589, 730, 751, 599,
	752, 82, 551, 552, 553, 554, 555, 556, 557, 179,
	499, 498, 508, 509, 501, 502, 503, 504, 505, 506,
	507, 500, 469, 473, 510, 484, 483, 1290, 82, 1237,
	484, 483, 484, 483, 914, 915, 916, 196, 1218, 491,
	594, 1159, 485, 198, 595, 452, 698, 485, 1011, 485,
	204, 200, 23, 452, 700, 465, 717, 719, 720, 429,
	430, 718, 1287, 1030, 452, 452, 452, 452, 452, 452,
	452, 452, 1129, 535, 299, 1314, 465, 202, 452, 452,
	206, 1128, 546, 996, 697, 816, 1295, 816, 465, 192,
	987, 1028, 876, 680, 816, 1247, 192, 192, 192, 753,
	484, 483, 82, 677, 82, 1212, 1211, 54, 197, 676,
	82, 667, 227, 665, 319, 1117, 465, 485, 660, 521,
	1200, 465, 704, 678, 1148, 1147, 728, 1144, 1145, 1144,
	1143, 929, 465, 566, 465, 199, 443, 207, 208, 209,
	210, 214, 725, 51, 762, 465, 213, 212, 501, 502,
	503, 504, 505, 506, 507, 500, 1029, 536, 510, 436,
	706, 1034, 1031, 1024, 1025, 1032, 1027, 1026, 769, 772,
	721, 422, 723, 592, 778, 612, 611, 465, 1033, 305,
	68, 25, 67, 1266, 1023, 1265, 1138, 306, 306, 306,
	306, 306, 790, 754, 755, 961, 264, 263, 266, 267,
	268, 269, 581, 58, 810, 265, 270, 955, 565, 1096,
	956, 306, 961, 764, 82, 782, 593, 813, 591, 591,
	192, 192, 82, 774, 192, 25, 242, 192, 814, 962,
	54, 192, 566, 82, 82, 82, 82, 82, 82, 82,
	82, 705, 792, 793, 929, 795, 791, 82, 82, 794,
	962, 762, 192, 803, 1242, 765, 766, 1196, 764, 811,
	812, 773, 817, 1225, 855, 856, 857, 82, 1054, 818,
	1306, 192, 941, 566, 54, 938, 781, 82, 783, 784,
	566, 714, 715, 833, 664, 1150, 452, 1146, 452, 988,
	724, 25, 819, 929, 961, 847, 452, 598, 816, 761,
	763, 869, 498, 508, 509, 501, 502, 503, 504, 505,
	506, 507, 500, 929, 779, 510, 780, 940, 700, 871,
	937, 82, 865, 866, 508, 509, 501, 502, 503, 504,
	505, 506, 507, 500, 535, 848, 510, 767, 768, 868,
	54, 1111, 229, 991, 864, 918, 805, 966, 967, 1131,
	859, 725, 858, 192, 71, 312, 192, 192, 192, 192,
	192, 1096, 906, 1015, 728, 969, 729, 907, 192, 674,
	462, 192, 712, 800, 798, 192, 1186, 465, 801, 799,
	192, 192, 972, 571, 574, 575, 576, 572, 82, 573,
	577, 54, 919, 966, 967, 971, 797, 802, 319, 575,
	576, 82, 796, 824, 233, 234, 958, 959, 1324, 1316,
	1050, 830, 902, 479, 499, 498, 508, 509, 501, 502,
	503, 504, 505, 506, 507, 500, 1323, 477, 510, 913,
	912, 911, 467, 1006, 306, 945, 610, 273, 444, 305,
	305, 305, 305, 305, 1194, 998, 468, 1294, 1293, 1240,
	992, 979, 192, 1226, 305, 82, 978, 82, 980, 970,
	878, 192, 957, 305, 192, 82, 673, 579, 989, 230,
	231, 479, 80, 224, 1279, 1271, 928, 1239, 225, 525,
	526, 527, 528, 529, 530, 531, 982, 1238, 1003, 1004,
	58, 1270, 943, 452, 1228, 903, 904, 962, 473, 724,
	1005, 481, 1007, 1008, 1009, 993, 994, 321, 571, 574,
	575, 576, 572, 426, 573, 577, 1012, 311, 452, 926,
	910, 1282, 1216, 927, 695, 1021, 60, 62, 909, 590,
	931, 932, 933, 55, 1, 875, 1018, 884, 1296, 942,
	1252, 1035, 1125, 835, 948, 827, 420, 950, 951, 952,
	953, 70, 1288, 834, 1258, 1214, 842, 1000, 845, 1130,
	930, 1291, 997, 617, 615, 616, 614, 619, 618, 613,
	1094, 203, 314, 1058, 1057, 947, 578, 1101, 606, 51,
	870, 1097, 790, 482, 1063, 72, 1038, 1037, 790, 1100,
	1083, 725, 1090, 1082, 1113, 1114, 1115, 880, 1045, 691,
	82, 899, 460, 192, 729, 205, 82, 451, 519, 1106,
	1105, 1107, 908, 983, 320, 1103, 1280, 1192, 82, 701,
	1269, 1227, 944, 1119, 545, 775, 250, 1118, 830, 716,
	1124, 262, 259, 261, 1123, 1102, 260, 321, 321, 321,
	321, 707, 321, 954, 492, 248, 240, 304, 562, 321,
	1139, 1140, 570, 568, 567, 968, 964, 303, 1053, 1189,
	1276, 82, 82, 711, 82, 27, 59, 1152, 235, 21,
	20, 19, 22, 18, 1020, 306, 488, 17, 16, 33,
	1154, 15, 14, 1157, 13, 12, 305, 82, 11, 9,
	192, 192, 1162, 8, 1062, 10, 7, 1161, 192, 6,
	5, 4, 226, 24, 2, 0, 0, 82, 0, 0,
	1188, 1169, 0, 0, 0, 0, 0, 1056, 0, 726,
	0, 0, 735, 736, 737, 738, 739, 740, 741, 742,
	743, 744, 745, 746, 747, 748, 749, 0, 0, 1086,
	1195, 0, 1116, 1204, 1092, 1205, 1206, 1207, 82, 82,
	597, 0, 321, 0, 1203, 1183, 465, 1208, 607, 0,
	1108, 1109, 0, 989, 1110, 0, 1210, 1112, 0, 0,
	452, 0, 0, 0, 0, 0, 0, 0, 82, 0,
	82, 82, 1217, 0, 1219, 0, 0, 1223, 830, 0,
	830, 1224, 0, 499, 498, 508, 509, 501, 502, 503,
	504, 505, 506, 507, 500, 192, 1229, 510, 454, 455,
	456, 0, 459, 82, 0, 0, 0, 1101, 0, 463,
	1244, 0, 0, 1163, 0, 0, 82, 192, 0, 1100,
	1165, 0, 1241, 82, 0, 0, 0, 0, 0, 0,
	0, 82, 0, 1251, 192, 1160, 1257, 1268, 1180, 1181,
	1182, 1056, 0, 1185, 0, 0, 0, 1267, 0, 0,
	0, 0, 321, 1101, 1263, 51, 1264, 1197, 1198, 1199,
	321, 1202, 1283, 0, 0, 1100, 1243, 0, 0, 0,
	1286, 321, 321, 321, 321, 321, 321, 321, 321, 0,
	0, 1191, 0, 0, 0, 321, 321, 0, 0, 535,
	1300, 82, 0, 82, 82, 82, 192, 82, 1307, 790,
	1305, 0, 0, 82, 0, 708, 849, 850, 851, 852,
	1312, 1284, 0, 830, 0, 488, 0, 305, 321, 0,
	0, 0, 860, 861, 862, 0, 1321, 1322, 0, 82,
	82, 82, 0, 0, 0, 0, 0, 0, 1329, 0,
	1020, 830, 0, 470, 0, 1236, 0, 0, 0, 920,
	921, 922, 0, 0, 0, 0, 0, 0, 0, 756,
	0, 1248, 1249, 1250, 0, 0, 0, 0, 0, 770,
	770, 0, 0, 0, 0, 770, 0, 0, 0, 0,
	82, 82, 190, 0, 0, 215, 0, 1272, 1273, 1274,
	1275, 0, 82, 770, 0, 307, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 0, 239, 0, 190,
	190, 0, 0, 0, 0, 0, 0, 190, 0, 0,
	0, 0, 661, 0, 0, 0, 321, 1281, 0, 1187,
	670, 0, 1301, 0, 189, 0, 0, 0, 0, 321,
	1308, 681, 682, 683, 684, 685, 686, 687, 688, 0,
	0, 0, 1313, 0, 0, 689, 690, 0, 1299, 535,
	0, 1319, 310, 0, 0, 82, 0, 473, 0, 424,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 0,
	0, 0, 0, 0, 1184, 0, 0, 1333, 1334, 0,
	0, 0, 0, 321, 1320, 321, 0, 0, 0, 0,
	0, 0, 0, 321, 499, 498, 508, 509, 501, 502,
	503, 504, 505, 506, 507, 500, 0, 0, 510, 0,
	0, 0, 0, 0, 190, 0, 190, 321, 0, 0,
	0, 0, 190, 0, 0, 0, 0, 0, 0, 190,
	0, 1060, 1061, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1084, 1085, 0, 1087, 1088, 499,
	498, 508, 509, 501, 502, 503, 504, 505, 506, 507,
	500, 0, 0, 510, 0, 0, 432, 0, 433, 25,
	26, 52, 28, 29, 440, 1059, 0, 0, 0, 0,
	0, 442, 0, 30, 31, 0, 0, 0, 0, 0,
	46, 0, 0, 0, 0, 32, 499, 498, 508, 509,
	501, 502, 503, 504, 505, 506, 507, 500, 0, 0,
	510, 0, 0, 0, 41, 0, 0, 0, 54, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 977, 0,
	0, 0, 0, 190, 981, 0, 0, 0, 0, 0,
	190, 586, 190, 0, 0, 0, 321, 0, 0, 0,
	0, 0, 0, 877, 0, 879, 0, 0, 0, 0,
	0, 0, 0, 898, 0, 0, 1164, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 34, 35,
	37, 36, 39, 0, 0, 564, 0, 0, 0, 1016,
	321, 0, 321, 0, 588, 0, 0, 0, 0, 40,
	47, 48, 925, 0, 49, 50, 38, 0, 0, 0,
	0, 0, 0, 0, 0, 321, 0, 0, 42, 43,
	0, 44, 45, 499, 498, 508, 509, 501, 502, 503,
	504, 505, 506, 507, 500, 321, 0, 510, 0, 0,
	0, 1166, 1167, 0, 1168, 0, 0, 1170, 0, 1172,
	0, 1174, 1175, 1176, 1177, 1178, 1179, 321, 0, 0,
	0, 0, 0, 0, 190, 190, 0, 0, 190, 0,
	0, 190, 0, 770, 0, 679, 1104, 977, 0, 770,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1231, 1232, 0, 1233, 1234, 1235, 190, 0, 0, 0,
	0, 53, 0, 1213, 0, 0, 321, 0, 321, 1127,
	0, 0, 0, 0, 0, 190, 668, 669, 0, 0,
	672, 0, 0, 675, 679, 499, 498, 508, 509, 501,
	502, 503, 504, 505, 506, 507, 500, 0, 0, 510,
	0, 1153, 1081, 0, 0, 0, 0, 0, 694, 0,
	0, 0, 0, 0, 1155, 0, 0, 0, 0, 0,
	1017, 1158, 0, 0, 0, 0, 239, 713, 0, 321,
	0, 239, 239, 0, 0, 771, 771, 239, 0, 0,
	0, 771, 0, 0, 0, 1044, 0, 0, 0, 0,
	0, 1065, 239, 239, 239, 239, 0, 190, 0, 771,
	190, 190, 190, 190, 190, 0, 0, 0, 0, 0,
	0, 0, 804, 0, 0, 190, 0, 0, 0, 586,
	0, 1067, 0, 0, 190, 190, 0, 0, 0, 597,
	0, 597, 597, 597, 0, 1209, 1331, 0, 0, 0,
	0, 321, 0, 1077, 1078, 1079, 1076, 0, 1080, 787,
	0, 0, 0, 1069, 0, 1073, 1075, 1068, 0, 1066,
	0, 0, 0, 0, 1071, 0, 0, 321, 321, 321,
	0, 0, 0, 1070, 0, 0, 0, 815, 0, 0,
	0, 0, 0, 0, 0, 0, 1072, 1074, 0, 0,
	0, 0, 0, 0, 0, 0, 190, 0, 0, 0,
	0, 0, 0, 0, 0, 190, 0, 0, 190, 0,
	0, 0, 634, 0, 0, 0, 0, 0, 1245, 1246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1127, 0, 0, 679, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 597, 0, 239, 0, 0, 872, 0,
	0, 0, 0, 494, 0, 497, 0, 896, 0, 0,
	897, 511, 512, 513, 514, 515, 516, 517, 0, 495,
	496, 493, 518, 499, 498, 508, 509, 501, 502, 503,
	504, 505, 506, 507, 500, 0, 0, 510, 0, 622,
	0, 0, 239, 0, 0, 0, 0, 0, 0, 0,
	770, 0, 0, 1309, 0, 0, 0, 0, 239, 0,
	0, 0, 0, 0, 0, 0, 1315, 0, 0, 635,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1222, 0, 0,
	648, 649, 650, 651, 652, 653, 654, 190, 655, 656,
	657, 658, 659, 636, 637, 638, 639, 620, 621, 0,
	0, 623, 0, 624, 625, 626, 627, 628, 629, 630,
	631, 632, 633, 640, 641, 642, 643, 644, 645, 646,
	647, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1048, 1049, 0, 0, 0, 0,
	0, 0, 190, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 239, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 239, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 679, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 771,
	0, 0, 0, 0, 1052, 771, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 190,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 190, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 190, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1149, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	586, 0, 0, 0, 407, 397, 0, 369, 409, 347,
	361, 417, 362, 363, 390, 333, 377, 131, 359, 418,
	419, 0, 350, 328, 356, 329, 348, 371, 99, 374,
	346, 399, 380, 113, 415, 115, 385, 0, 148, 124,
	0, 0, 373, 401, 375, 395, 368, 391, 338, 384,
	410, 360, 388, 411, 0, 0, 0, 81, 0, 831,
	832, 0, 0, 0, 0, 0, 92, 0, 387, 406,
	358, 389, 327, 386, 0, 331, 334, 416, 404, 353,
	354, 990, 0, 0, 0, 0, 0, 0, 372, 376,
	392, 366, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 351, 0, 383, 0, 0, 0, 335, 332, 0,
	370, 0, 0, 0, 337, 0, 352, 393, 0, 326,
	396, 402, 367, 193, 405, 365, 364, 408, 137, 0,
	0, 151, 104, 103, 112, 400, 349, 357, 95, 355,
	143, 133, 163, 382, 134, 142, 116, 155, 138, 162,
	194, 170, 153, 169, 84, 152, 161, 93, 145, 86,
	159, 150, 122, 108, 109, 85, 771, 141, 98, 102,
	97, 130, 156, 157, 96, 177, 89, 168, 88, 90,
	167, 129, 154, 160, 123, 120, 87, 158, 121, 119,
	111, 100, 105, 135, 118, 136, 106, 126, 125, 127,
	0, 330, 0, 149, 165, 178, 345, 403, 171, 172,
	173, 174, 0, 0, 0, 128, 91, 107, 146, 110,
	117, 140, 176, 132, 144, 94, 164, 147, 341, 344,
	339, 340, 378, 379, 412, 413, 414, 394, 336, 0,
	342, 343, 0, 398, 0, 0, 381, 83, 0, 114,
	175, 139, 101, 166, 407, 397, 0, 369, 409, 347,
	361, 417, 362, 363, 390, 333, 377, 131, 359, 418,
	419, 0, 350, 328, 356, 329, 348, 371, 99, 374,
	346, 399, 380, 113, 415, 115, 385, 0, 148, 124,
	0, 0, 373, 401, 375, 395, 368, 391, 338, 384,
	410, 360, 388, 411, 0, 0, 0, 81, 0, 831,
	832, 0, 0, 0, 0, 0, 92, 0, 387, 406,
	358, 389, 327, 386, 0, 331, 334, 416, 404, 353,
	354, 0, 0, 0, 0, 0, 0, 0, 372, 376,
	392, 366, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 351, 0, 383, 0, 0, 0, 335, 332, 0,
	370, 0, 0, 0, 337, 0, 352, 393, 0, 326,
	396, 402, 367, 193, 405, 365, 364, 408, 137, 0,
	0, 151, 104, 103, 112, 400, 349, 357, 95, 355,
	143, 133, 163, 382, 134, 142, 116, 155, 138, 162,
	194, 170, 153, 169, 84, 152, 161, 93, 145, 86,
	159, 150, 122, 108, 109, 85, 0, 141, 98, 102,
	97, 130, 156, 157, 96, 177, 89, 168, 88, 90,
	167, 129, 154, 160, 123, 120, 87, 158, 121, 119,
	111, 100, 105, 135, 118, 136, 106, 126, 125, 127,
	0, 330, 0, 149, 165, 178, 345, 403, 171, 172,
	173, 174, 0, 0, 0, 128, 91, 107, 146, 110,
	117, 140, 176, 132, 144, 94, 164, 147, 341, 344,
	339, 340, 378, 379, 412, 413, 414, 394, 336, 0,
	342, 343, 0, 398, 0, 0, 381, 83, 0, 114,
	175, 139, 101, 166, 407, 397, 0, 369, 409, 347,
	361, 417, 362, 363, 390, 333, 377, 131, 359, 418,
	419, 0, 350, 328, 356, 329, 348, 371, 99, 374,
	346, 399, 380, 113, 415, 115, 385, 0, 148, 124,
	0, 0, 373, 401, 375, 395, 368, 391, 338, 384,
	410, 360, 388, 411, 54, 0, 0, 81, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 0, 387, 406,
	358, 389, 327, 386, 0, 331, 334, 416, 404, 353,
	354, 0, 0, 0, 0, 0, 0, 0, 372, 376,
	392, 366, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 351, 0, 383, 0, 0, 0, 335, 332, 0,
	370, 0, 0, 0, 337, 0, 352, 393, 0, 326,
	396, 402, 367, 193, 405, 365, 364, 408, 137, 0,
	0, 151, 104, 103, 112, 400, 349, 357, 95, 355,
	143, 133, 163, 382, 134, 142, 116, 155, 138, 162,
	194, 170, 153, 169, 84, 152, 161, 93, 145, 86,
	159, 150, 122, 108, 109, 85, 0, 141, 98, 102,
	97, 130, 156, 157, 96, 177, 89, 168, 88, 90,
	167, 129, 154, 160, 123, 120, 87, 158, 121, 119,
	111, 100, 105, 135, 118, 136, 106, 126, 125, 127,
	0, 330, 0, 149, 165, 178, 345, 403, 171, 172,
	173, 174, 0, 0, 0, 128, 91, 107, 146, 110,
	117, 140, 176, 132, 144, 94, 164, 147, 341, 344,
	339, 340, 378, 379, 412, 413, 414, 394, 336, 0,
	342, 343, 0, 398, 0, 0, 381, 83, 0, 114,
	175, 139, 101, 166, 407, 397, 0, 369, 409, 347,
	361, 417, 362, 363, 390, 333, 377, 131, 359, 418,
	419, 0, 350, 328, 356, 329, 348, 371, 99, 374,
	346, 399, 380, 113, 415, 115, 385, 0, 148, 124,
	0, 0, 373, 401, 375, 395, 368, 391, 338, 384,
	410, 360, 388, 411, 0, 0, 0, 81, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 0, 387, 406,
	358, 389, 327, 386, 0, 331, 334, 416, 404, 353,
	354, 0, 0, 0, 0, 0, 0, 0, 372, 376,
	392, 366, 0, 0, 0, 0, 0, 0, 0, 1055,
	0, 351, 0, 383, 0, 0, 0, 335, 332, 0,
	370, 0, 0, 0, 337, 0, 352, 393, 0, 326,
	396, 402, 367, 193, 405, 365, 364, 408, 137, 0,
	0, 151, 104, 103, 112, 400, 349, 357, 95, 355,
	143, 133, 163, 382, 134, 142, 116, 155, 138, 162,
	194, 170, 153, 169, 84, 152, 161, 93, 145, 86,
	159, 150, 122, 108, 109, 85, 0, 141, 98, 102,
	97, 130, 156, 157, 96, 177, 89, 168, 88, 90,
	167, 129, 154, 160, 123, 120, 87, 158, 121, 119,
	111, 100, 105, 135, 118, 136, 106, 126, 125, 127,
	0, 330, 0, 149, 165, 178, 345, 403, 171, 172,
	173, 174, 0, 0, 0, 128, 91, 107, 146, 110,
	117, 140, 176, 132, 144, 94, 164, 147, 341, 344,
	339, 340, 378, 379, 412, 413, 414, 394, 336, 0,
	342, 343, 0, 398, 0, 0, 381, 83, 0, 114,
	175, 139, 101, 166, 407, 397, 0, 369, 409, 347,
	361, 417, 362, 363, 390, 333, 377, 131, 359, 418,
	419, 0, 350, 328, 356, 329, 348, 371, 99, 374,
	346, 399, 380, 113, 415, 115, 385, 0, 148, 124,
	0, 0, 373, 401, 375, 395, 368, 391, 338, 384,
	410, 360, 388, 411, 0, 0, 0, 244, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 0, 387, 406,
	358, 389, 327, 386, 0, 331, 334, 416, 404, 353,
	354, 0, 0, 0, 0, 0, 0, 0, 372, 376,
	392, 366, 0, 0, 0, 0, 0, 0, 0, 722,
	0, 351, 0, 383, 0, 0, 0, 335, 332, 0,
	370, 0, 0, 0, 337, 0, 352, 393, 0, 326,
	396, 402, 367, 193, 405, 365, 364, 408, 137, 0,
	0, 151, 104, 103, 112, 400, 349, 357, 95, 355,
	143, 133, 163, 382, 134, 142, 116, 155, 138, 162,
	194, 170, 153, 169, 84, 152, 161, 93, 145, 86,
	159, 150, 122, 108, 109, 85, 0, 141, 98, 102,
	97, 130, 156, 157, 96, 177, 89, 168, 88, 90,
	167, 129, 154, 160, 123, 120, 87, 158, 121, 119,
	111, 100, 105, 135, 118, 136, 106, 126, 125, 127,
	0, 330, 0, 149, 165, 178, 345, 403, 171, 172,
	173, 174, 0, 0, 0, 128, 91, 107, 146, 110,
	117, 140, 176, 132, 144, 94, 164, 147, 341, 344,
	339, 340, 378, 379, 412, 413, 414, 394, 336, 0,
	342, 343, 0, 398, 0, 0, 381, 83, 0, 114,
	175, 139, 101, 166, 407, 397, 0, 369, 409, 347,
	361, 417, 362, 363, 390, 333, 377, 131, 359, 418,
	419, 0, 350, 328, 356, 329, 348, 371, 99, 374,
	346, 399, 380, 113, 415, 115, 385, 0, 148, 124,
	0, 0, 373, 401, 375, 395, 368, 391, 338, 384,
	410, 360, 388, 411, 0, 0, 0, 81, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 0, 387, 406,
	358, 389, 327, 386, 0, 331, 334, 416, 404, 353,
	354, 0, 0, 0, 0, 0, 0, 0, 372, 376,
	392, 366, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 351, 0, 383, 0, 0, 0, 335, 332, 0,
	370, 0, 0, 0, 337, 0, 352, 393, 0, 326,
	396, 402, 367, 193, 405, 365, 364, 408, 137, 0,
	0, 151, 104, 103, 112, 400, 349, 357, 95, 355,
	143, 133, 163, 382, 134, 142, 116, 155, 138, 162,
	194, 170, 153, 169, 84, 152, 161, 93, 145, 86,
	159, 150, 122, 108, 109, 85, 0, 141, 98, 102,
	97, 130, 156, 157, 96, 177, 89, 168, 88, 90,
	167, 129, 154, 160, 123, 120, 87, 158, 121, 119,
	111, 100, 105, 135, 118, 136, 106, 126, 125, 127,
	0, 330, 0, 149, 165, 178, 345, 403, 171, 172,
	173, 174, 0, 0, 0, 128, 91, 107, 146, 110,
	117, 140, 176, 132, 144, 94, 164, 147, 341, 344,
	339, 340, 378, 379, 412, 413, 414, 394, 336, 0,
	342, 343, 0, 398, 0, 0, 381, 83, 0, 114,
	175, 139, 101, 166, 407, 397, 0, 369, 409, 347,
	361, 417, 362, 363, 390, 333, 377, 131, 359, 418,
	419, 0, 350, 328, 356, 329, 348, 371, 99, 374,
	346, 399, 380, 113, 415, 115, 385, 0, 148, 124,
	0, 0, 373, 401, 375, 395, 368, 391, 338, 384,
	410, 360, 388, 411, 0, 0, 0, 244, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 0, 387, 406,
	358, 389, 327, 386, 0, 331, 334, 416, 404, 353,
	354, 0, 0, 0, 0, 0, 0, 0, 372, 376,
	392, 366, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 351, 0, 383, 0, 0, 0, 335, 332, 0,
	370, 0, 0, 0, 337, 0, 352, 393, 0, 326,
	396, 402, 367, 193, 405, 365, 364, 408, 137, 0,
	0, 151, 104, 103, 112, 400, 349, 357, 95, 355,
	143, 133, 163, 382, 134, 142, 116, 155, 138, 162,
	194, 170, 153, 169, 84, 152, 161, 93, 145, 86,
	159, 150, 122, 108, 109, 85, 0, 141, 98, 102,
	97, 130, 156, 157, 96, 177, 89, 168, 88, 90,
	167, 129, 154, 160, 123, 120, 87, 158, 121, 119,
	111, 100, 105, 135, 118, 136, 106, 126, 125, 127,
	0, 330, 0, 149, 165, 178, 345, 403, 171, 172,
	173, 174, 0, 0, 0, 128, 91, 107, 146, 110,
	117, 140, 176, 132, 144, 94, 164, 147, 341, 344,
	339, 340, 378, 379, 412, 413, 414, 394, 336, 0,
	342, 343, 0, 398, 0, 0, 381, 83, 0, 114,
	175, 139, 101, 166, 407, 397, 0, 369, 409, 347,
	361, 417, 362, 363, 390, 333, 377, 131, 359, 418,
	419, 0, 350, 328, 356, 329, 348, 371, 99, 374,
	346, 399, 380, 113, 415, 115, 385, 0, 148, 124,
	0, 0, 373, 401, 375, 395, 368, 391, 338, 384,
	410, 360, 388, 411, 0, 0, 0, 81, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 0, 387, 406,
	358, 389, 327, 386, 0, 331, 334, 416, 404, 353,
	354, 0, 0, 0, 0, 0, 0, 0, 372, 376,
	392, 366, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 351, 0, 383, 0, 0, 0, 335, 332, 0,
	370, 0, 0, 0, 337, 0, 352, 393, 0, 326,
	396, 402, 367, 193, 405, 365, 364, 408, 137, 0,
	0, 151, 104, 103, 112, 400, 349, 357, 95, 355,
	143, 133, 163, 382, 134, 142, 116, 155, 138, 162,
	194, 170, 153, 169, 84, 152, 161, 93, 145, 86,
	159, 150, 122, 108, 109, 85, 0, 141, 98, 102,
	97, 130, 156, 157, 96, 177, 89, 168, 88, 324,
	167, 129, 154, 160, 123, 120, 87, 158, 121, 119,
	111, 100, 105, 135, 118, 136, 106, 126, 125, 127,
	0, 330, 0, 149, 165, 178, 345, 403, 171, 172,
	173, 174, 0, 0, 0, 325, 323, 107, 146, 110,
	117, 140, 176, 132, 144, 94, 164, 147, 341, 344,
	339, 340, 378, 379, 412, 413, 414, 394, 336, 0,
	342, 343, 0, 398, 0, 0, 381, 83, 0, 114,
	175, 139, 101, 166, 407, 397, 0, 369, 409, 347,
	361, 417, 362, 363, 390, 333, 377, 131, 359, 418,
	419, 0, 350, 328, 356, 329, 348, 371, 99, 374,
	346, 399, 380, 113, 415, 115, 385, 0, 148, 124,
	0, 0, 373, 401, 375, 395, 368, 391, 338, 384,
	410, 360, 388, 411, 0, 0, 0, 191, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 0, 387, 406,
	358, 389, 327, 386, 0, 331, 334, 416, 404, 353,
	354, 0, 0, 0, 0, 0, 0, 0, 372, 376,
	392, 366, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 351, 0, 383, 0, 0, 0, 335, 332, 0,
	370, 0, 0, 0, 337, 0, 352, 393, 0, 326,
	396, 402, 367, 193, 405, 365, 364, 408, 137, 0,
	0, 151, 104, 103, 112, 400, 349, 357, 95, 355,
	143, 133, 163, 382, 134, 142, 116, 155, 138, 162,
	194, 170, 153, 169, 84, 152, 161, 93, 145, 86,
	159, 150, 122, 108, 109, 85, 0, 141, 98, 102,
	97, 130, 156, 157, 96, 177, 89, 168, 88, 90,
	167, 129, 154, 160, 123, 120, 87, 158, 121, 119,
	111, 100, 105, 135, 118, 136, 106, 126, 125, 127,
	0, 330, 0, 149, 165, 178, 345, 403, 171, 172,
	173, 174, 0, 0, 0, 128, 91, 107, 146, 110,
	117, 140, 176, 132, 144, 94, 164, 147, 341, 344,
	339, 340, 378, 379, 412, 413, 414, 394, 336, 0,
	342, 343, 0, 398, 0, 0, 381, 83, 0, 114,
	175, 139, 101, 166, 407, 397, 0, 369, 409, 347,
	361, 417, 362, 363, 390, 333, 377, 131, 359, 418,
	419, 0, 350, 328, 356, 329, 348, 371, 99, 374,
	346, 399, 380, 113, 415, 115, 385, 0, 148, 124,
	0, 0, 373, 401, 375, 395, 368, 391, 338, 384,
	410, 360, 388, 411, 0, 0, 0, 81, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 0, 387, 406,
	358, 389, 327, 386, 0, 331, 334, 416, 404, 353,
	354, 0, 0, 0, 0, 0, 0, 0, 372, 376,
	392, 366, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 351, 0, 383, 0, 0, 0, 335, 332, 0,
	370, 0, 0, 0, 337, 0, 352, 393, 0, 326,
	396, 402, 367, 193, 405, 365, 364, 408, 137, 0,
	0, 151, 104, 103, 112, 400, 349, 357, 95, 355,
	143, 133, 163, 382, 134, 142, 116, 155, 138, 162,
	194, 170, 153, 169, 84, 152, 600, 93, 145, 86,
	159, 150, 122, 108, 109, 85, 0, 141, 98, 102,
	97, 130, 156, 157, 96, 177, 89, 168, 88, 324,
	167, 129, 154, 160, 123, 120, 87, 158, 121, 119,
	111, 100, 105, 135, 118, 136, 106, 126, 125, 127,
	0, 330, 0, 149, 165, 178, 345, 403, 171, 172,
	173, 174, 0, 0, 0, 325, 323, 107, 146, 110,
	117, 140, 176, 132, 144, 94, 164, 147, 341, 344,
	339, 340, 378, 379, 412, 413, 414, 394, 336, 0,
	342, 343, 0, 398, 0, 0, 381, 83, 0, 114,
	175, 139, 101, 166, 407, 397, 0, 369, 409, 347,
	361, 417, 362, 363, 390, 333, 377, 131, 359, 418,
	419, 0, 350, 328, 356, 329, 348, 371, 99, 374,
	346, 399, 380, 113, 415, 115, 385, 0, 148, 124,
	0, 0, 373, 401, 375, 395, 368, 391, 338, 384,
	410, 360, 388, 411, 0, 0, 0, 81, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 0, 387, 406,
	358, 389, 327, 386, 0, 331, 334, 416, 404, 353,
	354, 0, 0, 0, 0, 0, 0, 0, 372, 376,
	392, 366, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 351, 0, 383, 0, 0, 0, 335, 332, 0,
	370, 0, 0, 0, 337, 0, 352, 393, 0, 326,
	396, 402, 367, 193, 405, 365, 364, 408, 137, 0,
	0, 151, 104, 103, 112, 400, 349, 357, 95, 355,
	143, 133, 163, 382, 134, 142, 116, 155, 138, 162,
	194, 170, 153, 169, 84, 152, 315, 93, 145, 86,
	159, 150, 122, 108, 109, 85, 0, 141, 98, 102,
	97, 130, 156, 157, 96, 177, 89, 168, 88, 324,
	167, 129, 154, 160, 123, 120, 87, 158, 121, 119,
	111, 100, 105, 135, 118, 136, 106, 126, 125, 127,
	0, 330, 0, 149, 165, 178, 345, 403, 171, 172,
	173, 174, 0, 0, 0, 325, 323, 318, 317, 110,
	117, 140, 176, 132, 144, 94, 164, 147, 341, 344,
	339, 340, 378, 379, 412, 413, 414, 394, 336, 0,
	342, 343, 0, 398, 0, 0, 381, 83, 0, 114,
	175, 139, 101, 166, 131, 0, 0, 0, 0, 758,
	0, 246, 0, 0, 0, 99, 0, 243, 0, 0,
	113, 285, 115, 0, 0, 148, 124, 0, 0, 0,
	0, 276, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 0, 244, 264, 263, 266, 267, 268,
	269, 0, 0, 92, 265, 270, 271, 272, 0, 0,
	241, 257, 0, 284, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 254, 255, 237, 0, 0, 0,
	297, 0, 256, 0, 0, 252, 253, 258, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 0, 0, 295, 0, 137, 0, 0, 151, 104,
	103, 112, 0, 0, 0, 95, 0, 143, 133, 163,
	0, 134, 142, 116, 155, 138, 162, 194, 170, 153,
	169, 84, 152, 161, 93, 145, 86, 159, 150, 122,
	108, 109, 85, 0, 141, 98, 102, 97, 130, 156,
	157, 96, 177, 89, 168, 88, 90, 167, 129, 154,
	160, 123, 120, 87, 158, 121, 119, 111, 100, 105,
	135, 118, 136, 106, 126, 125, 127, 0, 0, 0,
	149, 165, 178, 0, 0, 171, 172, 173, 174, 0,
	0, 0, 128, 91, 107, 146, 110, 117, 140, 176,
	132, 144, 94, 164, 147, 287, 296, 293, 294, 291,
	292, 290, 289, 288, 298, 278, 279, 280, 281, 283,
	0, 286, 0, 282, 83, 131, 114, 175, 139, 101,
	166, 0, 246, 0, 0, 0, 99, 0, 243, 0,
	0, 113, 285, 115, 0, 0, 148, 124, 0, 0,
	0, 0, 276, 277, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 465, 244, 264, 263, 266, 267,
	268, 269, 0, 0, 92, 265, 270, 271, 272, 0,
	0, 241, 257, 0, 284, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 255, 0, 0, 0,
	0, 297, 0, 256, 0, 0, 252, 253, 258, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 193, 0, 0, 295, 0, 137, 0, 0, 151,
	104, 103, 112, 0, 0, 0, 95, 0, 143, 133,
	163, 0, 134, 142, 116, 155, 138, 162, 194, 170,
	153, 169, 84, 152, 161, 93, 145, 86, 159, 150,
	122, 108, 109, 85, 0, 141, 98, 102, 97, 130,
	156, 157, 96, 177, 89, 168, 88, 90, 167, 129,
	154, 160, 123, 120, 87, 158, 121, 119, 111, 100,
	105, 135, 118, 136, 106, 126, 125, 127, 0, 0,
	0, 149, 165, 178, 0, 0, 171, 172, 173, 174,
	0, 0, 0, 128, 91, 107, 146, 110, 117, 140,
	176, 132, 144, 94, 164, 147, 287, 296, 293, 294,
	291, 292, 290, 289, 288, 298, 278, 279, 280, 281,
	283, 0, 286, 0, 282, 83, 131, 114, 175, 139,
	101, 166, 0, 246, 0, 0, 0, 99, 0, 243,
	0, 0, 113, 285, 115, 0, 0, 148, 124, 0,
	0, 0, 0, 276, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 244, 264, 263, 266,
	267, 268, 269, 0, 0, 92, 265, 270, 271, 272,
	0, 0, 241, 257, 0, 284, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 255, 237, 0,
	0, 0, 297, 0, 256, 0, 0, 252, 253, 258,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 295, 0, 137, 0, 0,
	151, 104, 103, 112, 0, 0, 0, 95, 0, 143,
	133, 163, 0, 134, 142, 116, 155, 138, 162, 194,
	170, 153, 169, 84, 152, 161, 93, 145, 86, 159,
	150, 122, 108, 109, 85, 0, 141, 98, 102, 97,
	130, 156, 157, 96, 177, 89, 168, 88, 90, 167,
	129, 154, 160, 123, 120, 87, 158, 121, 119, 111,
	100, 105, 135, 118, 136, 106, 126, 125, 127, 0,
	0, 0, 149, 165, 178, 0, 0, 171, 172, 173,
	174, 0, 0, 0, 128, 91, 107, 146, 110, 117,
	140, 176, 132, 144, 94, 164, 147, 287, 296, 293,
	294, 291, 292, 290, 289, 288, 298, 278, 279, 280,
	281, 283, 0, 286, 0, 282, 83, 131, 114, 175,
	139, 101, 166, 0, 246, 0, 0, 0, 99, 0,
	243, 0, 0, 113, 285, 115, 0, 0, 148, 124,
	0, 0, 0, 0, 276, 277, 0, 0, 0, 0,
	0, 0, 823, 0, 54, 0, 0, 244, 264, 263,
	266, 267, 268, 269, 0, 0, 92, 265, 270, 271,
	272, 0, 0, 241, 257, 0, 284, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 254, 255, 0,
	0, 0, 0, 297, 0, 256, 0, 0, 252, 253,
	258, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 193, 0, 0, 295, 0, 137, 0,
	0, 151, 104, 103, 112, 0, 0, 0, 95, 0,
	143, 133, 163, 0, 134, 142, 116, 155, 138, 162,
	194, 170, 153, 169, 84, 152, 161, 93, 145, 86,
	159, 150, 122, 108, 109, 85, 0, 141, 98, 102,
	97, 130, 156, 157, 96, 177, 89, 168, 88, 90,
	167, 129, 154, 160, 123, 120, 87, 158, 121, 119,
	111, 100, 105, 135, 118, 136, 106, 126, 125, 127,
	0, 0, 0, 149, 165, 178, 0, 0, 171, 172,
	173, 174, 0, 0, 0, 128, 91, 107, 146, 110,
	117, 140, 176, 132, 144, 94, 164, 147, 287, 296,
	293, 294, 291, 292, 290, 289, 288, 298, 278, 279,
	280, 281, 283, 25, 286, 0, 282, 83, 0, 114,
	175, 139, 101, 166, 0, 131, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 99, 0, 243, 0,
	0, 113, 285, 115, 0, 0, 148, 124, 0, 0,
	0, 0, 276, 277, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 0, 244, 264, 263, 266, 267,
	268, 269, 0, 0, 92, 265, 270, 271, 272, 0,
	0, 241, 257, 0, 284, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 255, 0, 0, 0,
	0, 297, 0, 256, 0, 0, 252, 253, 258, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 193, 0, 0, 295, 0, 137, 0, 0, 151,
	104, 103, 112, 0, 0, 0, 95, 0, 143, 133,
	163, 0, 134, 142, 116, 155, 138, 162, 194, 170,
	153, 169, 84, 152, 161, 93, 145, 86, 159, 150,
	122, 108, 109, 85, 0, 141, 98, 102, 97, 130,
	156, 157, 96, 177, 89, 168, 88, 90, 167, 129,
	154, 160, 123, 120, 87, 158, 121, 119, 111, 100,
	105, 135, 118, 136, 106, 126, 125, 127, 0, 0,
	0, 149, 165, 178, 0, 0, 171, 172, 173, 174,
	0, 0, 0, 128, 91, 107, 146, 110, 117, 140,
	176, 132, 144, 94, 164, 147, 287, 296, 293, 294,
	291, 292, 290, 289, 288, 298, 278, 279, 280, 281,
	283, 0, 286, 0, 282, 83, 131, 114, 175, 139,
	101, 166, 0, 246, 0, 0, 0, 99, 0, 243,
	0, 0, 113, 285, 115, 0, 0, 148, 124, 0,
	0, 0, 0, 276, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 244, 264, 263, 266,
	267, 268, 269, 0, 0, 92, 265, 270, 271, 272,
	0, 0, 241, 257, 0, 284, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 255, 0, 0,
	0, 0, 297, 0, 256, 0, 0, 252, 253, 258,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 295, 0, 137, 0, 0,
	151, 104, 103, 112, 0, 0, 0, 95, 0, 143,
	133, 163, 0, 134, 142, 116, 155, 138, 162, 194,
	170, 153, 169, 84, 152, 161, 93, 145, 86, 159,
	150, 122, 108, 109, 85, 0, 141, 98, 102, 97,
	130, 156, 157, 96, 177, 89, 168, 88, 90, 167,
	129, 154, 160, 123, 120, 87, 158, 121, 119, 111,
	100, 105, 135, 118, 136, 106, 126, 125, 127, 0,
	0, 0, 149, 165, 178, 0, 0, 171, 172, 173,
	174, 0, 0, 0, 128, 91, 107, 146, 110, 117,
	140, 176, 132, 144, 94, 164, 147, 287, 296, 293,
	294, 291, 292, 290, 289, 288, 298, 278, 279, 280,
	281, 283, 131, 286, 0, 282, 83, 0, 114, 175,
	139, 101, 166, 99, 0, 0, 0, 0, 113, 285,
	115, 0, 0, 148, 124, 0, 0, 0, 0, 276,
	277, 0, 0, 0, 0, 0, 0, 0, 0, 54,
	0, 0, 244, 264, 263, 266, 267, 268, 269, 0,
	0, 92, 265, 270, 271, 272, 0, 0, 0, 257,
	0, 284, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 255, 0, 0, 0, 0, 297, 0,
	256, 0, 0, 252, 253, 258, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 193, 0,
	0, 295, 0, 137, 0, 0, 151, 104, 103, 112,
	0, 0, 0, 95, 0, 143, 133, 163, 1332, 134,
	142, 116, 155, 138, 162, 194, 170, 153, 169, 84,
	152, 161, 93, 145, 86, 159, 150, 122, 108, 109,
	85, 0, 141, 98, 102, 97, 130, 156, 157, 96,
	177, 89, 168, 88, 90, 167, 129, 154, 160, 123,
	120, 87, 158, 121, 119, 111, 100, 105, 135, 118,
	136, 106, 126, 125, 127, 0, 0, 0, 149, 165,
	178, 0, 0, 171, 172, 173, 174, 0, 0, 0,
	128, 91, 107, 146, 110, 117, 140, 176, 132, 144,
	94, 164, 147, 287, 296, 293, 294, 291, 292, 290,
	289, 288, 298, 278, 279, 280, 281, 283, 131, 286,
	0, 282, 83, 0, 114, 175, 139, 101, 166, 99,
	0, 0, 0, 0, 113, 285, 115, 0, 0, 148,
	124, 0, 0, 0, 0, 276, 277, 0, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 0, 244, 264,
	263, 266, 267, 268, 269, 0, 0, 92, 265, 270,
	271, 272, 0, 0, 0, 257, 0, 284, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 255,
	0, 0, 0, 0, 297, 0, 256, 0, 0, 252,
	253, 258, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 295, 0, 137,
	0, 0, 151, 104, 103, 112, 0, 0, 0, 95,
	0, 143, 133, 163, 0, 134, 142, 116, 155, 138,
	162, 194, 170, 153, 169, 84, 152, 161, 93, 145,
	86, 159, 150, 122, 108, 109, 85, 0, 141, 98,
	102, 97, 130, 156, 157, 96, 177, 89, 168, 88,
	90, 167, 129, 154, 160, 123, 120, 87, 158, 121,
	119, 111, 100, 105, 135, 118, 136, 106, 126, 125,
	127, 0, 0, 0, 149, 165, 178, 0, 0, 171,
	172, 173, 174, 0, 0, 0, 128, 91, 107, 146,
	110, 117, 140, 176, 132, 144, 94, 164, 147, 287,
	296, 293, 294, 291, 292, 290, 289, 288, 298, 278,
	279, 280, 281, 283, 131, 286, 0, 282, 83, 0,
	114, 175, 139, 101, 166, 99, 0, 0, 0, 0,
	113, 0, 115, 0, 0, 148, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	499, 498, 508, 509, 501, 502, 503, 504, 505, 506,
	507, 500, 0, 0, 510, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 0, 0, 0, 0, 137, 0, 0, 151, 104,
	103, 112, 0, 0, 0, 95, 0, 143, 133, 163,
	0, 134, 142, 116, 155, 138, 162, 194, 170, 153,
	169, 84, 152, 161, 93, 145, 86, 159, 150, 122,
	108, 109, 85, 0, 141, 98, 102, 97, 130, 156,
	157, 96, 177, 89, 168, 88, 90, 167, 129, 154,
	160, 123, 120, 87, 158, 121, 119, 111, 100, 105,
	135, 118, 136, 106, 126, 125, 127, 0, 0, 0,
	149, 165, 178, 0, 0, 171, 172, 173, 174, 0,
	0, 0, 128, 91, 107, 146, 110, 117, 140, 176,
	132, 144, 94, 164, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 83, 131, 114, 175, 139, 101,
	166, 487, 0, 0, 0, 0, 99, 0, 0, 0,
	0, 113, 0, 115, 0, 0, 148, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 0, 489, 0, 0,
	0, 0, 0, 0, 92, 0, 0, 0, 0, 484,
	483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 485, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 193, 0, 0, 0, 0, 137, 0, 0, 151,
	104, 103, 112, 0, 0, 0, 95, 0, 143, 133,
	163, 0, 134, 142, 116, 155, 138, 162, 194, 170,
	153, 169, 84, 152, 161, 93, 145, 86, 159, 150,
	122, 108, 109, 85, 0, 141, 98, 102, 97, 130,
	156, 157, 96, 177, 89, 168, 88, 90, 167, 129,
	154, 160, 123, 120, 87, 158, 121, 119, 111, 100,
	105, 135, 118, 136, 106, 126, 125, 127, 0, 0,
	0, 149, 165, 178, 0, 0, 171, 172, 173, 174,
	0, 0, 0, 128, 91, 107, 146, 110, 117, 140,
	176, 132, 144, 94, 164, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 0, 0, 0, 83, 0, 114, 175, 139,
	101, 166, 99, 0, 0, 0, 0, 113, 0, 115,
	0, 0, 148, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 0, 0, 0, 0, 74, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 77, 78, 0, 73, 0, 0,
	0, 79, 137, 0, 0, 151, 104, 103, 112, 0,
	0, 0, 95, 0, 143, 133, 163, 0, 134, 142,
	116, 155, 138, 162, 75, 170, 153, 169, 84, 152,
	161, 93, 145, 86, 159, 150, 122, 108, 109, 85,
	0, 141, 98, 102, 97, 130, 156, 157, 96, 177,
	89, 168, 88, 90, 167, 129, 154, 160, 123, 120,
	87, 158, 121, 119, 111, 100, 105, 135, 118, 136,
	106, 126, 125, 127, 0, 0, 0, 149, 165, 178,
	0, 0, 171, 172, 173, 174, 0, 0, 0, 128,
	91, 107, 146, 110, 117, 140, 176, 132, 144, 94,
	164, 147, 0, 76, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 131, 114, 175, 139, 101, 166, 585, 0,
	0, 0, 0, 99, 0, 0, 0, 0, 113, 0,
	115, 0, 0, 148, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 191, 0, 587, 0, 0, 0, 0, 0,
	0, 92, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 193, 0,
	0, 0, 0, 137, 0, 0, 151, 104, 103, 112,
	0, 0, 0, 95, 0, 143, 133, 163, 0, 134,
	142, 116, 155, 138, 162, 194, 170, 153, 169, 84,
	152, 161, 93, 145, 86, 159, 150, 122, 108, 109,
	85, 0, 141, 98, 102, 97, 130, 156, 157, 96,
	177, 89, 168, 88, 90, 167, 129, 154, 160, 123,
	120, 87, 158, 121, 119, 111, 100, 105, 135, 118,
	136, 106, 126, 125, 127, 0, 0, 0, 149, 165,
	178, 0, 0, 171, 172, 173, 174, 0, 0, 0,
	128, 91, 107, 146, 110, 117, 140, 176, 132, 144,
	94, 164, 147, 0, 0, 0, 25, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 131, 0,
	0, 0, 83, 0, 114, 175, 139, 101, 166, 99,
	0, 0, 0, 0, 113, 0, 115, 0, 0, 148,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 0, 81, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 0, 137,
	0, 0, 151, 104, 103, 112, 0, 0, 0, 95,
	0, 143, 133, 163, 0, 134, 142, 116, 155, 138,
	162, 194, 170, 153, 169, 84, 152, 161, 93, 145,
	86, 159, 150, 122, 108, 109, 85, 0, 141, 98,
	102, 97, 130, 156, 157, 96, 177, 89, 168, 88,
	90, 167, 129, 154, 160, 123, 120, 87, 158, 121,
	119, 111, 100, 105, 135, 118, 136, 106, 126, 125,
	127, 0, 0, 0, 149, 165, 178, 0, 0, 171,
	172, 173, 174, 0, 0, 0, 128, 91, 107, 146,
	110, 117, 140, 176, 132, 144, 94, 164, 147, 0,
	0, 0, 25, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 131, 0, 0, 0, 83, 0,
	114, 175, 139, 101, 166, 99, 0, 0, 0, 0,
	113, 0, 115, 0, 0, 148, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 0, 191, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 0, 0, 0, 0, 137, 0, 0, 151, 104,
	103, 112, 0, 0, 0, 95, 0, 143, 133, 163,
	0, 134, 142, 116, 155, 138, 162, 194, 170, 153,
	169, 84, 152, 161, 93, 145, 86, 159, 150, 122,
	108, 109, 85, 0, 141, 98, 102, 97, 130, 156,
	157, 96, 177, 89, 168, 88, 90, 167, 129, 154,
	160, 123, 120, 87, 158, 121, 119, 111, 100, 105,
	135, 118, 136, 106, 126, 125, 127, 0, 0, 0,
	149, 165, 178, 0, 0, 171, 172, 173, 174, 0,
	0, 0, 128, 91, 107, 146, 110, 117, 140, 176,
	132, 144, 94, 164, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	131, 0, 0, 0, 83, 0, 114, 175, 139, 101,
	166, 99, 0, 0, 0, 0, 113, 0, 115, 0,
	0, 148, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 0, 0, 709, 0, 0, 710, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 0, 0, 0,
	0, 137, 0, 0, 151, 104, 103, 112, 0, 0,
	0, 95, 0, 143, 133, 163, 0, 134, 142, 116,
	155, 138, 162, 194, 170, 153, 169, 84, 152, 161,
	93, 145, 86, 159, 150, 122, 108, 109, 85, 0,
	141, 98, 102, 97, 130, 156, 157, 96, 177, 89,
	168, 88, 90, 167, 129, 154, 160, 123, 120, 87,
	158, 121, 119, 111, 100, 105, 135, 118, 136, 106,
	126, 125, 127, 0, 0, 0, 149, 165, 178, 0,
	0, 171, 172, 173, 174, 0, 0, 0, 128, 91,
	107, 146, 110, 117, 140, 176, 132, 144, 94, 164,
	147, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 0, 0, 0,
	83, 0, 114, 175, 139, 101, 166, 99, 0, 609,
	0, 0, 113, 0, 115, 0, 0, 148, 124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 0, 608, 0,
	0, 0, 0, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 0, 0, 137, 0, 0,
	151, 104, 103, 112, 0, 0, 0, 95, 0, 143,
	133, 163, 0, 134, 142, 116, 155, 138, 162, 194,
	170, 153, 169, 84, 152, 161, 93, 145, 86, 159,
	150, 122, 108, 109, 85, 0, 141, 98, 102, 97,
	130, 156, 157, 96, 177, 89, 168, 88, 90, 167,
	129, 154, 160, 123, 120, 87, 158, 121, 119, 111,
	100, 105, 135, 118, 136, 106, 126, 125, 127, 0,
	0, 0, 149, 165, 178, 0, 0, 171, 172, 173,
	174, 0, 0, 0, 128, 91, 107, 146, 110, 117,
	140, 176, 132, 144, 94, 164, 147, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 83, 131, 114, 175,
	139, 101, 166, 585, 0, 0, 0, 0, 99, 0,
	0, 0, 0, 113, 0, 115, 0, 0, 148, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 191, 0, 587,
	0, 0, 0, 0, 0, 0, 92, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 193, 0, 0, 0, 0, 137, 0,
	0, 151, 104, 103, 112, 0, 0, 0, 95, 0,
	143, 133, 163, 0, 583, 142, 116, 155, 138, 162,
	194, 170, 153, 169, 84, 152, 161, 93, 145, 86,
	159, 150, 122, 108, 109, 85, 0, 141, 98, 102,
	97, 130, 156, 157, 96, 177, 89, 168, 88, 90,
	167, 129, 154, 160, 123, 120, 87, 158, 121, 119,
	111, 100, 105, 135, 118, 136, 106, 126, 125, 127,
	0, 0, 0, 149, 165, 178, 0, 0, 171, 172,
	173, 174, 0, 0, 0, 128, 91, 107, 146, 110,
	117, 140, 176, 132, 144, 94, 164, 147, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 131, 0, 0, 0, 83, 0, 114,
	175, 139, 101, 166, 99, 0, 0, 0, 0, 113,
	0, 115, 0, 0, 148, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	54, 0, 0, 191, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 193,
	0, 0, 0, 0, 137, 0, 0, 151, 104, 103,
	112, 0, 0, 0, 95, 0, 143, 133, 163, 0,
	134, 142, 116, 155, 138, 162, 194, 170, 153, 169,
	84, 152, 161, 93, 145, 86, 159, 150, 122, 108,
	109, 85, 0, 141, 98, 102, 97, 130, 156, 157,
	96, 177, 89, 168, 88, 90, 167, 129, 154, 160,
	123, 120, 87, 158, 121, 119, 111, 100, 105, 135,
	118, 136, 106, 126, 125, 127, 0, 0, 0, 149,
	165, 178, 0, 0, 171, 172, 173, 174, 0, 0,
	0, 128, 91, 107, 146, 110, 117, 140, 176, 132,
	144, 94, 164, 147, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	0, 0, 0, 83, 0, 114, 175, 139, 101, 166,
	99, 0, 0, 0, 0, 113, 0, 115, 0, 0,
	148, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 191,
	0, 587, 0, 0, 0, 0, 0, 0, 92, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 0, 0, 0, 0,
	137, 0, 0, 151, 104, 103, 112, 0, 0, 0,
	95, 0, 143, 133, 163, 0, 134, 142, 116, 155,
	138, 162, 194, 170, 153, 169, 84, 152, 161, 93,
	145, 86, 159, 150, 122, 108, 109, 85, 0, 141,
	98, 102, 97, 130, 156, 157, 96, 177, 89, 168,
	88, 90, 167, 129, 154, 160, 123, 120, 87, 158,
	121, 119, 111, 100, 105, 135, 118, 136, 106, 126,
	125, 127, 0, 0, 0, 149, 165, 178, 0, 0,
	171, 172, 173, 174, 0, 0, 0, 128, 91, 107,
	146, 110, 117, 140, 176, 132, 144, 94, 164, 147,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 131, 0, 0, 0, 83,
	0, 114, 175, 139, 101, 166, 99, 0, 0, 0,
	0, 113, 0, 115, 0, 0, 148, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 0, 489, 0, 0,
	0, 0, 0, 0, 92, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 193, 0, 0, 0, 0, 137, 0, 0, 151,
	104, 103, 112, 0, 0, 0, 95, 0, 143, 133,
	163, 0, 134, 142, 116, 155, 138, 162, 194, 170,
	153, 169, 84, 152, 161, 93, 145, 86, 159, 150,
	122, 108, 109, 85, 0, 141, 98, 102, 97, 130,
	156, 157, 96, 177, 89, 168, 88, 90, 167, 129,
	154, 160, 123, 120, 87, 158, 121, 119, 111, 100,
	105, 135, 118, 136, 106, 126, 125, 127, 0, 0,
	0, 149, 165, 178, 0, 0, 171, 172, 173, 174,
	0, 0, 0, 128, 91, 107, 146, 110, 117, 140,
	176, 132, 144, 94, 164, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 131, 0, 0, 83, 0, 114, 175, 139,
	101, 166, 563, 99, 0, 0, 0, 0, 113, 0,
	115, 0, 0, 148, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 191, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 193, 0,
	0, 0, 0, 137, 0, 0, 151, 104, 103, 112,
	0, 0, 0, 95, 0, 143, 133, 163, 0, 134,
	142, 116, 155, 138, 162, 194, 170, 153, 169, 84,
	152, 161, 93, 145, 86, 159, 150, 122, 108, 109,
	85, 0, 141, 98, 102, 97, 130, 156, 157, 96,
	177, 89, 168, 88, 90, 167, 129, 154, 160, 123,
	120, 87, 158, 121, 119, 111, 100, 105, 135, 118,
	136, 106, 126, 125, 127, 0, 0, 0, 149, 165,
	178, 0, 0, 171, 172, 173, 174, 0, 0, 0,
	128, 91, 107, 146, 110, 117, 140, 176, 132, 144,
	94, 164, 147, 0, 0, 0, 0, 0, 0, 0,
	0, 308, 0, 0, 0, 0, 0, 0, 131, 0,
	0, 0, 83, 0, 114, 175, 139, 101, 166, 99,
	0, 0, 0, 0, 113, 0, 115, 0, 0, 148,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 191, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 0, 137,
	0, 0, 151, 104, 103, 112, 0, 0, 0, 95,
	0, 143, 133, 163, 0, 134, 142, 116, 155, 138,
	162, 194, 170, 153, 169, 84, 152, 161, 93, 145,
	86, 159, 150, 122, 108, 109, 85, 0, 141, 98,
	102, 97, 130, 156, 157, 96, 177, 89, 168, 88,
	90, 167, 129, 154, 160, 123, 120, 87, 158, 121,
	119, 111, 100, 105, 135, 118, 136, 106, 126, 125,
	127, 0, 0, 0, 149, 165, 178, 0, 0, 171,
	172, 173, 174, 0, 0, 0, 128, 91, 107, 146,
	110, 117, 140, 176, 132, 144, 94, 164, 147, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 131, 0, 0, 0, 83, 0,
	114, 175, 139, 101, 166, 99, 0, 0, 0, 0,
	113, 0, 115, 0, 0, 148, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 191, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 0,
	193, 0, 0, 0, 0, 137, 0, 0, 151, 104,
	103, 112, 0, 0, 0, 95, 0, 143, 133, 163,
	0, 134, 142, 116, 155, 138, 162, 194, 170, 153,
	169, 84, 152, 161, 93, 145, 86, 159, 150, 122,
	108, 109, 85, 0, 141, 98, 102, 97, 130, 156,
	157, 96, 177, 89, 168, 88, 90, 167, 129, 154,
	160, 123, 120, 87, 158, 121, 119, 111, 100, 105,
	135, 118, 136, 106, 126, 125, 127, 0, 0, 0,
	149, 165, 178, 0, 0, 171, 172, 173, 174, 0,
	0, 0, 128, 91, 107, 146, 110, 117, 140, 176,
	132, 144, 94, 164, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	131, 0, 0, 0, 83, 0, 114, 175, 139, 101,
	166, 99, 0, 0, 0, 0, 113, 0, 115, 0,
	0, 148, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 0, 0, 0,
	0, 137, 0, 0, 151, 104, 103, 112, 0, 0,
	0, 95, 0, 143, 133, 163, 0, 134, 142, 116,
	155, 138, 162, 194, 170, 153, 169, 84, 152, 161,
	93, 145, 86, 159, 150, 122, 108, 109, 85, 0,
	141, 98, 102, 97, 130, 156, 157, 96, 177, 89,
	168, 88, 90, 167, 129, 154, 160, 123, 120, 87,
	158, 121, 119, 111, 100, 105, 135, 118, 136, 106,
	126, 125, 127, 0, 0, 0, 149, 165, 178, 0,
	0, 171, 172, 173, 174, 0, 0, 0, 128, 91,
	107, 146, 110, 117, 140, 176, 132, 144, 94, 164,
	147, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 0, 0, 0,
	83, 0, 114, 175, 139, 101, 166, 99, 0, 0,
	0, 0, 113, 0, 115, 0, 0, 148, 124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 244, 0, 0, 0,
	0, 0, 0, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 0, 0, 137, 0, 0,
	151, 104, 103, 112, 0, 0, 0, 95, 0, 143,
	133, 163, 0, 134, 142, 116, 155, 138, 162, 194,
	170, 153, 169, 84, 152, 161, 93, 145, 86, 159,
	150, 122, 108, 109, 85, 0, 141, 98, 102, 97,
	130, 156, 157, 96, 177, 89, 168, 88, 90, 167,
	129, 154, 160, 123, 120, 87, 158, 121, 119, 111,
	100, 105, 135, 118, 136, 106, 126, 125, 127, 0,
	0, 0, 149, 165, 178, 0, 0, 171, 172, 173,
	174, 0, 0, 0, 128, 91, 107, 146, 110, 117,
	140, 176, 132, 144, 94, 164, 147, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 131, 0, 0, 0, 83, 0, 114, 175,
	139, 101, 166, 99, 0, 0, 0, 0, 113, 0,
	115, 0, 0, 148, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 191, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 193, 0,
	0, 0, 0, 137, 0, 0, 151, 104, 103, 112,
	0, 0, 0, 95, 0, 143, 133, 163, 0, 134,
	142, 116, 155, 138, 162, 194, 170, 153, 169, 84,
	152, 161, 93, 145, 86, 159, 150, 122, 108, 109,
	85, 0, 141, 98, 102, 97, 130, 156, 157, 96,
	177, 89, 168, 88, 90, 167, 129, 154, 160, 123,
	120, 87, 158, 121, 119, 111, 100, 105, 135, 118,
	136, 106, 126, 125, 127, 0, 0, 0, 149, 165,
	178, 0, 0, 171, 172, 173, 174, 0, 0, 0,
	128, 91, 107, 146, 110, 117, 140, 176, 132, 144,
	94, 164, 147, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 83, 0, 114, 175, 139, 101, 166,
}
var yyPact = [...]int{

	1563, -1000, -190, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 855, 901, -1000, -1000, -1000, -1000, -1000,
	504, 502, -1000, 679, 7483, 38, 67, -35, 10206, 63,
	308, 10884, -1000, -16, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 665, -1000, -1000, -1000, -1000, -1000, 836, 842, 716,
	827, 743, -1000, 5648, 35, 9075, 9980, 886, 681, 4949,
	-1000, 493, 60, 10884, -156, 10432, 31, 31, 31, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 62,
	10884, -1000, 10884, 29, 481, 29, 29, 29, 10884, -1000,
	98, -1000, -1000, -1000, -1000, 10884, 458, 786, 26, 2949,
	2949, 2949, 2949, -11, 2949, -114, 697, -1000, -1000, -1000,
	-1000, 2949, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 500, 793, 6348, 6348, 855, -1000, 665, -1000,
	-1000, -1000, 770, -1000, -1000, 253, 870, -1000, 7257, 97,
	-1000, 6348, 1979, 432, -1000, -1000, 432, -1000, -1000, 78,
	-1000, -1000, 6800, 6800, 6800, 6800, 6800, 6800, 6800, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 432, -1000, 6117, 432, 432, 432, 432,
	432, 432, 432, 432, 6348, 432, 432, 432, 432, 432,
	432, 432, 432, 432, 432, 432, 432, 432, 432, 9754,
	556, 845, -1000, -1000, -1000, 823, 8166, 8849, 10884, 542,
	-1000, 360, 10432, 621, 4699, -116, -1000, -1000, -1000, 218,
	8618, -1000, -1000, -1000, 784, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	499, -1000, 1980, 440, 2949, 49, 610, 435, 230, 433,
	10884, 10884, 2949, 46, 10884, 821, 696, 10884, 431, 425,
	-1000, 4449, -1000, 2949, 2949, 2949, 2949, 2949, 2949, 2949,
	2949, -1000, -1000, -1000, -1000, -1000, -1000, 2949, 2949, -1000,
	-86, -1000, 10884, -1000, -1000, -1000, -1000, 895, 142, 408,
	95, 642, -1000, 333, 836, 500, 743, 8392, 708, -1000,
	-1000, 10884, -1000, 6348, 6348, 367, -1000, 9527, -1000, -1000,
	3449, 151, 6800, 312, 254, 6800, 6800, 6800, 6800, 6800,
	6800, 6800, 6800, 6800, 6800, 6800, 6800, 6800, 6800, 6800,
	320, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	421, -1000, 665, 517, 517, 124, 124, 124, 124, 124,
	124, 7026, 5186, 500, 468, 340, 6117, 5648, 5648, 6348,
	6348, 10658, 10658, 5648, 828, 197, 340, 10658, 500, -1000,
	500, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 5648, 5648,
	5648, 5648, 10, 10884, -1000, 10658, 9075, 9075, 9075, 9075,
	9075, -1000, 739, 733, -1000, 711, 710, 734, 10884, -1000,
	457, 8166, 116, 432, -1000, 9301, -1000, -1000, 10, 543,
	9075, 10884, -1000, -1000, -1000, -1000, 622, -1000, 4199, 621,
	-116, 616, -1000, -122, -129, 5879, 106, -1000, -1000, -1000,
	-1000, 2699, 136, 258, -100, -1000, -1000, -1000, 660, -1000,
	660, 660, 660, 660, -46, -46, -46, -46, -1000, -1000,
	-1000, -1000, -1000, 677, 675, -1000, 660, 660, 660, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 669, 669, 669, 664, 664,
	645, -1000, 10884, -174, 414, 2949, 815, 2949, -1000, 70,
	-1000, 10884, -1000, -1000, 10884, 2949, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 259, -1000, -1000, -1000, -1000, 753, 6348, 6348, 3949,
	6348, -1000, -1000, -1000, 793, -1000, 828, 889, -1000, 776,
	775, 5648, -1000, -1000, 151, 164, -1000, -1000, 345, -1000,
	-1000, -1000, -1000, 94, 432, -1000, 1731, -1000, -1000, -1000,
	-1000, 312, 6800, 6800, 6800, 123, 1731, 1629, 608, 587,
	124, 235, 235, 125, 125, 125, 125, 125, 430, 430,
	-1000, -1000, -1000, 500, -1000, -1000, -1000, 500, 5648, 617,
	-1000, -1000, 6348, -1000, 500, 455, 455, 275, 338, 644,
	-1000, 87, 641, 455, 5648, 225, -1000, 6348, 500, -166,
	-1000, 455, 500, 455, 455, 555, 432, -1000, 618, -1000,
	187, 845, 674, 692, 720, -1000, -1000, -1000, -1000, 732,
	-1000, 719, -1000, -1000, -1000, -1000, -1000, 59, 58, 57,
	10432, -1000, 865, 9075, 597, -1000, 10432, -1000, 616, -116,
	-101, -1000, -1000, -1000, 340, -1000, 412, 613, 2449, -1000,
	-1000, -1000, -1000, -1000, -1000, 668, 800, 144, 135, 405,
	-1000, -1000, 794, -1000, 239, -81, -1000, -1000, 307, -46,
	-46, -1000, -1000, 106, 781, 106, 106, 106, 368, 368,
	-1000, -1000, -1000, -1000, 294, -1000, -1000, -1000, 293, -1000,
	690, 10432, 2949, -1000, 3699, -1000, -1000, -1000, -1000, -1000,
	-1000, 413, 183, 148, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 9, -1000, 2949, -1000, 236,
	10884, 10884, 750, 340, 340, 86, -1000, -1000, 10884, -1000,
	-1000, -1000, -1000, 637, -1000, -1000, -1000, 3199, 5648, -1000,
	123, 1731, 1502, -1000, 6800, 6800, -1000, -1000, 455, 5648,
	340, -1000, -1000, -1000, 1782, 320, 1782, 6800, 6800, 3949,
	6800, 6800, -169, 568, 165, -1000, 6348, 284, -1000, 432,
	-1000, -1000, -1000, -1000, 688, 10658, 432, -1000, 7940, 10432,
	855, 10658, 6348, 6348, -1000, -1000, 6348, 666, -1000, 6348,
	-1000, -1000, -1000, 432, 432, 432, 439, -1000, 855, 597,
	-1000, -1000, -1000, -1000, -126, -135, -1000, -1000, 2699, -1000,
	2699, 10432, -1000, 403, 394, -1000, -1000, 676, 91, -1000,
	-1000, -1000, 509, 106, 106, -1000, 193, -1000, -1000, -1000,
	453, -1000, 451, 611, 448, 10884, -1000, -1000, 609, -1000,
	175, -1000, -1000, 10432, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 10432, 10884, -1000, -1000,
	-1000, -1000, -1000, 10432, -1000, -1000, 361, 6348, -1000, -1000,
	-1000, 3699, -1000, 865, 9075, -1000, -1000, 500, -1000, 6800,
	1731, 1731, -1000, -1000, 500, 660, 660, -1000, 660, 664,
	-1000, 660, -25, 660, -26, 660, 660, 660, 660, 660,
	660, -1000, 500, 500, 1079, 1455, -1000, 700, 1400, 432,
	-163, -1000, 340, 6348, 4, -1000, 795, 536, 581, -1000,
	-1000, 5417, 500, 444, 85, 439, 836, -1000, 340, 340,
	340, 10432, 340, 10432, 10432, 10432, 7714, 10432, 836, -1000,
	-1000, -1000, -1000, 2449, -1000, 429, -1000, 660, -1000, -1000,
	-76, 893, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -46, 358, -46, 288, -1000, 280, 2949,
	3699, 2699, -1000, 588, -1000, -1000, -1000, -1000, 805, -1000,
	340, 861, 604, -1000, 1731, -1000, -1000, 80, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 6800, 6800, -1000, 6800, 6800, 6800, 500,
	349, 340, 852, 841, 799, -1000, 432, -1000, -1000, 599,
	10432, 10432, -1000, -1000, 418, 411, 411, 411, 116, -1000,
	-1000, 103, 10432, -1000, 133, -1000, -139, 106, -1000, 106,
	508, 506, -1000, -1000, -1000, 10432, 432, 857, 839, -1000,
	-1000, 296, 296, 296, 296, 15, -1000, -1000, 838, 6348,
	892, -1000, 432, -1000, 665, 84, -1000, -1000, -1000, -1000,
	-1000, -1000, 103, -1000, 384, 172, 347, -1000, 243, 798,
	-1000, 797, -1000, -1000, -1000, -1000, -1000, 409, 2, -1000,
	6348, 6348, -1000, -1000, -1000, -1000, 500, 52, -181, 6348,
	594, 340, 10658, 581, 500, 10432, -1000, -1000, 264, -1000,
	-1000, -1000, 315, -1000, -1000, 610, 399, -1000, 10432, 340,
	575, -1000, 749, -172, -184, 378, 6348, 519, -1000, -1000,
	-1000, -1000, -174, -1000, 2, 771, -1000, 748, -1000, -1000,
	340, -1000, -1000, -1, -175, -4, -182, 432, -185, 6574,
	-1000, 296, 500, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1084, 56, 432, 1083, 1082, 1081, 1080, 1079, 1076,
	1075, 1073, 1069, 1068, 1065, 1064, 1062, 1061, 1059, 1058,
	1057, 1053, 1052, 1051, 1050, 1049, 103, 1048, 1046, 1045,
	58, 1043, 63, 1040, 1039, 32, 97, 35, 34, 177,
	1038, 17, 59, 54, 1037, 44, 1036, 1035, 67, 1034,
	55, 1033, 1032, 1385, 1028, 1027, 14, 23, 1026, 1025,
	1024, 1023, 49, 606, 1021, 1016, 1013, 1012, 1011, 1009,
	40, 8, 9, 12, 15, 1006, 252, 6, 1005, 39,
	1004, 1002, 1001, 1000, 28, 10, 41, 999, 997, 996,
	27, 42, 995, 11, 51, 30, 22, 5, 64, 48,
	994, 29, 43, 46, 993, 992, 389, 988, 985, 982,
	981, 979, 978, 135, 361, 977, 967, 966, 965, 31,
	169, 817, 179, 62, 963, 960, 958, 1333, 61, 53,
	20, 956, 24, 987, 37, 952, 951, 33, 949, 948,
	947, 946, 945, 944, 943, 675, 942, 941, 939, 18,
	26, 938, 937, 45, 21, 936, 935, 934, 36, 50,
	933, 47, 932, 931, 926, 925, 25, 19, 923, 13,
	922, 7, 920, 918, 2, 917, 16, 916, 3, 915,
	4, 38, 914, 913, 0, 145, 909, 907, 93,
}
var yyR1 = [...]int{

	0, 182, 183, 183, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 6, 3, 3,
	4, 4, 5, 5, 7, 7, 29, 29, 8, 9,
	9, 9, 11, 11, 12, 12, 186, 186, 48, 48,
	94, 94, 10, 10, 10, 10, 99, 99, 103, 103,
	103, 104, 104, 104, 104, 135, 135, 13, 13, 13,
	13, 13, 13, 13, 180, 180, 179, 178, 178, 177,
	177, 176, 18, 163, 164, 164, 164, 159, 138, 138,
	138, 138, 141, 141, 139, 139, 139, 139, 139, 139,
	139, 140, 140, 140, 140, 140, 142, 142, 142, 142,
	142, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 144, 144, 144, 144,
	144, 144, 144, 144, 158, 158, 145, 145, 153, 153,
	154, 154, 154, 151, 151, 152, 152, 155, 155, 155,
	146, 146, 146, 146, 146, 146, 146, 148, 148, 156,
	156, 149, 149, 149, 150, 150, 157, 157, 157, 157,
	157, 147, 147, 160, 160, 172, 172, 171, 171, 171,
	162, 162, 168, 168, 168, 168, 168, 161, 161, 170,
	170, 169, 165, 165, 165, 166, 166, 166, 167, 167,
	167, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	181, 181, 181, 181, 181, 181, 181, 181, 181, 181,
	181, 175, 173, 173, 174, 174, 15, 16, 16, 16,
	16, 16, 17, 17, 19, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 111, 111,
	108, 108, 109, 109, 110, 110, 110, 112, 112, 112,
	136, 136, 136, 21, 21, 23, 23, 24, 25, 22,
	22, 22, 22, 22, 187, 26, 27, 27, 28, 28,
	28, 32, 32, 32, 30, 30, 31, 31, 37, 37,
	36, 36, 38, 38, 38, 38, 124, 124, 124, 123,
	123, 40, 41, 41, 42, 42, 43, 43, 43, 43,
	55, 55, 93, 93, 95, 95, 44, 44, 44, 44,
	45, 45, 46, 46, 47, 47, 131, 131, 130, 130,
	130, 129, 129, 49, 49, 49, 51, 50, 50, 50,
	50, 52, 52, 54, 54, 53, 53, 56, 56, 56,
	56, 57, 57, 39, 39, 39, 39, 39, 39, 39,
	107, 107, 59, 59, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 69, 69, 69, 69, 69, 69,
	60, 60, 60, 60, 60, 60, 60, 60, 35, 35,
	70, 70, 70, 76, 71, 71, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 67, 67, 67,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 88, 88, 89, 89,
	66, 66, 66, 66, 66, 66, 66, 66, 188, 188,
	68, 68, 68, 68, 33, 33, 33, 33, 33, 134,
	134, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 80, 80, 34, 34, 78, 78, 79, 81, 81,
	77, 77, 77, 62, 62, 62, 62, 62, 62, 62,
	62, 64, 64, 64, 82, 82, 83, 83, 84, 84,
	85, 85, 86, 87, 87, 87, 90, 90, 90, 90,
	91, 91, 91, 61, 61, 61, 61, 61, 61, 92,
	92, 92, 92, 96, 96, 72, 72, 74, 74, 73,
	75, 97, 97, 101, 98, 98, 102, 102, 102, 100,
	100, 100, 126, 126, 126, 105, 105, 113, 113, 114,
	114, 106, 106, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 116, 116, 116, 117, 117, 118, 118,
	118, 125, 125, 121, 121, 122, 122, 127, 127, 128,
	128, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 184, 185, 132, 133, 133, 133,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 6, 7, 5, 10, 6,
	1, 3, 1, 3, 7, 8, 1, 1, 8, 8,
	7, 6, 4, 4, 2, 4, 1, 1, 1, 3,
	0, 4, 3, 4, 5, 4, 1, 3, 3, 2,
	2, 2, 2, 2, 1, 1, 1, 2, 8, 4,
	6, 5, 5, 5, 0, 2, 1, 0, 2, 1,
	3, 3, 4, 4, 1, 3, 3, 8, 3, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 2, 2, 2,
	1, 4, 4, 2, 2, 3, 3, 3, 3, 1,
	1, 1, 1, 1, 6, 6, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 3, 0, 5,
	0, 3, 5, 0, 1, 0, 1, 0, 1, 2,
	0, 2, 2, 2, 2, 2, 2, 0, 3, 0,
	1, 0, 3, 3, 0, 2, 0, 2, 1, 2,
	1, 0, 2, 5, 4, 1, 2, 2, 3, 2,
	0, 1, 2, 3, 3, 2, 2, 1, 1, 1,
	3, 2, 0, 1, 3, 1, 2, 3, 1, 1,
	1, 6, 7, 7, 12, 7, 7, 7, 4, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 7, 1, 3, 8, 8, 5, 4, 6, 5,
	4, 4, 3, 2, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 3, 3, 3, 3, 4, 3, 6,
	4, 2, 4, 2, 2, 2, 2, 3, 1, 1,
	0, 1, 0, 1, 0, 2, 2, 0, 2, 2,
	0, 1, 1, 2, 1, 1, 2, 1, 1, 2,
	2, 2, 2, 2, 0, 2, 0, 2, 1, 2,
	2, 0, 1, 1, 0, 1, 0, 1, 0, 1,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	1, 2, 1, 3, 1, 1, 1, 1, 3, 3,
	3, 7, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 0, 1,
	2, 1, 1, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 3, 0, 5, 5,
	5, 0, 2, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	2, 2, 3, 1, 1, 1, 1, 4, 5, 6,
	4, 4, 6, 6, 6, 6, 8, 8, 6, 8,
	8, 9, 7, 5, 4, 10, 0, 3, 1, 3,
	2, 2, 2, 2, 2, 2, 2, 2, 0, 2,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 2, 2, 2, 2, 2, 2,
	1, 0, 1, 0, 2, 1, 2, 4, 0, 2,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 0, 3, 0, 2, 0, 3,
	1, 3, 2, 0, 1, 1, 0, 2, 4, 4,
	0, 2, 4, 2, 1, 3, 5, 4, 6, 1,
	3, 3, 5, 0, 5, 1, 3, 1, 2, 3,
	1, 1, 3, 3, 1, 3, 3, 3, 3, 1,
	2, 1, 1, 1, 1, 1, 1, 0, 2, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 0, 1,
	1, 0, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -182, -1, -2, -6, -7, -8, -9, -11, -12,
	-10, -13, -14, -15, -16, -17, -19, -20, -21, -23,
	-24, -25, -22, -3, -4, 6, 7, -29, 9, 10,
	20, 21, 32, -18, 115, 116, 118, 117, 143, 119,
	136, 51, 155, 156, 158, 159, 27, 137, 138, 141,
	142, -184, 8, 238, 55, -183, 255, -84, 15, -28,
	5, -26, -187, -26, -26, -26, -26, 58, 58, -26,
	-163, 55, -118, 124, 72, 151, 230, 121, 122, 128,
	-121, 58, -120, 248, 155, 166, 160, 187, 179, 177,
	180, 217, 67, 158, 226, 139, 175, 171, 169, 29,
	192, 253, 170, 134, 133, 193, 197, 218, 164, 165,
	220, 191, 135, 34, 250, 36, 147, 221, 195, 190,
	186, 189, 163, 185, 40, 199, 198, 200, 216, 182,
	172, 18, 224, 142, 145, 194, 196, 129, 149, 252,
	222, 168, 146, 141, 225, 159, 219, 228, 39, 204,
	162, 132, 156, 153, 183, 148, 173, 174, 188, 161,
	184, 157, 150, 143, 227, 205, 254, 181, 178, 154,
	152, 209, 210, 211, 212, 251, 223, 176, 206, -106,
	124, 126, 122, 122, 123, 124, 230, 121, 122, -53,
	-127, 58, -120, 124, 151, 122, 109, 180, 115, 207,
	123, 34, 149, -136, 122, -108, 152, 209, 210, 211,
	212, 58, 219, 218, 213, -127, 157, -132, -132, -132,
	-132, -132, -2, -90, 17, 16, -5, -3, -184, 6,
	22, 23, -32, 41, 42, -27, -38, 100, -39, -127,
	-58, 74, -63, 31, 58, -120, 25, -62, -59, -77,
	-75, -76, 109, 110, 98, 99, 106, 75, 111, -67,
	-65, -66, -68, 60, 59, 68, 61, 62, 63, 64,
	69, 70, 71, -121, -73, -184, 45, 46, 239, 240,
	241, 242, 247, 243, 77, 35, 245, 229, 237, 236,
	235, 233, 234, 231, 232, 127, 230, 104, 238, -106,
	-41, -42, -43, -44, -55, -76, -184, -53, 11, -48,
	-53, 11, 54, -98, -135, 157, -102, 219, 218, -122,
	-100, -121, -119, 217, 180, 216, 120, 73, 24, 26,
	202, 76, 109, 16, 77, 108, 239, 115, 49, 231,
	232, 229, 241, 242, 230, 207, 31, 10, 27, 137,
	23, 102, 117, 80, 81, 140, 25, 138, 71, 19,
	52, 11, 13, 14, 127, 126, 92, 123, 47, 8,
	111, 28, 89, 43, 30, 45, 90, 17, 233, 234,
	33, 247, 144, 104, 50, 37, 74, 69, 53, 72,
	15, 48, 91, 118, 238, 46, 121, 6, 244, 32,
	136, 44, 122, 208, 79, 125, 70, 5, 128, 9,
	51, 54, 235, 236, 237, 35, 78, 12, 20, 21,
	-164, -159, 58, 123, -53, 238, -121, -114, 127, -114,
	-114, 122, -53, -53, -113, 127, 58, -113, -113, -113,
	-53, 112, -53, 58, 32, 230, 58, 149, 122, 150,
	124, -133, -184, -122, -133, -133, -133, 153, 154, -133,
	-109, 214, 53, -133, -185, 57, -91, 19, 33, -39,
	-127, -85, -86, -39, -84, -2, -26, 37, -30, 23,
	66, 11, -124, 73, 72, 89, -123, 24, -121, 60,
	112, -39, -60, 92, 74, 90, 91, 76, 95, 94,
	105, 98, 99, 100, 101, 102, 103, 104, 96, 97,
	108, 82, 83, 84, 85, 86, 87, 88, 93, -107,
	-184, -76, -184, 113, 114, -63, -63, -63, -63, -63,
	-63, -63, -184, -2, -71, -39, -184, -184, -184, -184,
	-184, -184, -184, -184, -184, -80, -39, -184, -184, -188,
	-184, -188, -188, -188, -188, -188, -188, -188, -184, -184,
	-184, -184, -54, 28, -53, 32, 56, -49, -51, -50,
	-52, 43, 47, 49, 44, 45, 46, 50, -131, 24,
	-41, -184, -130, 145, -129, 24, -127, 60, -53, -48,
	-186, 56, 11, 54, 60, 64, -93, -121, 56, -98,
	157, -99, -103, 220, 222, 82, -126, -121, 60, 31,
	32, 57, 56, -138, -141, -143, -142, -144, -139, -140,
	177, 178, 109, 181, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 32, 139, 173, 174, 175, 176,
	193, 194, 195, 196, 197, 198, 199, 200, 160, 161,
	162, 163, 164, 165, 166, 168, 169, 170, 171, 172,
	58, -133, 124, -180, 54, 58, 74, 58, -53, -53,
	-133, 125, -53, 25, 53, -53, 58, 58, -128, -127,
	-119, -133, -133, -133, -133, -133, -133, -133, -133, -133,
	-133, -111, 208, 215, -53, 9, 92, 56, 18, 112,
	56, -87, 26, 27, -90, -185, -32, -64, -121, 61,
	64, -31, 44, -53, -39, -39, -69, 69, 74, 70,
	71, -123, 100, -128, -122, -119, -63, -70, -73, -76,
	65, 92, 90, 91, 76, -63, -63, -63, -63, -63,
	-63, -63, -63, -63, -63, -63, -63, -63, -63, -63,
	-134, 58, 60, 58, -62, -62, -121, -37, 23, -36,
	-38, -185, 56, -185, -2, -36, -36, -39, -39, -77,
	-121, -127, -77, -36, -30, -78, -79, 78, -77, -185,
	-185, -36, -37, -36, -36, -94, 145, -53, -97, -101,
	-77, -42, -43, -43, -42, -43, 43, 43, 43, 48,
	43, 48, 43, -50, -127, -185, -56, 51, 126, 52,
	-184, -129, -94, 54, -41, -53, 56, -102, -99, 56,
	221, 223, 224, 53, -39, -150, 108, -165, -166, -167,
	-122, 60, 61, -159, -160, -168, 129, 132, 128, -161,
	123, 30, -155, 69, 74, -151, 205, -145, 55, -145,
	-145, -145, -145, -149, 180, -149, -149, -149, 55, 55,
	-145, -145, -145, -153, 55, -153, -153, -154, 55, -154,
	-125, 54, -53, -178, 251, -179, 58, -133, 25, -133,
	-115, 120, 117, 118, -175, 116, 202, 180, 67, 31,
	15, 239, 145, 254, 58, 146, -53, -53, -133, -110,
	11, 92, 39, -39, -39, -128, -86, -91, -105, 19,
	11, 35, 35, -36, 69, 70, 71, 112, -184, -70,
	-63, -63, -63, -35, 140, 73, -185, -185, -36, 56,
	-39, -185, -185, -185, 56, 54, 24, 56, 11, 112,
	56, 11, -185, -36, -81, -79, 80, -39, -185, 246,
	-185, -185, -185, -185, -61, 32, 35, -2, -184, -184,
	-57, 56, 12, 82, -46, -45, 53, 54, -47, 53,
	-45, 43, 43, 123, 123, 123, -95, -121, -57, -41,
	-57, -121, -103, -104, 225, 222, 228, 58, 56, -167,
	82, 55, 30, -161, -161, 58, 58, -146, 31, 69,
	-152, 206, 61, -149, -149, -150, 32, -150, -150, -150,
	-158, 60, -158, 61, 61, 53, -121, -133, -177, -176,
	-122, -132, -181, 151, 130, 131, 134, 133, 58, 123,
	30, 129, 132, 145, 128, -181, 151, -116, -117, 125,
	24, 123, 30, 145, -133, -112, 90, 12, -127, -127,
	40, 112, -53, -40, 11, 100, -122, -37, -35, 73,
	-63, -63, -185, -38, -137, 109, 177, 139, 175, 171,
	191, 182, 204, 173, 205, 174, 164, 161, 162, 163,
	166, 60, -134, -137, -63, -63, -122, -63, -63, 248,
	-84, 81, -39, 79, -184, -96, 53, -97, -72, -74,
	-73, -184, -2, -92, -121, -95, -84, -101, -39, -39,
	-39, 55, -39, -184, -184, -184, -185, 56, -84, -57,
	222, 226, 227, -166, -167, -170, -169, -121, 58, 58,
	-148, 53, 60, 61, 62, 69, 229, 68, 57, -150,
	-150, 58, 109, 57, 56, 57, 56, 57, 56, -53,
	56, 82, -132, -121, -132, -121, -53, -132, -121, 60,
	-39, -57, -41, -185, -63, -185, -145, -145, -145, -154,
	-145, 165, -145, 165, -145, -145, -145, -145, -145, -145,
	-185, -185, -185, 56, 19, -185, 56, 19, -184, -34,
	244, -39, -88, 145, 29, -96, 56, -185, -185, -185,
	56, 112, -185, -90, -93, -93, -93, -93, -130, -121,
	-90, 57, 56, -145, -156, 202, 9, -149, 60, -149,
	61, 61, -133, -176, -167, 55, 28, -82, 13, -149,
	58, -63, -63, -63, -63, -63, -185, 60, 15, 16,
	30, -74, 35, -2, -184, -121, -121, 57, -185, -185,
	-185, -56, -172, -171, 54, 135, 67, -169, -157, 129,
	30, 128, 229, -150, -150, 57, 57, -93, -184, -83,
	14, 16, -185, -185, -185, -185, -33, 92, 251, 16,
	-89, -39, 9, -72, -2, 112, -171, 58, -162, 82,
	60, -147, 67, 30, 30, 57, -173, -174, 145, -39,
	-71, -185, 249, 50, 252, -85, 56, -97, -185, -121,
	61, 60, -180, -185, 56, -121, 40, 250, 253, -185,
	-39, -178, -174, 35, 40, 147, 251, 148, 252, -184,
	253, -63, 144, -185, -185,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 528, 0, 284, 284, 284, 284, 284,
	0, 0, 284, 0, 598, 581, 0, 0, 0, 0,
	-2, 274, 275, 0, 277, 278, 805, 805, 805, 805,
	805, 0, 36, 37, 803, 1, 3, 536, 0, 0,
	288, 291, 286, 0, 581, 0, 0, 0, 44, 0,
	67, 0, 0, 792, 0, 793, 579, 579, 579, 599,
	600, 603, 604, 705, 706, 707, 708, 709, 710, 711,
	712, 713, 714, 715, 716, 717, 718, 719, 720, 721,
	722, 723, 724, 725, 726, 727, 728, 729, 730, 731,
	732, 733, 734, 735, 736, 737, 738, 739, 740, 741,
	742, 743, 744, 745, 746, 747, 748, 749, 750, 751,
	752, 753, 754, 755, 756, 757, 758, 759, 760, 761,
	762, 763, 764, 765, 766, 767, 768, 769, 770, 771,
	772, 773, 774, 775, 776, 777, 778, 779, 780, 781,
	782, 783, 784, 785, 786, 787, 788, 789, 790, 791,
	794, 795, 796, 797, 798, 799, 800, 801, 802, 0,
	0, 582, 0, 577, 0, 577, 577, 577, 0, 233,
	355, 607, 608, 792, 793, 0, 0, 0, 0, 806,
	806, 806, 806, 0, 806, 262, 251, 253, 254, 255,
	256, 806, 271, 272, 261, 273, 276, 279, 280, 281,
	282, 283, 30, 540, 0, 0, 528, 32, 0, 284,
	289, 290, 294, 292, 293, 285, 0, 302, 306, 0,
	363, 0, 368, 370, -2, -2, 0, 406, 407, 408,
	409, 410, 0, 0, 0, 0, 0, 0, 0, 433,
	434, 435, 436, 513, 514, 515, 516, 517, 518, 519,
	520, 372, 373, 510, 560, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 501, 0, 0, 468, 468, 468,
	468, 468, 468, 468, 468, 0, 0, 0, 0, 0,
	0, 312, 314, 315, 316, -2, 0, 338, 0, 0,
	48, 0, 0, 52, 0, 783, 564, -2, -2, 0,
	0, 605, 606, -2, 712, -2, 611, 612, 613, 614,
	615, 616, 617, 618, 619, 620, 621, 622, 623, 624,
	625, 626, 627, 628, 629, 630, 631, 632, 633, 634,
	635, 636, 637, 638, 639, 640, 641, 642, 643, 644,
	645, 646, 647, 648, 649, 650, 651, 652, 653, 654,
	655, 656, 657, 658, 659, 660, 661, 662, 663, 664,
	665, 666, 667, 668, 669, 670, 671, 672, 673, 674,
	675, 676, 677, 678, 679, 680, 681, 682, 683, 684,
	685, 686, 687, 688, 689, 690, 691, 692, 693, 694,
	695, 696, 697, 698, 699, 700, 701, 702, 703, 704,
	0, 84, 0, 0, 806, 0, 74, 0, 0, 0,
	0, 0, 806, 0, 0, 0, 0, 0, 0, 0,
	232, 0, 234, 806, 806, 806, 806, 806, 806, 806,
	806, 243, 807, 808, 244, 245, 246, 806, 806, 248,
	0, 263, 0, 257, 31, 804, 24, 0, 0, 537,
	0, 529, 530, 533, 536, 30, 291, 0, 296, 295,
	287, 0, 303, 0, 0, 0, 307, 0, 309, 310,
	0, 366, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 390, 391, 392, 393, 394, 395, 396, 397, 369,
	0, 383, 0, 0, 0, 426, 427, 428, 429, 430,
	431, 0, 298, 30, 0, 404, 0, 0, 0, 0,
	0, 0, 0, 0, 294, 0, 502, 0, 0, 460,
	0, 461, 462, 463, 464, 465, 466, 467, 0, 298,
	0, 0, 50, 0, 354, 0, 0, 0, 0, 0,
	0, 343, 0, 0, 346, 0, 0, 0, 0, 337,
	0, 0, 357, 756, 339, 0, 341, 342, -2, 0,
	0, 0, 46, 47, 42, 43, 45, 322, 0, 53,
	783, 55, 56, 0, 0, 0, 164, 572, 573, 574,
	570, 192, 0, 147, 143, 89, 90, 91, 136, 93,
	136, 136, 136, 136, 161, 161, 161, 161, 119, 120,
	121, 122, 123, 0, 0, 106, 136, 136, 136, 110,
	126, 127, 128, 129, 130, 131, 132, 133, 94, 95,
	96, 97, 98, 99, 100, 138, 138, 138, 140, 140,
	601, 69, 0, 77, 0, 806, 0, 806, 82, 0,
	208, 0, 227, 578, 0, 806, 230, 231, 356, 609,
	610, 235, 236, 237, 238, 239, 240, 241, 242, 247,
	250, 264, 258, 259, 252, 541, 0, 0, 0, 0,
	0, 532, 534, 535, 540, 33, 294, 0, 521, 0,
	0, 0, 297, 27, 364, 365, 367, 384, 0, 386,
	388, 308, 304, 0, 511, -2, 374, 375, 400, 401,
	402, 0, 0, 0, 0, 398, 379, 0, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 422,
	425, 479, 480, 0, 423, 424, 432, 0, 0, 299,
	300, 403, 0, 559, 30, 0, 0, 0, 0, 0,
	510, 0, 0, 0, 0, 508, 505, 0, 0, 0,
	469, 0, 0, 0, 0, 0, 0, 353, 361, 561,
	0, 313, 332, 334, 0, 329, 344, 345, 347, 0,
	349, 0, 351, 352, 318, 319, 320, 0, 0, 0,
	0, 340, 361, 0, 361, 49, 0, 565, 54, 0,
	0, 59, 60, 566, 567, 568, 0, 83, 193, 195,
	198, 199, 200, 85, 86, 0, 0, 0, 0, 0,
	187, 188, 150, 148, 0, 145, 144, 92, 0, 161,
	161, 113, 114, 164, 0, 164, 164, 164, 0, 0,
	107, 108, 109, 101, 0, 102, 103, 104, 0, 105,
	0, 0, 806, 71, 0, 75, 76, 72, 580, 73,
	805, 0, 0, 593, 209, 583, 584, 585, 586, 587,
	588, 589, 590, 591, 592, 0, 226, 806, 229, 267,
	0, 0, 0, 538, 539, 0, 531, 25, 0, 575,
	576, 522, 523, 29, 385, 387, 389, 0, 298, 376,
	398, 380, 0, 377, 0, 0, 371, 437, 0, 0,
	405, -2, 440, 441, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 528, 0, 506, 0, 0, 454, 0,
	470, 471, 472, 473, 553, 0, 0, -2, 0, 0,
	528, 0, 0, 0, 326, 333, 0, 0, 327, 0,
	328, 348, 350, 0, 0, 0, 0, 324, 528, 361,
	41, 323, 57, 58, 0, 0, 64, 165, 0, 196,
	0, 0, 182, 0, 0, 185, 186, 157, 0, 149,
	88, 146, 0, 164, 164, 115, 0, 116, 117, 118,
	0, 134, 0, 0, 0, 0, 602, 70, 78, 79,
	0, 201, 805, 0, 210, 211, 212, 213, 214, 215,
	216, 217, 218, 219, 220, 805, 0, 0, 805, 594,
	595, 596, 597, 0, 228, 249, 0, 0, 265, 266,
	542, 0, 26, 361, 0, 305, 512, 0, 378, 0,
	399, 381, 438, 301, 0, 136, 136, 484, 136, 140,
	487, 136, 489, 136, 492, 136, 136, 136, 136, 136,
	136, 500, 0, 0, 0, 0, 511, 0, 0, 0,
	503, 453, 509, 0, 456, 34, 0, 553, 543, 555,
	557, 0, 30, 0, 549, 0, 536, 562, 362, 563,
	330, 0, 335, 0, 0, 0, 338, 0, 536, 40,
	61, 62, 63, 194, 197, 0, 189, 136, 183, 184,
	159, 0, 151, 152, 153, 154, 155, 156, 137, 111,
	112, 162, 163, 161, 0, 161, 0, 141, 0, 806,
	0, 0, 202, 0, 203, 205, 206, 207, 0, 268,
	269, 524, 311, 439, 382, 442, 481, 161, 485, 486,
	488, 490, 491, 493, 494, 495, 496, 497, 498, 499,
	444, 443, 445, 0, 0, 448, 0, 0, 0, 0,
	0, 507, 0, 0, 0, 35, 0, 558, -2, 0,
	0, 0, 51, 38, 0, 0, 0, 0, 357, 325,
	39, 174, 0, 191, 166, 160, 0, 164, 135, 164,
	0, 0, 68, 80, 81, 0, 0, 526, 0, 482,
	483, 0, 0, 0, 0, 474, 452, 504, 0, 0,
	0, 556, 0, -2, 0, 551, 550, 331, 358, 359,
	360, 321, 173, 175, 0, 180, 0, 190, 171, 0,
	168, 170, 158, 124, 125, 139, 142, 0, 0, 28,
	0, 0, 446, 447, 449, 450, 0, 0, 0, 0,
	457, 458, 0, 546, 30, 0, 176, 177, 0, 181,
	179, 87, 0, 167, 169, 74, 0, 222, 0, 527,
	525, 451, 0, 0, 0, 0, 0, 554, -2, 552,
	178, 172, 77, 221, 0, 0, 475, 0, 478, 455,
	459, 204, 223, 0, 476, 0, 0, 0, 0, 0,
	477, 0, 0, 224, 225,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 75, 3, 3, 3, 103, 95, 3,
	55, 57, 100, 98, 56, 99, 112, 101, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 255,
	83, 82, 84, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 94, 3, 106,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	76, 77, 78, 79, 80, 81, 85, 86, 87, 88,
	89, 90, 91, 92, 93, 96, 97, 102, 104, 107,
	108, 109, 110, 111, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:305
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:310
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:311
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:315
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:340
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:348
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:352
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:358
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 28:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:365
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:369
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:375
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:379
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:385
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:389
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 34:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:396
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:408
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:420
		{
			yyVAL.str = InsertStr
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:424
		{
			yyVAL.str = ReplaceStr
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:430
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:436
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 40:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:440
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:444
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:450
		{
			yyVAL.statement = &Prepare{Name: NewColIdent(string(yyDollar[2].bytes)), Stmt: NewStrVal(yyDollar[4].bytes)}
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:454
		{
			yyVAL.statement = &Prepare{Name: NewColIdent(string(yyDollar[2].bytes)), Stmt: NewValArg(yyDollar[4].bytes)}
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:460
		{
			yyVAL.statement = &Execute{Name: NewColIdent(string(yyDollar[2].bytes))}
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:464
		{
			yyVAL.statement = &Execute{Name: NewColIdent(string(yyDollar[2].bytes)), Params: yyDollar[4].columns}
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:469
		{
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:470
		{
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:474
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:478
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:483
		{
			yyVAL.partitions = nil
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:487
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:493
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:497
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:501
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:505
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:511
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:515
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:521
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:525
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:529
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:535
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:539
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:543
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:547
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:553
		{
			yyVAL.str = SessionStr
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:557
		{
			yyVAL.str = GlobalStr
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:563
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 68:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:568
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:573
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 70:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:577
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:581
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 72:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:589
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:593
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:598
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:602
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:608
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:613
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:618
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:624
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:629
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:635
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:641
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:648
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:655
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:660
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:664
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 87:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:670
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:681
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:692
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:697
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:703
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:707
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:711
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:715
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:719
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:723
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:727
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:733
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:739
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:745
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:751
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:757
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:765
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:769
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:773
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:777
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:781
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:787
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:791
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:795
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:799
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:803
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:807
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:811
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:815
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:819
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:823
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:831
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:835
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:839
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 125:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:850
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:854
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:858
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:862
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:866
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:870
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:874
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:878
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:884
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:889
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:894
		{
			yyVAL.optVal = nil
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:898
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:903
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 139:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:907
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:915
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:919
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 142:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:925
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:933
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:937
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:942
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:946
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:952
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:956
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:960
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:965
		{
			yyVAL.optVal = nil
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:969
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:973
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:977
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:981
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:985
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:989
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:994
		{
			yyVAL.optVal = nil
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:998
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1003
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1007
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1012
		{
			yyVAL.str = ""
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1016
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1020
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1025
		{
			yyVAL.str = ""
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1029
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1034
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1038
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1042
		{
			yyVAL.colKeyOpt = colKey
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1046
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1050
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 171:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1055
		{
			yyVAL.optVal = nil
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1059
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1065
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1069
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1075
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1079
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1085
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1089
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1094
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1100
		{
			yyVAL.str = ""
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1104
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1110
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1114
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1118
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1122
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1126
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1132
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1136
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1142
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1146
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1152
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 192:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1157
		{
			yyVAL.str = ""
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1161
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1165
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1173
		{
			yyVAL.str = yyDollar[1].str
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1177
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1181
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1187
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1191
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1195
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1201
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 202:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1205
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 203:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1209
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 204:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1213
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 205:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1226
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 206:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1236
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 207:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1241
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 208:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1246
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 209:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1250
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 221:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1269
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1275
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1279
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 224:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1285
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 225:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1289
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 226:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1295
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 227:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1301
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 228:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1309
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 229:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1314
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 230:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1322
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1326
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1332
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1336
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1341
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1347
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1351
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1355
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1360
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1364
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1368
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1372
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1376
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1380
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1384
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1388
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1392
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1396
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1400
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1404
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1414
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1418
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1422
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1426
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1430
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1434
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1438
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1448
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1454
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1458
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1464
		{
			yyVAL.str = ""
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1468
		{
			yyVAL.str = "extended "
		}
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1474
		{
			yyVAL.str = ""
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1478
		{
			yyVAL.str = "full "
		}
	case 264:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1484
		{
			yyVAL.str = ""
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1488
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1492
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 267:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1498
		{
			yyVAL.showFilter = nil
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1502
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1506
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 270:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1512
		{
			yyVAL.str = ""
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1516
		{
			yyVAL.str = SessionStr
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1520
		{
			yyVAL.str = GlobalStr
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1526
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1530
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1536
		{
			yyVAL.statement = &Begin{}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1540
		{
			yyVAL.statement = &Begin{}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1546
		{
			yyVAL.statement = &Commit{}
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1552
		{
			yyVAL.statement = &Rollback{}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1558
		{
			yyVAL.statement = &OtherRead{}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1562
		{
			yyVAL.statement = &OtherRead{}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1566
		{
			yyVAL.statement = &OtherRead{}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1570
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1574
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1579
		{
			setAllowComments(yylex, true)
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1583
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 286:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1589
		{
			yyVAL.bytes2 = nil
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1593
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1599
		{
			yyVAL.str = UnionStr
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1603
		{
			yyVAL.str = UnionAllStr
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1607
		{
			yyVAL.str = UnionDistinctStr
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1612
		{
			yyVAL.str = ""
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1616
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1620
		{
			yyVAL.str = SQLCacheStr
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1625
		{
			yyVAL.str = ""
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1629
		{
			yyVAL.str = DistinctStr
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1634
		{
			yyVAL.str = ""
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1638
		{
			yyVAL.str = StraightJoinHint
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1643
		{
			yyVAL.selectExprs = nil
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1647
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1653
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1657
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1663
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1667
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1671
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 305:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1675
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1680
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1684
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1688
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1695
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1701
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1707
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1711
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1721
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1725
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1729
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1733
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1739
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 321:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1743
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1749
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1753
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1759
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1763
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1776
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1780
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1784
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1788
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1794
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 331:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1796
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1800
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1802
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1806
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1808
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1811
		{
			yyVAL.empty = struct{}{}
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1813
		{
			yyVAL.empty = struct{}{}
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1816
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1820
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1824
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1831
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1837
		{
			yyVAL.str = JoinStr
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1841
		{
			yyVAL.str = InnerJoinStr
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1845
		{
			yyVAL.str = CrossJoinStr
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1851
		{
			yyVAL.str = StraightJoinStr
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1857
		{
			yyVAL.str = LeftJoinStr
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1861
		{
			yyVAL.str = LeftJoinStr
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1865
		{
			yyVAL.str = RightJoinStr
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1869
		{
			yyVAL.str = RightJoinStr
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1875
		{
			yyVAL.str = NaturalJoinStr
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1879
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1889
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1893
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1899
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1903
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1908
		{
			yyVAL.indexHints = nil
		}
	case 358:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1912
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 359:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1916
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 360:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1920
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1925
		{
			yyVAL.expr = nil
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1929
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1935
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1939
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1943
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1947
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1951
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1955
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1959
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 370:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1965
		{
			yyVAL.str = ""
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1969
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1975
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1979
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1985
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1989
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1993
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1997
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 378:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2001
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2005
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 380:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2009
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 381:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2013
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 382:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2017
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2021
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2027
		{
			yyVAL.str = IsNullStr
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2031
		{
			yyVAL.str = IsNotNullStr
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2035
		{
			yyVAL.str = IsTrueStr
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2039
		{
			yyVAL.str = IsNotTrueStr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2043
		{
			yyVAL.str = IsFalseStr
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2047
		{
			yyVAL.str = IsNotFalseStr
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2053
		{
			yyVAL.str = EqualStr
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2057
		{
			yyVAL.str = LessThanStr
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2061
		{
			yyVAL.str = GreaterThanStr
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2065
		{
			yyVAL.str = LessEqualStr
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2069
		{
			yyVAL.str = GreaterEqualStr
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2073
		{
			yyVAL.str = NotEqualStr
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2077
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2081
		{
			yyVAL.str = NullSafeNotEqualStr
		}
	case 398:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2086
		{
			yyVAL.expr = nil
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2090
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2096
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2100
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2104
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2110
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2116
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2120
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2126
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2130
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2134
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2138
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2142
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2146
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2150
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2154
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2158
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2162
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2166
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2170
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2174
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2178
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2182
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2186
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2190
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2194
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2198
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2202
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2206
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2210
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2214
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2222
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2236
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2240
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2244
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 437:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2262
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 438:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2266
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 439:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2270
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 440:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2280
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2284
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 442:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2288
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 443:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2292
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 444:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2296
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 445:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2300
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 446:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2304
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 447:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2308
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 448:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2312
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 449:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2316
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 450:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2320
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 451:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2324
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 452:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2328
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 453:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2332
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 454:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2336
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 455:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:2340
		{
			yyVAL.expr = &RowNumberOverExpr{PartitionBy: yyDollar[6].partitionBy, OrderBy: yyDollar[9].orderBy}
		}
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2345
		{
			yyVAL.partitionBy = nil
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2349
		{
			yyVAL.partitionBy = yyDollar[3].partitionBy
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2355
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2359
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].expr)
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2369
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2373
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2377
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2381
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2386
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2391
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2396
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2401
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2415
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2419
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2423
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2427
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2433
		{
			yyVAL.str = ""
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2437
		{
			yyVAL.str = BooleanModeStr
		}
	case 476:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2441
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 477:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2445
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2449
		{
			yyVAL.str = QueryExpansionStr
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2455
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2459
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2465
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2469
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2473
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2477
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2481
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2485
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2491
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2495
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2499
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2503
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2507
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2511
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2515
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2519
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2523
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2527
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2531
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2535
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2539
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2543
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 501:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2548
		{
			yyVAL.expr = nil
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2552
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 503:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2557
		{
			yyVAL.str = string("")
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2561
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2567
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2571
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 507:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2577
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2582
		{
			yyVAL.expr = nil
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2586
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2592
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2596
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 512:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2600
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2606
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2610
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2614
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2618
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2622
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2626
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2630
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2634
		{
			yyVAL.expr = &NullVal{}
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2640
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2649
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2653
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2658
		{
			yyVAL.exprs = nil
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2662
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2667
		{
			yyVAL.expr = nil
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2671
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2676
		{
			yyVAL.orderBy = nil
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2680
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2686
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2690
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2696
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 533:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2701
		{
			yyVAL.str = AscScr
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2705
		{
			yyVAL.str = AscScr
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2709
		{
			yyVAL.str = DescScr
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2714
		{
			yyVAL.limit = nil
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2718
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 538:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2722
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2726
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2731
		{
			yyVAL.str = ""
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2735
		{
			yyVAL.str = ForUpdateStr
		}
	case 542:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2739
		{
			yyVAL.str = ShareModeStr
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2752
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2756
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2760
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 546:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2765
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 547:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2769
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 548:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2773
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2780
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2784
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2788
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 552:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2792
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 553:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2797
		{
			yyVAL.updateExprs = nil
		}
	case 554:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2801
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2807
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2811
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2817
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2821
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2827
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2833
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2843
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2847
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2853
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2859
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2863
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2869
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2873
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2877
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2884
		{
			yyVAL.bytes = []byte("charset")
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2891
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2895
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2899
		{
			yyVAL.expr = &Default{}
		}
	case 577:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2908
		{
			yyVAL.byt = 0
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2910
		{
			yyVAL.byt = 1
		}
	case 579:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2913
		{
			yyVAL.empty = struct{}{}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2915
		{
			yyVAL.empty = struct{}{}
		}
	case 581:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2918
		{
			yyVAL.str = ""
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2920
		{
			yyVAL.str = IgnoreStr
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2924
		{
			yyVAL.empty = struct{}{}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2926
		{
			yyVAL.empty = struct{}{}
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2928
		{
			yyVAL.empty = struct{}{}
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2930
		{
			yyVAL.empty = struct{}{}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2932
		{
			yyVAL.empty = struct{}{}
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2934
		{
			yyVAL.empty = struct{}{}
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2936
		{
			yyVAL.empty = struct{}{}
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2938
		{
			yyVAL.empty = struct{}{}
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2940
		{
			yyVAL.empty = struct{}{}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2942
		{
			yyVAL.empty = struct{}{}
		}
	case 593:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2945
		{
			yyVAL.empty = struct{}{}
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2947
		{
			yyVAL.empty = struct{}{}
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2949
		{
			yyVAL.empty = struct{}{}
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2953
		{
			yyVAL.empty = struct{}{}
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2955
		{
			yyVAL.empty = struct{}{}
		}
	case 598:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2958
		{
			yyVAL.empty = struct{}{}
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2960
		{
			yyVAL.empty = struct{}{}
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2962
		{
			yyVAL.empty = struct{}{}
		}
	case 601:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2965
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2967
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2971
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2975
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2982
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2988
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2992
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2999
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3217
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3226
		{
			decNesting(yylex)
		}
	case 805:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3231
		{
			forceEOF(yylex)
		}
	case 806:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3236
		{
			forceEOF(yylex)
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3240
		{
			forceEOF(yylex)
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3244
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
