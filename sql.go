//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	partitionBy       PartitionBy
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexOption       *IndexOption
	indexOptions      []*IndexOption
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
	showFilter        *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OR = 57409
const AND = 57410
const NOT = 57411
const BETWEEN = 57412
const CASE = 57413
const WHEN = 57414
const THEN = 57415
const ELSE = 57416
const END = 57417
const LE = 57418
const GE = 57419
const NE = 57420
const NULL_SAFE_EQUAL = 57421
const IS = 57422
const LIKE = 57423
const REGEXP = 57424
const IN = 57425
const NULL_SAFE_NOTEQUAL = 57426
const SHIFT_LEFT = 57427
const SHIFT_RIGHT = 57428
const DIV = 57429
const MOD = 57430
const UNARY = 57431
const COLLATE = 57432
const BINARY = 57433
const UNDERSCORE_BINARY = 57434
const INTERVAL = 57435
const JSON_EXTRACT_OP = 57436
const JSON_UNQUOTE_EXTRACT_OP = 57437
const CREATE = 57438
const ALTER = 57439
const DROP = 57440
const RENAME = 57441
const ANALYZE = 57442
const ADD = 57443
const SCHEMA = 57444
const TABLE = 57445
const INDEX = 57446
const VIEW = 57447
const TO = 57448
const IGNORE = 57449
const IF = 57450
const UNIQUE = 57451
const PRIMARY = 57452
const COLUMN = 57453
const CONSTRAINT = 57454
const SPATIAL = 57455
const FULLTEXT = 57456
const FOREIGN = 57457
const KEY_BLOCK_SIZE = 57458
const SHOW = 57459
const DESCRIBE = 57460
const EXPLAIN = 57461
const DATE = 57462
const ESCAPE = 57463
const REPAIR = 57464
const OPTIMIZE = 57465
const TRUNCATE = 57466
const MAXVALUE = 57467
const PARTITION = 57468
const REORGANIZE = 57469
const LESS = 57470
const THAN = 57471
const PROCEDURE = 57472
const TRIGGER = 57473
const VINDEX = 57474
const VINDEXES = 57475
const STATUS = 57476
const VARIABLES = 57477
const BEGIN = 57478
const START = 57479
const TRANSACTION = 57480
const COMMIT = 57481
const ROLLBACK = 57482
const BIT = 57483
const TINYINT = 57484
const SMALLINT = 57485
const MEDIUMINT = 57486
const INT = 57487
const INTEGER = 57488
const BIGINT = 57489
const INTNUM = 57490
const REAL = 57491
const DOUBLE = 57492
const FLOAT_TYPE = 57493
const DECIMAL = 57494
const NUMERIC = 57495
const TIME = 57496
const TIMESTAMP = 57497
const DATETIME = 57498
const YEAR = 57499
const CHAR = 57500
const VARCHAR = 57501
const BOOL = 57502
const CHARACTER = 57503
const VARBINARY = 57504
const NCHAR = 57505
const TEXT = 57506
const TINYTEXT = 57507
const MEDIUMTEXT = 57508
const LONGTEXT = 57509
const BLOB = 57510
const TINYBLOB = 57511
const MEDIUMBLOB = 57512
const LONGBLOB = 57513
const JSON = 57514
const ENUM = 57515
const GEOMETRY = 57516
const POINT = 57517
const LINESTRING = 57518
const POLYGON = 57519
const GEOMETRYCOLLECTION = 57520
const MULTIPOINT = 57521
const MULTILINESTRING = 57522
const MULTIPOLYGON = 57523
const NULLX = 57524
const AUTO_INCREMENT = 57525
const APPROXNUM = 57526
const SIGNED = 57527
const UNSIGNED = 57528
const ZEROFILL = 57529
const DATABASES = 57530
const TABLES = 57531
const VITESS_KEYSPACES = 57532
const VITESS_SHARDS = 57533
const VITESS_TABLETS = 57534
const VSCHEMA_TABLES = 57535
const EXTENDED = 57536
const FULL = 57537
const PROCESSLIST = 57538
const NAMES = 57539
const CHARSET = 57540
const GLOBAL = 57541
const SESSION = 57542
const ISOLATION = 57543
const LEVEL = 57544
const READ = 57545
const WRITE = 57546
const ONLY = 57547
const REPEATABLE = 57548
const COMMITTED = 57549
const UNCOMMITTED = 57550
const SERIALIZABLE = 57551
const CURRENT_TIMESTAMP = 57552
const DATABASE = 57553
const CURRENT_DATE = 57554
const CURRENT_TIME = 57555
const LOCALTIME = 57556
const LOCALTIMESTAMP = 57557
const UTC_DATE = 57558
const UTC_TIME = 57559
const UTC_TIMESTAMP = 57560
const REPLACE = 57561
const CONVERT = 57562
const CAST = 57563
const SUBSTR = 57564
const SUBSTRING = 57565
const GROUP_CONCAT = 57566
const SEPARATOR = 57567
const ROW_NUMBER = 57568
const OVER = 57569
const MATCH = 57570
const AGAINST = 57571
const BOOLEAN = 57572
const LANGUAGE = 57573
const WITH = 57574
const QUERY = 57575
const EXPANSION = 57576
const UNUSED = 57577

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"NULL_SAFE_NOTEQUAL",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"ROW_NUMBER",
	"OVER",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 36,
	151, 263,
	152, 263,
	-2, 253,
	-1, 238,
	110, 595,
	-2, 591,
	-1, 239,
	110, 596,
	-2, 592,
	-1, 299,
	1, 311,
	5, 311,
	12, 311,
	13, 311,
	14, 311,
	15, 311,
	17, 311,
	19, 311,
	30, 311,
	31, 311,
	41, 311,
	42, 311,
	43, 311,
	44, 311,
	45, 311,
	47, 311,
	48, 311,
	51, 311,
	52, 311,
	54, 311,
	55, 311,
	253, 311,
	-2, 330,
	-1, 309,
	80, 754,
	-2, 58,
	-1, 310,
	80, 715,
	-2, 59,
	-1, 315,
	80, 699,
	-2, 557,
	-1, 317,
	80, 736,
	-2, 559,
	-1, 578,
	52, 41,
	54, 41,
	-2, 43,
	-1, 711,
	110, 598,
	-2, 594,
	-1, 916,
	5, 28,
	-2, 397,
	-1, 942,
	5, 27,
	-2, 532,
	-1, 1170,
	5, 28,
	-2, 533,
	-1, 1216,
	5, 27,
	-2, 535,
	-1, 1283,
	5, 28,
	-2, 536,
}

const yyPrivate = 57344

const yyLast = 11167

var yyAct = [...]int{

	269, 47, 1272, 858, 461, 524, 1227, 1076, 243, 774,
	1104, 268, 649, 1077, 1176, 792, 1003, 217, 810, 814,
	572, 523, 3, 1073, 813, 945, 961, 53, 838, 775,
	1048, 746, 852, 314, 908, 211, 570, 743, 1006, 994,
	588, 736, 824, 762, 713, 462, 456, 411, 47, 848,
	587, 950, 771, 245, 574, 559, 222, 890, 308, 468,
	296, 241, 300, 226, 476, 305, 303, 295, 52, 216,
	1305, 1293, 1303, 832, 1279, 1301, 859, 1292, 1067, 212,
	213, 214, 215, 934, 1162, 415, 1236, 436, 1099, 1100,
	1098, 230, 539, 806, 807, 57, 1278, 1251, 294, 489,
	488, 498, 499, 491, 492, 493, 494, 495, 496, 497,
	490, 805, 589, 500, 590, 299, 181, 177, 178, 179,
	59, 60, 61, 62, 63, 451, 985, 678, 1110, 1111,
	1112, 831, 969, 875, 679, 968, 1115, 1113, 970, 1188,
	424, 1203, 839, 1151, 1149, 210, 1302, 874, 1300, 447,
	448, 438, 1273, 440, 1165, 1027, 772, 745, 1228, 1234,
	425, 418, 174, 454, 175, 793, 795, 239, 175, 657,
	960, 1230, 826, 826, 879, 648, 959, 236, 437, 439,
	958, 413, 421, 873, 189, 176, 513, 514, 1259, 1173,
	1035, 924, 902, 685, 442, 442, 442, 442, 76, 442,
	979, 480, 186, 431, 1119, 186, 442, 489, 488, 498,
	499, 491, 492, 493, 494, 495, 496, 497, 490, 811,
	500, 500, 682, 47, 490, 180, 1031, 500, 195, 186,
	186, 76, 870, 867, 868, 186, 866, 76, 510, 1229,
	794, 512, 475, 1264, 465, 1129, 885, 948, 464, 591,
	474, 473, 205, 909, 1069, 1120, 1252, 1235, 1233, 435,
	763, 877, 880, 839, 417, 825, 825, 475, 522, 652,
	526, 527, 528, 529, 530, 531, 532, 533, 534, 983,
	537, 538, 540, 540, 540, 540, 540, 540, 540, 540,
	548, 549, 550, 551, 511, 1277, 872, 1114, 720, 473,
	232, 571, 1030, 190, 1267, 920, 763, 919, 931, 192,
	470, 1285, 718, 719, 717, 475, 198, 194, 871, 466,
	427, 428, 429, 474, 473, 886, 1049, 1194, 474, 473,
	1193, 50, 1024, 998, 828, 1071, 419, 420, 1026, 829,
	475, 716, 186, 196, 186, 475, 200, 899, 900, 901,
	186, 688, 689, 997, 299, 876, 1051, 186, 826, 173,
	986, 76, 76, 76, 76, 737, 76, 738, 1262, 579,
	878, 1286, 585, 76, 191, 541, 542, 543, 544, 545,
	546, 547, 703, 705, 706, 1107, 412, 704, 1053, 1265,
	1057, 1059, 1052, 1210, 1050, 1191, 1137, 474, 473, 1055,
	76, 193, 1106, 201, 202, 203, 204, 208, 1054, 995,
	686, 455, 207, 206, 475, 442, 1289, 455, 921, 684,
	293, 1056, 1058, 442, 515, 516, 517, 518, 519, 520,
	521, 1025, 980, 1023, 442, 442, 442, 442, 442, 442,
	442, 442, 493, 494, 495, 496, 497, 490, 442, 442,
	500, 825, 1220, 1270, 455, 683, 823, 821, 1158, 455,
	822, 186, 1220, 455, 1240, 666, 474, 473, 186, 186,
	186, 474, 473, 971, 76, 1220, 1221, 1185, 1184, 1239,
	76, 861, 690, 475, 1095, 455, 1172, 455, 475, 664,
	1126, 1125, 1122, 1123, 1116, 714, 489, 488, 498, 499,
	491, 492, 493, 494, 495, 496, 497, 490, 1122, 1121,
	500, 914, 455, 47, 711, 556, 455, 748, 455, 459,
	463, 739, 561, 564, 565, 566, 562, 526, 563, 567,
	692, 663, 951, 952, 662, 653, 481, 715, 709, 651,
	755, 758, 707, 646, 23, 433, 764, 426, 750, 598,
	597, 1074, 412, 21, 946, 582, 946, 300, 300, 300,
	300, 300, 748, 799, 776, 581, 1168, 1281, 940, 556,
	525, 941, 571, 1128, 796, 740, 741, 1124, 972, 536,
	947, 300, 76, 1038, 804, 926, 443, 768, 186, 186,
	76, 50, 186, 750, 760, 186, 583, 54, 581, 186,
	23, 76, 76, 76, 76, 76, 76, 76, 76, 221,
	299, 299, 299, 299, 299, 76, 76, 800, 778, 779,
	186, 781, 556, 789, 777, 299, 914, 780, 925, 691,
	797, 798, 23, 555, 299, 76, 914, 803, 914, 186,
	840, 841, 842, 802, 584, 76, 818, 50, 947, 686,
	311, 923, 442, 223, 442, 50, 650, 556, 1198, 1215,
	712, 833, 442, 721, 722, 723, 724, 725, 726, 727,
	728, 729, 730, 731, 732, 733, 734, 735, 854, 50,
	834, 835, 836, 837, 853, 751, 752, 747, 749, 76,
	946, 759, 850, 851, 922, 1089, 845, 846, 847, 975,
	50, 849, 765, 844, 766, 843, 767, 65, 769, 770,
	856, 903, 1109, 258, 257, 260, 261, 262, 263, 711,
	1074, 186, 259, 264, 186, 186, 186, 186, 186, 714,
	951, 952, 891, 999, 791, 954, 186, 892, 660, 186,
	1155, 455, 452, 186, 698, 786, 784, 957, 186, 186,
	787, 785, 76, 491, 492, 493, 494, 495, 496, 497,
	490, 956, 904, 500, 788, 76, 565, 566, 783, 782,
	1299, 715, 943, 944, 700, 701, 227, 228, 489, 488,
	498, 499, 491, 492, 493, 494, 495, 496, 497, 490,
	1291, 1034, 500, 942, 887, 561, 564, 565, 566, 562,
	300, 563, 567, 469, 1298, 930, 498, 499, 491, 492,
	493, 494, 495, 496, 497, 490, 186, 467, 500, 76,
	897, 76, 896, 457, 963, 186, 965, 525, 186, 76,
	753, 754, 955, 973, 982, 458, 964, 990, 596, 434,
	1269, 267, 1268, 1213, 976, 966, 1166, 1199, 863, 659,
	569, 224, 225, 299, 469, 898, 218, 989, 442, 991,
	992, 993, 895, 987, 988, 977, 978, 1201, 1253, 1245,
	894, 1212, 74, 219, 1211, 54, 1244, 947, 471, 1256,
	1189, 681, 56, 442, 996, 58, 580, 51, 1, 860,
	1002, 869, 809, 311, 1271, 1226, 905, 906, 907, 1103,
	820, 1005, 913, 911, 812, 313, 1019, 912, 410, 64,
	1263, 416, 819, 1232, 916, 917, 918, 1187, 928, 827,
	984, 830, 1108, 927, 1266, 981, 603, 601, 933, 602,
	600, 935, 936, 937, 938, 1072, 605, 604, 599, 197,
	1042, 1041, 1079, 306, 47, 568, 1047, 592, 855, 776,
	1075, 472, 1061, 1078, 66, 776, 1068, 1022, 711, 1091,
	1092, 1093, 1060, 1021, 76, 1080, 865, 186, 1029, 677,
	884, 1083, 455, 1084, 450, 199, 1085, 509, 893, 967,
	312, 76, 1081, 1254, 888, 889, 1164, 463, 687, 1243,
	1097, 1096, 1200, 929, 1102, 535, 761, 1101, 244, 702,
	256, 253, 255, 254, 693, 939, 1117, 1118, 482, 489,
	488, 498, 499, 491, 492, 493, 494, 495, 496, 497,
	490, 242, 234, 500, 76, 76, 298, 76, 552, 560,
	558, 557, 953, 949, 297, 313, 313, 313, 313, 300,
	313, 1037, 1130, 1161, 1250, 697, 25, 313, 55, 915,
	76, 229, 19, 186, 186, 1132, 18, 17, 1135, 20,
	16, 186, 1014, 1139, 932, 15, 14, 710, 1160, 29,
	76, 13, 12, 11, 478, 1140, 10, 1046, 9, 8,
	7, 6, 5, 4, 220, 22, 1147, 1044, 1045, 2,
	1012, 0, 299, 0, 0, 0, 0, 0, 0, 1167,
	1062, 1063, 1175, 1065, 1066, 0, 1178, 1179, 1180, 0,
	0, 76, 76, 0, 1183, 1181, 0, 0, 0, 0,
	0, 973, 0, 1144, 1145, 1094, 1146, 0, 442, 1148,
	0, 1150, 0, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 76, 76, 0, 1196, 0, 0, 313, 1197,
	1190, 0, 1192, 441, 593, 1013, 0, 0, 0, 0,
	1018, 1015, 1008, 1009, 1016, 1011, 1010, 186, 0, 1079,
	0, 311, 1217, 0, 1202, 76, 0, 1017, 0, 1186,
	1078, 0, 1214, 1020, 815, 0, 0, 0, 76, 186,
	0, 0, 0, 1216, 0, 76, 1231, 1225, 0, 0,
	1242, 0, 0, 76, 0, 1141, 186, 0, 0, 1237,
	0, 1238, 1143, 1241, 1014, 0, 1079, 0, 47, 0,
	0, 1142, 0, 1257, 1152, 1153, 1154, 1078, 0, 1157,
	0, 0, 1070, 1261, 0, 0, 0, 0, 0, 1258,
	0, 0, 1012, 1169, 1170, 1171, 0, 1174, 1086, 1087,
	0, 1275, 1088, 0, 0, 1090, 313, 76, 1280, 76,
	76, 76, 186, 76, 313, 776, 1282, 0, 0, 76,
	0, 0, 710, 0, 0, 313, 313, 313, 313, 313,
	313, 313, 313, 1287, 0, 0, 0, 0, 0, 313,
	313, 1296, 1297, 0, 0, 76, 76, 76, 0, 0,
	0, 0, 0, 1304, 0, 0, 0, 1013, 0, 694,
	0, 0, 1018, 1015, 1008, 1009, 1016, 1011, 1010, 478,
	0, 0, 313, 0, 0, 1209, 0, 0, 0, 1017,
	0, 0, 1138, 1204, 1205, 1007, 1206, 1207, 1208, 0,
	76, 76, 1222, 1223, 1224, 0, 0, 460, 444, 445,
	446, 0, 449, 76, 0, 0, 0, 0, 0, 453,
	0, 0, 0, 742, 0, 0, 76, 0, 1246, 1247,
	1248, 1249, 1163, 756, 756, 1159, 0, 0, 0, 756,
	525, 0, 184, 0, 0, 209, 0, 0, 76, 0,
	0, 0, 0, 0, 0, 0, 0, 756, 0, 0,
	815, 0, 0, 0, 0, 0, 0, 233, 0, 184,
	184, 0, 0, 0, 1276, 184, 0, 0, 0, 0,
	0, 0, 1283, 0, 0, 0, 313, 76, 0, 0,
	0, 0, 0, 0, 0, 1288, 0, 0, 301, 313,
	0, 76, 0, 0, 1294, 0, 1004, 0, 489, 488,
	498, 499, 491, 492, 493, 494, 495, 496, 497, 490,
	0, 0, 500, 0, 0, 0, 0, 0, 0, 0,
	1308, 1309, 0, 183, 0, 0, 0, 0, 0, 0,
	0, 0, 1306, 0, 0, 0, 0, 0, 0, 1040,
	0, 0, 0, 313, 0, 313, 23, 24, 48, 26,
	27, 304, 0, 313, 0, 0, 414, 0, 0, 0,
	0, 1064, 0, 1255, 0, 42, 0, 0, 0, 0,
	28, 0, 184, 0, 184, 0, 0, 313, 0, 0,
	184, 0, 0, 0, 0, 0, 0, 184, 0, 37,
	0, 0, 0, 50, 0, 1274, 525, 0, 0, 0,
	0, 0, 0, 0, 463, 0, 0, 0, 0, 815,
	0, 815, 0, 0, 0, 0, 0, 0, 647, 0,
	0, 0, 0, 0, 0, 0, 656, 0, 0, 0,
	0, 0, 1295, 0, 0, 0, 0, 667, 668, 669,
	670, 671, 672, 673, 674, 0, 0, 0, 0, 0,
	0, 675, 676, 30, 31, 33, 32, 35, 0, 0,
	0, 0, 0, 422, 0, 423, 0, 0, 0, 0,
	0, 430, 1040, 0, 36, 43, 44, 0, 432, 45,
	46, 34, 0, 0, 0, 0, 0, 0, 962, 0,
	0, 184, 0, 38, 39, 0, 40, 41, 184, 576,
	184, 484, 0, 487, 0, 313, 0, 0, 0, 501,
	502, 503, 504, 505, 506, 507, 0, 485, 486, 483,
	508, 489, 488, 498, 499, 491, 492, 493, 494, 495,
	496, 497, 490, 0, 0, 500, 0, 0, 815, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1000, 313,
	0, 313, 0, 489, 488, 498, 499, 491, 492, 493,
	494, 495, 496, 497, 490, 1004, 815, 500, 0, 0,
	0, 0, 0, 0, 313, 0, 49, 0, 0, 0,
	0, 0, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 578, 0, 0, 313, 488, 498, 499, 491, 492,
	493, 494, 495, 496, 497, 490, 1156, 0, 500, 0,
	0, 0, 0, 0, 0, 0, 313, 0, 184, 184,
	0, 0, 184, 0, 0, 184, 0, 0, 0, 665,
	0, 0, 756, 0, 0, 1082, 962, 0, 756, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 0, 0, 0, 0, 862, 0, 864, 0, 0,
	0, 0, 0, 0, 313, 883, 313, 1105, 0, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 665, 489,
	488, 498, 499, 491, 492, 493, 494, 495, 496, 497,
	490, 0, 0, 500, 0, 0, 0, 0, 0, 1131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 654,
	655, 0, 1133, 658, 0, 0, 661, 0, 0, 1136,
	233, 0, 0, 0, 0, 233, 233, 313, 0, 757,
	757, 233, 0, 0, 0, 757, 0, 0, 0, 0,
	0, 680, 0, 0, 0, 0, 233, 233, 233, 233,
	0, 184, 0, 757, 184, 184, 184, 184, 184, 0,
	699, 0, 0, 0, 0, 0, 790, 0, 0, 184,
	0, 0, 0, 576, 1043, 0, 0, 0, 184, 184,
	0, 1177, 0, 1177, 1177, 1177, 0, 1182, 0, 0,
	0, 0, 0, 313, 0, 489, 488, 498, 499, 491,
	492, 493, 494, 495, 496, 497, 490, 0, 910, 500,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 313,
	313, 313, 0, 0, 0, 0, 0, 0, 0, 489,
	488, 498, 499, 491, 492, 493, 494, 495, 496, 497,
	490, 0, 773, 500, 0, 0, 184, 620, 0, 0,
	0, 0, 0, 0, 0, 184, 0, 0, 184, 0,
	0, 1001, 0, 0, 1218, 1219, 0, 0, 0, 0,
	801, 0, 0, 0, 0, 0, 0, 1105, 0, 0,
	0, 0, 0, 665, 0, 0, 1028, 0, 0, 0,
	1177, 0, 0, 0, 0, 233, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1260, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 857, 0, 0,
	0, 0, 233, 0, 0, 0, 881, 0, 756, 882,
	0, 1284, 0, 0, 621, 0, 0, 0, 233, 0,
	0, 0, 0, 0, 0, 1290, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 634, 635, 636, 637, 638,
	639, 640, 0, 641, 642, 643, 644, 645, 622, 623,
	624, 625, 606, 607, 0, 0, 609, 184, 610, 611,
	612, 613, 614, 615, 616, 617, 618, 619, 626, 627,
	628, 629, 630, 631, 632, 633, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1032, 1033, 0, 0, 0, 0, 0,
	0, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 233, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 665, 0, 0, 0, 0, 0, 0, 0,
	0, 1195, 0, 0, 0, 0, 0, 0, 757, 0,
	0, 0, 0, 0, 757, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1036, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1127, 0,
	0, 0, 576, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1134, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	399, 389, 0, 361, 401, 339, 353, 409, 354, 355,
	382, 325, 369, 125, 351, 0, 342, 320, 348, 321,
	340, 363, 93, 366, 338, 391, 372, 107, 407, 109,
	377, 0, 142, 118, 0, 0, 365, 393, 367, 387,
	360, 383, 330, 376, 402, 352, 380, 403, 0, 0,
	0, 75, 0, 816, 817, 0, 0, 0, 0, 0,
	86, 0, 379, 398, 350, 381, 319, 378, 0, 323,
	326, 408, 396, 345, 346, 974, 0, 0, 0, 0,
	0, 0, 364, 368, 384, 358, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 343, 0, 375, 0, 0,
	0, 327, 324, 0, 362, 0, 0, 0, 329, 0,
	344, 385, 0, 318, 388, 394, 359, 187, 397, 357,
	356, 400, 131, 0, 757, 145, 98, 97, 106, 392,
	341, 349, 89, 347, 137, 127, 157, 374, 128, 136,
	110, 149, 132, 156, 188, 164, 147, 163, 78, 146,
	155, 87, 139, 80, 153, 144, 116, 102, 103, 79,
	0, 135, 92, 96, 91, 124, 150, 151, 90, 171,
	83, 162, 82, 84, 161, 123, 148, 154, 117, 114,
	81, 152, 115, 113, 105, 94, 99, 129, 112, 130,
	100, 120, 119, 121, 0, 322, 0, 143, 159, 172,
	337, 395, 165, 166, 167, 168, 0, 0, 0, 122,
	85, 101, 140, 104, 111, 134, 170, 126, 138, 88,
	158, 141, 333, 336, 331, 332, 370, 371, 404, 405,
	406, 386, 328, 0, 334, 335, 0, 390, 0, 0,
	373, 77, 0, 108, 169, 133, 95, 160, 399, 389,
	0, 361, 401, 339, 353, 409, 354, 355, 382, 325,
	369, 125, 351, 0, 342, 320, 348, 321, 340, 363,
	93, 366, 338, 391, 372, 107, 407, 109, 377, 0,
	142, 118, 0, 0, 365, 393, 367, 387, 360, 383,
	330, 376, 402, 352, 380, 403, 0, 0, 0, 75,
	0, 816, 817, 0, 0, 0, 0, 0, 86, 0,
	379, 398, 350, 381, 319, 378, 0, 323, 326, 408,
	396, 345, 346, 0, 0, 0, 0, 0, 0, 0,
	364, 368, 384, 358, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 343, 0, 375, 0, 0, 0, 327,
	324, 0, 362, 0, 0, 0, 329, 0, 344, 385,
	0, 318, 388, 394, 359, 187, 397, 357, 356, 400,
	131, 0, 0, 145, 98, 97, 106, 392, 341, 349,
	89, 347, 137, 127, 157, 374, 128, 136, 110, 149,
	132, 156, 188, 164, 147, 163, 78, 146, 155, 87,
	139, 80, 153, 144, 116, 102, 103, 79, 0, 135,
	92, 96, 91, 124, 150, 151, 90, 171, 83, 162,
	82, 84, 161, 123, 148, 154, 117, 114, 81, 152,
	115, 113, 105, 94, 99, 129, 112, 130, 100, 120,
	119, 121, 0, 322, 0, 143, 159, 172, 337, 395,
	165, 166, 167, 168, 0, 0, 0, 122, 85, 101,
	140, 104, 111, 134, 170, 126, 138, 88, 158, 141,
	333, 336, 331, 332, 370, 371, 404, 405, 406, 386,
	328, 0, 334, 335, 0, 390, 0, 0, 373, 77,
	0, 108, 169, 133, 95, 160, 399, 389, 0, 361,
	401, 339, 353, 409, 354, 355, 382, 325, 369, 125,
	351, 0, 342, 320, 348, 321, 340, 363, 93, 366,
	338, 391, 372, 107, 407, 109, 377, 0, 142, 118,
	0, 0, 365, 393, 367, 387, 360, 383, 330, 376,
	402, 352, 380, 403, 50, 0, 0, 75, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 379, 398,
	350, 381, 319, 378, 0, 323, 326, 408, 396, 345,
	346, 0, 0, 0, 0, 0, 0, 0, 364, 368,
	384, 358, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 343, 0, 375, 0, 0, 0, 327, 324, 0,
	362, 0, 0, 0, 329, 0, 344, 385, 0, 318,
	388, 394, 359, 187, 397, 357, 356, 400, 131, 0,
	0, 145, 98, 97, 106, 392, 341, 349, 89, 347,
	137, 127, 157, 374, 128, 136, 110, 149, 132, 156,
	188, 164, 147, 163, 78, 146, 155, 87, 139, 80,
	153, 144, 116, 102, 103, 79, 0, 135, 92, 96,
	91, 124, 150, 151, 90, 171, 83, 162, 82, 84,
	161, 123, 148, 154, 117, 114, 81, 152, 115, 113,
	105, 94, 99, 129, 112, 130, 100, 120, 119, 121,
	0, 322, 0, 143, 159, 172, 337, 395, 165, 166,
	167, 168, 0, 0, 0, 122, 85, 101, 140, 104,
	111, 134, 170, 126, 138, 88, 158, 141, 333, 336,
	331, 332, 370, 371, 404, 405, 406, 386, 328, 0,
	334, 335, 0, 390, 0, 0, 373, 77, 0, 108,
	169, 133, 95, 160, 399, 389, 0, 361, 401, 339,
	353, 409, 354, 355, 382, 325, 369, 125, 351, 0,
	342, 320, 348, 321, 340, 363, 93, 366, 338, 391,
	372, 107, 407, 109, 377, 0, 142, 118, 0, 0,
	365, 393, 367, 387, 360, 383, 330, 376, 402, 352,
	380, 403, 0, 0, 0, 75, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 379, 398, 350, 381,
	319, 378, 0, 323, 326, 408, 396, 345, 346, 0,
	0, 0, 0, 0, 0, 0, 364, 368, 384, 358,
	0, 0, 0, 0, 0, 0, 0, 1039, 0, 343,
	0, 375, 0, 0, 0, 327, 324, 0, 362, 0,
	0, 0, 329, 0, 344, 385, 0, 318, 388, 394,
	359, 187, 397, 357, 356, 400, 131, 0, 0, 145,
	98, 97, 106, 392, 341, 349, 89, 347, 137, 127,
	157, 374, 128, 136, 110, 149, 132, 156, 188, 164,
	147, 163, 78, 146, 155, 87, 139, 80, 153, 144,
	116, 102, 103, 79, 0, 135, 92, 96, 91, 124,
	150, 151, 90, 171, 83, 162, 82, 84, 161, 123,
	148, 154, 117, 114, 81, 152, 115, 113, 105, 94,
	99, 129, 112, 130, 100, 120, 119, 121, 0, 322,
	0, 143, 159, 172, 337, 395, 165, 166, 167, 168,
	0, 0, 0, 122, 85, 101, 140, 104, 111, 134,
	170, 126, 138, 88, 158, 141, 333, 336, 331, 332,
	370, 371, 404, 405, 406, 386, 328, 0, 334, 335,
	0, 390, 0, 0, 373, 77, 0, 108, 169, 133,
	95, 160, 399, 389, 0, 361, 401, 339, 353, 409,
	354, 355, 382, 325, 369, 125, 351, 0, 342, 320,
	348, 321, 340, 363, 93, 366, 338, 391, 372, 107,
	407, 109, 377, 0, 142, 118, 0, 0, 365, 393,
	367, 387, 360, 383, 330, 376, 402, 352, 380, 403,
	0, 0, 0, 238, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 379, 398, 350, 381, 319, 378,
	0, 323, 326, 408, 396, 345, 346, 0, 0, 0,
	0, 0, 0, 0, 364, 368, 384, 358, 0, 0,
	0, 0, 0, 0, 0, 708, 0, 343, 0, 375,
	0, 0, 0, 327, 324, 0, 362, 0, 0, 0,
	329, 0, 344, 385, 0, 318, 388, 394, 359, 187,
	397, 357, 356, 400, 131, 0, 0, 145, 98, 97,
	106, 392, 341, 349, 89, 347, 137, 127, 157, 374,
	128, 136, 110, 149, 132, 156, 188, 164, 147, 163,
	78, 146, 155, 87, 139, 80, 153, 144, 116, 102,
	103, 79, 0, 135, 92, 96, 91, 124, 150, 151,
	90, 171, 83, 162, 82, 84, 161, 123, 148, 154,
	117, 114, 81, 152, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 322, 0, 143,
	159, 172, 337, 395, 165, 166, 167, 168, 0, 0,
	0, 122, 85, 101, 140, 104, 111, 134, 170, 126,
	138, 88, 158, 141, 333, 336, 331, 332, 370, 371,
	404, 405, 406, 386, 328, 0, 334, 335, 0, 390,
	0, 0, 373, 77, 0, 108, 169, 133, 95, 160,
	399, 389, 0, 361, 401, 339, 353, 409, 354, 355,
	382, 325, 369, 125, 351, 0, 342, 320, 348, 321,
	340, 363, 93, 366, 338, 391, 372, 107, 407, 109,
	377, 0, 142, 118, 0, 0, 365, 393, 367, 387,
	360, 383, 330, 376, 402, 352, 380, 403, 0, 0,
	0, 75, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 379, 398, 350, 381, 319, 378, 0, 323,
	326, 408, 396, 345, 346, 0, 0, 0, 0, 0,
	0, 0, 364, 368, 384, 358, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 343, 0, 375, 0, 0,
	0, 327, 324, 0, 362, 0, 0, 0, 329, 0,
	344, 385, 0, 318, 388, 394, 359, 187, 397, 357,
	356, 400, 131, 0, 0, 145, 98, 97, 106, 392,
	341, 349, 89, 347, 137, 127, 157, 374, 128, 136,
	110, 149, 132, 156, 188, 164, 147, 163, 78, 146,
	155, 87, 139, 80, 153, 144, 116, 102, 103, 79,
	0, 135, 92, 96, 91, 124, 150, 151, 90, 171,
	83, 162, 82, 84, 161, 123, 148, 154, 117, 114,
	81, 152, 115, 113, 105, 94, 99, 129, 112, 130,
	100, 120, 119, 121, 0, 322, 0, 143, 159, 172,
	337, 395, 165, 166, 167, 168, 0, 0, 0, 122,
	85, 101, 140, 104, 111, 134, 170, 126, 138, 88,
	158, 141, 333, 336, 331, 332, 370, 371, 404, 405,
	406, 386, 328, 0, 334, 335, 0, 390, 0, 0,
	373, 77, 0, 108, 169, 133, 95, 160, 399, 389,
	0, 361, 401, 339, 353, 409, 354, 355, 382, 325,
	369, 125, 351, 0, 342, 320, 348, 321, 340, 363,
	93, 366, 338, 391, 372, 107, 407, 109, 377, 0,
	142, 118, 0, 0, 365, 393, 367, 387, 360, 383,
	330, 376, 402, 352, 380, 403, 0, 0, 0, 238,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	379, 398, 350, 381, 319, 378, 0, 323, 326, 408,
	396, 345, 346, 0, 0, 0, 0, 0, 0, 0,
	364, 368, 384, 358, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 343, 0, 375, 0, 0, 0, 327,
	324, 0, 362, 0, 0, 0, 329, 0, 344, 385,
	0, 318, 388, 394, 359, 187, 397, 357, 356, 400,
	131, 0, 0, 145, 98, 97, 106, 392, 341, 349,
	89, 347, 137, 127, 157, 374, 128, 136, 110, 149,
	132, 156, 188, 164, 147, 163, 78, 146, 155, 87,
	139, 80, 153, 144, 116, 102, 103, 79, 0, 135,
	92, 96, 91, 124, 150, 151, 90, 171, 83, 162,
	82, 84, 161, 123, 148, 154, 117, 114, 81, 152,
	115, 113, 105, 94, 99, 129, 112, 130, 100, 120,
	119, 121, 0, 322, 0, 143, 159, 172, 337, 395,
	165, 166, 167, 168, 0, 0, 0, 122, 85, 101,
	140, 104, 111, 134, 170, 126, 138, 88, 158, 141,
	333, 336, 331, 332, 370, 371, 404, 405, 406, 386,
	328, 0, 334, 335, 0, 390, 0, 0, 373, 77,
	0, 108, 169, 133, 95, 160, 399, 389, 0, 361,
	401, 339, 353, 409, 354, 355, 382, 325, 369, 125,
	351, 0, 342, 320, 348, 321, 340, 363, 93, 366,
	338, 391, 372, 107, 407, 109, 377, 0, 142, 118,
	0, 0, 365, 393, 367, 387, 360, 383, 330, 376,
	402, 352, 380, 403, 0, 0, 0, 75, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 379, 398,
	350, 381, 319, 378, 0, 323, 326, 408, 396, 345,
	346, 0, 0, 0, 0, 0, 0, 0, 364, 368,
	384, 358, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 343, 0, 375, 0, 0, 0, 327, 324, 0,
	362, 0, 0, 0, 329, 0, 344, 385, 0, 318,
	388, 394, 359, 187, 397, 357, 356, 400, 131, 0,
	0, 145, 98, 97, 106, 392, 341, 349, 89, 347,
	137, 127, 157, 374, 128, 136, 110, 149, 132, 156,
	188, 164, 147, 163, 78, 146, 155, 87, 139, 80,
	153, 144, 116, 102, 103, 79, 0, 135, 92, 96,
	91, 124, 150, 151, 90, 171, 83, 162, 82, 316,
	161, 123, 148, 154, 117, 114, 81, 152, 115, 113,
	105, 94, 99, 129, 112, 130, 100, 120, 119, 121,
	0, 322, 0, 143, 159, 172, 337, 395, 165, 166,
	167, 168, 0, 0, 0, 317, 315, 101, 140, 104,
	111, 134, 170, 126, 138, 88, 158, 141, 333, 336,
	331, 332, 370, 371, 404, 405, 406, 386, 328, 0,
	334, 335, 0, 390, 0, 0, 373, 77, 0, 108,
	169, 133, 95, 160, 399, 389, 0, 361, 401, 339,
	353, 409, 354, 355, 382, 325, 369, 125, 351, 0,
	342, 320, 348, 321, 340, 363, 93, 366, 338, 391,
	372, 107, 407, 109, 377, 0, 142, 118, 0, 0,
	365, 393, 367, 387, 360, 383, 330, 376, 402, 352,
	380, 403, 0, 0, 0, 185, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 379, 398, 350, 381,
	319, 378, 0, 323, 326, 408, 396, 345, 346, 0,
	0, 0, 0, 0, 0, 0, 364, 368, 384, 358,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 343,
	0, 375, 0, 0, 0, 327, 324, 0, 362, 0,
	0, 0, 329, 0, 344, 385, 0, 318, 388, 394,
	359, 187, 397, 357, 356, 400, 131, 0, 0, 145,
	98, 97, 106, 392, 341, 349, 89, 347, 137, 127,
	157, 374, 128, 136, 110, 149, 132, 156, 188, 164,
	147, 163, 78, 146, 155, 87, 139, 80, 153, 144,
	116, 102, 103, 79, 0, 135, 92, 96, 91, 124,
	150, 151, 90, 171, 83, 162, 82, 84, 161, 123,
	148, 154, 117, 114, 81, 152, 115, 113, 105, 94,
	99, 129, 112, 130, 100, 120, 119, 121, 0, 322,
	0, 143, 159, 172, 337, 395, 165, 166, 167, 168,
	0, 0, 0, 122, 85, 101, 140, 104, 111, 134,
	170, 126, 138, 88, 158, 141, 333, 336, 331, 332,
	370, 371, 404, 405, 406, 386, 328, 0, 334, 335,
	0, 390, 0, 0, 373, 77, 0, 108, 169, 133,
	95, 160, 399, 389, 0, 361, 401, 339, 353, 409,
	354, 355, 382, 325, 369, 125, 351, 0, 342, 320,
	348, 321, 340, 363, 93, 366, 338, 391, 372, 107,
	407, 109, 377, 0, 142, 118, 0, 0, 365, 393,
	367, 387, 360, 383, 330, 376, 402, 352, 380, 403,
	0, 0, 0, 75, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 379, 398, 350, 381, 319, 378,
	0, 323, 326, 408, 396, 345, 346, 0, 0, 0,
	0, 0, 0, 0, 364, 368, 384, 358, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 343, 0, 375,
	0, 0, 0, 327, 324, 0, 362, 0, 0, 0,
	329, 0, 344, 385, 0, 318, 388, 394, 359, 187,
	397, 357, 356, 400, 131, 0, 0, 145, 98, 97,
	106, 392, 341, 349, 89, 347, 137, 127, 157, 374,
	128, 136, 110, 149, 132, 156, 188, 164, 147, 163,
	78, 146, 586, 87, 139, 80, 153, 144, 116, 102,
	103, 79, 0, 135, 92, 96, 91, 124, 150, 151,
	90, 171, 83, 162, 82, 316, 161, 123, 148, 154,
	117, 114, 81, 152, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 322, 0, 143,
	159, 172, 337, 395, 165, 166, 167, 168, 0, 0,
	0, 317, 315, 101, 140, 104, 111, 134, 170, 126,
	138, 88, 158, 141, 333, 336, 331, 332, 370, 371,
	404, 405, 406, 386, 328, 0, 334, 335, 0, 390,
	0, 0, 373, 77, 0, 108, 169, 133, 95, 160,
	399, 389, 0, 361, 401, 339, 353, 409, 354, 355,
	382, 325, 369, 125, 351, 0, 342, 320, 348, 321,
	340, 363, 93, 366, 338, 391, 372, 107, 407, 109,
	377, 0, 142, 118, 0, 0, 365, 393, 367, 387,
	360, 383, 330, 376, 402, 352, 380, 403, 0, 0,
	0, 75, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 379, 398, 350, 381, 319, 378, 0, 323,
	326, 408, 396, 345, 346, 0, 0, 0, 0, 0,
	0, 0, 364, 368, 384, 358, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 343, 0, 375, 0, 0,
	0, 327, 324, 0, 362, 0, 0, 0, 329, 0,
	344, 385, 0, 318, 388, 394, 359, 187, 397, 357,
	356, 400, 131, 0, 0, 145, 98, 97, 106, 392,
	341, 349, 89, 347, 137, 127, 157, 374, 128, 136,
	110, 149, 132, 156, 188, 164, 147, 163, 78, 146,
	307, 87, 139, 80, 153, 144, 116, 102, 103, 79,
	0, 135, 92, 96, 91, 124, 150, 151, 90, 171,
	83, 162, 82, 316, 161, 123, 148, 154, 117, 114,
	81, 152, 115, 113, 105, 94, 99, 129, 112, 130,
	100, 120, 119, 121, 0, 322, 0, 143, 159, 172,
	337, 395, 165, 166, 167, 168, 0, 0, 0, 317,
	315, 310, 309, 104, 111, 134, 170, 126, 138, 88,
	158, 141, 333, 336, 331, 332, 370, 371, 404, 405,
	406, 386, 328, 0, 334, 335, 0, 390, 0, 0,
	373, 77, 0, 108, 169, 133, 95, 160, 125, 0,
	0, 744, 0, 240, 0, 0, 0, 93, 0, 237,
	0, 0, 107, 279, 109, 0, 0, 142, 118, 0,
	0, 0, 0, 270, 271, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 238, 258, 257, 260,
	261, 262, 263, 0, 0, 86, 259, 264, 265, 266,
	0, 0, 235, 251, 0, 278, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 231, 0,
	0, 0, 291, 0, 250, 0, 0, 246, 247, 252,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 0, 0, 289, 0, 131, 0, 0,
	145, 98, 97, 106, 0, 0, 0, 89, 0, 137,
	127, 157, 0, 128, 136, 110, 149, 132, 156, 188,
	164, 147, 163, 78, 146, 155, 87, 139, 80, 153,
	144, 116, 102, 103, 79, 0, 135, 92, 96, 91,
	124, 150, 151, 90, 171, 83, 162, 82, 84, 161,
	123, 148, 154, 117, 114, 81, 152, 115, 113, 105,
	94, 99, 129, 112, 130, 100, 120, 119, 121, 0,
	0, 0, 143, 159, 172, 0, 0, 165, 166, 167,
	168, 0, 0, 0, 122, 85, 101, 140, 104, 111,
	134, 170, 126, 138, 88, 158, 141, 281, 290, 287,
	288, 285, 286, 284, 283, 282, 292, 272, 273, 274,
	275, 277, 0, 280, 0, 276, 77, 0, 108, 169,
	133, 95, 160, 125, 0, 0, 0, 0, 240, 0,
	0, 0, 93, 0, 237, 0, 0, 107, 279, 109,
	0, 0, 142, 118, 0, 0, 0, 0, 270, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	455, 238, 258, 257, 260, 261, 262, 263, 0, 0,
	86, 259, 264, 265, 266, 0, 0, 235, 251, 0,
	278, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 248, 249, 0, 0, 0, 0, 291, 0, 250,
	0, 0, 246, 247, 252, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 187, 0, 0,
	289, 0, 131, 0, 0, 145, 98, 97, 106, 0,
	0, 0, 89, 0, 137, 127, 157, 0, 128, 136,
	110, 149, 132, 156, 188, 164, 147, 163, 78, 146,
	155, 87, 139, 80, 153, 144, 116, 102, 103, 79,
	0, 135, 92, 96, 91, 124, 150, 151, 90, 171,
	83, 162, 82, 84, 161, 123, 148, 154, 117, 114,
	81, 152, 115, 113, 105, 94, 99, 129, 112, 130,
	100, 120, 119, 121, 0, 0, 0, 143, 159, 172,
	0, 0, 165, 166, 167, 168, 0, 0, 0, 122,
	85, 101, 140, 104, 111, 134, 170, 126, 138, 88,
	158, 141, 281, 290, 287, 288, 285, 286, 284, 283,
	282, 292, 272, 273, 274, 275, 277, 0, 280, 0,
	276, 77, 0, 108, 169, 133, 95, 160, 125, 0,
	0, 0, 0, 240, 0, 0, 0, 93, 0, 237,
	0, 0, 107, 279, 109, 0, 0, 142, 118, 0,
	0, 0, 0, 270, 271, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 238, 258, 257, 260,
	261, 262, 263, 0, 0, 86, 259, 264, 265, 266,
	0, 0, 235, 251, 0, 278, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 231, 0,
	0, 0, 291, 0, 250, 0, 0, 246, 247, 252,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 0, 0, 289, 0, 131, 0, 0,
	145, 98, 97, 106, 0, 0, 0, 89, 0, 137,
	127, 157, 0, 128, 136, 110, 149, 132, 156, 188,
	164, 147, 163, 78, 146, 155, 87, 139, 80, 153,
	144, 116, 102, 103, 79, 0, 135, 92, 96, 91,
	124, 150, 151, 90, 171, 83, 162, 82, 84, 161,
	123, 148, 154, 117, 114, 81, 152, 115, 113, 105,
	94, 99, 129, 112, 130, 100, 120, 119, 121, 0,
	0, 0, 143, 159, 172, 0, 0, 165, 166, 167,
	168, 0, 0, 0, 122, 85, 101, 140, 104, 111,
	134, 170, 126, 138, 88, 158, 141, 281, 290, 287,
	288, 285, 286, 284, 283, 282, 292, 272, 273, 274,
	275, 277, 0, 280, 0, 276, 77, 0, 108, 169,
	133, 95, 160, 125, 0, 0, 0, 0, 240, 0,
	0, 0, 93, 0, 237, 0, 0, 107, 279, 109,
	0, 0, 142, 118, 0, 0, 0, 0, 270, 271,
	0, 0, 0, 0, 0, 0, 808, 0, 50, 0,
	0, 238, 258, 257, 260, 261, 262, 263, 0, 0,
	86, 259, 264, 265, 266, 0, 0, 235, 251, 0,
	278, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 248, 249, 0, 0, 0, 0, 291, 0, 250,
	0, 0, 246, 247, 252, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 187, 0, 0,
	289, 0, 131, 0, 0, 145, 98, 97, 106, 0,
	0, 0, 89, 0, 137, 127, 157, 0, 128, 136,
	110, 149, 132, 156, 188, 164, 147, 163, 78, 146,
	155, 87, 139, 80, 153, 144, 116, 102, 103, 79,
	0, 135, 92, 96, 91, 124, 150, 151, 90, 171,
	83, 162, 82, 84, 161, 123, 148, 154, 117, 114,
	81, 152, 115, 113, 105, 94, 99, 129, 112, 130,
	100, 120, 119, 121, 0, 0, 0, 143, 159, 172,
	0, 0, 165, 166, 167, 168, 0, 0, 0, 122,
	85, 101, 140, 104, 111, 134, 170, 126, 138, 88,
	158, 141, 281, 290, 287, 288, 285, 286, 284, 283,
	282, 292, 272, 273, 274, 275, 277, 23, 280, 0,
	276, 77, 0, 108, 169, 133, 95, 160, 0, 125,
	0, 0, 0, 0, 240, 0, 0, 0, 93, 0,
	237, 0, 0, 107, 279, 109, 0, 0, 142, 118,
	0, 0, 0, 0, 270, 271, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 238, 258, 257,
	260, 261, 262, 263, 0, 0, 86, 259, 264, 265,
	266, 0, 0, 235, 251, 0, 278, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 248, 249, 0,
	0, 0, 0, 291, 0, 250, 0, 0, 246, 247,
	252, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 187, 0, 0, 289, 0, 131, 0,
	0, 145, 98, 97, 106, 0, 0, 0, 89, 0,
	137, 127, 157, 0, 128, 136, 110, 149, 132, 156,
	188, 164, 147, 163, 78, 146, 155, 87, 139, 80,
	153, 144, 116, 102, 103, 79, 0, 135, 92, 96,
	91, 124, 150, 151, 90, 171, 83, 162, 82, 84,
	161, 123, 148, 154, 117, 114, 81, 152, 115, 113,
	105, 94, 99, 129, 112, 130, 100, 120, 119, 121,
	0, 0, 0, 143, 159, 172, 0, 0, 165, 166,
	167, 168, 0, 0, 0, 122, 85, 101, 140, 104,
	111, 134, 170, 126, 138, 88, 158, 141, 281, 290,
	287, 288, 285, 286, 284, 283, 282, 292, 272, 273,
	274, 275, 277, 0, 280, 0, 276, 77, 0, 108,
	169, 133, 95, 160, 125, 0, 0, 0, 0, 240,
	0, 0, 0, 93, 0, 237, 0, 0, 107, 279,
	109, 0, 0, 142, 118, 0, 0, 0, 0, 270,
	271, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 238, 258, 257, 260, 261, 262, 263, 0,
	0, 86, 259, 264, 265, 266, 0, 0, 235, 251,
	0, 278, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 0, 0, 0, 0, 291, 0,
	250, 0, 0, 246, 247, 252, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 187, 0,
	0, 289, 0, 131, 0, 0, 145, 98, 97, 106,
	0, 0, 0, 89, 0, 137, 127, 157, 0, 128,
	136, 110, 149, 132, 156, 188, 164, 147, 163, 78,
	146, 155, 87, 139, 80, 153, 144, 116, 102, 103,
	79, 0, 135, 92, 96, 91, 124, 150, 151, 90,
	171, 83, 162, 82, 84, 161, 123, 148, 154, 117,
	114, 81, 152, 115, 113, 105, 94, 99, 129, 112,
	130, 100, 120, 119, 121, 0, 0, 0, 143, 159,
	172, 0, 0, 165, 166, 167, 168, 0, 0, 0,
	122, 85, 101, 140, 104, 111, 134, 170, 126, 138,
	88, 158, 141, 281, 290, 287, 288, 285, 286, 284,
	283, 282, 292, 272, 273, 274, 275, 277, 0, 280,
	125, 276, 77, 0, 108, 169, 133, 95, 160, 93,
	0, 0, 0, 0, 107, 279, 109, 0, 0, 142,
	118, 0, 0, 0, 0, 270, 271, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 238, 258,
	257, 260, 261, 262, 263, 0, 0, 86, 259, 264,
	265, 266, 0, 0, 0, 251, 0, 278, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	0, 0, 0, 0, 291, 0, 250, 0, 0, 246,
	247, 252, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 187, 0, 0, 289, 0, 131,
	0, 0, 145, 98, 97, 106, 0, 0, 0, 89,
	0, 137, 127, 157, 1307, 128, 136, 110, 149, 132,
	156, 188, 164, 147, 163, 78, 146, 155, 87, 139,
	80, 153, 144, 116, 102, 103, 79, 0, 135, 92,
	96, 91, 124, 150, 151, 90, 171, 83, 162, 82,
	84, 161, 123, 148, 154, 117, 114, 81, 152, 115,
	113, 105, 94, 99, 129, 112, 130, 100, 120, 119,
	121, 0, 0, 0, 143, 159, 172, 0, 0, 165,
	166, 167, 168, 0, 0, 0, 122, 85, 101, 140,
	104, 111, 134, 170, 126, 138, 88, 158, 141, 281,
	290, 287, 288, 285, 286, 284, 283, 282, 292, 272,
	273, 274, 275, 277, 0, 280, 125, 276, 77, 0,
	108, 169, 133, 95, 160, 93, 0, 0, 0, 0,
	107, 279, 109, 0, 0, 142, 118, 0, 0, 0,
	0, 270, 271, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 238, 258, 257, 260, 261, 262,
	263, 0, 0, 86, 259, 264, 265, 266, 0, 0,
	0, 251, 0, 278, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 0, 0, 0, 0,
	291, 0, 250, 0, 0, 246, 247, 252, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 0, 0, 289, 0, 131, 0, 0, 145, 98,
	97, 106, 0, 0, 0, 89, 0, 137, 127, 157,
	0, 128, 136, 110, 149, 132, 156, 188, 164, 147,
	163, 78, 146, 155, 87, 139, 80, 153, 144, 116,
	102, 103, 79, 0, 135, 92, 96, 91, 124, 150,
	151, 90, 171, 83, 162, 82, 84, 161, 123, 148,
	154, 117, 114, 81, 152, 115, 113, 105, 94, 99,
	129, 112, 130, 100, 120, 119, 121, 0, 0, 0,
	143, 159, 172, 0, 0, 165, 166, 167, 168, 0,
	0, 0, 122, 85, 101, 140, 104, 111, 134, 170,
	126, 138, 88, 158, 141, 281, 290, 287, 288, 285,
	286, 284, 283, 282, 292, 272, 273, 274, 275, 277,
	0, 280, 125, 276, 77, 0, 108, 169, 133, 95,
	160, 93, 0, 0, 0, 0, 107, 0, 109, 0,
	0, 142, 118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 489, 488, 498, 499,
	491, 492, 493, 494, 495, 496, 497, 490, 0, 0,
	500, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 131, 0, 0, 145, 98, 97, 106, 0, 0,
	0, 89, 0, 137, 127, 157, 0, 128, 136, 110,
	149, 132, 156, 188, 164, 147, 163, 78, 146, 155,
	87, 139, 80, 153, 144, 116, 102, 103, 79, 0,
	135, 92, 96, 91, 124, 150, 151, 90, 171, 83,
	162, 82, 84, 161, 123, 148, 154, 117, 114, 81,
	152, 115, 113, 105, 94, 99, 129, 112, 130, 100,
	120, 119, 121, 0, 0, 0, 143, 159, 172, 0,
	0, 165, 166, 167, 168, 0, 0, 0, 122, 85,
	101, 140, 104, 111, 134, 170, 126, 138, 88, 158,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	77, 0, 108, 169, 133, 95, 160, 125, 0, 0,
	0, 477, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 107, 0, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 479, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 474,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 187, 0, 0, 0, 0, 131, 0, 0, 145,
	98, 97, 106, 0, 0, 0, 89, 0, 137, 127,
	157, 0, 128, 136, 110, 149, 132, 156, 188, 164,
	147, 163, 78, 146, 155, 87, 139, 80, 153, 144,
	116, 102, 103, 79, 0, 135, 92, 96, 91, 124,
	150, 151, 90, 171, 83, 162, 82, 84, 161, 123,
	148, 154, 117, 114, 81, 152, 115, 113, 105, 94,
	99, 129, 112, 130, 100, 120, 119, 121, 0, 0,
	0, 143, 159, 172, 0, 0, 165, 166, 167, 168,
	0, 0, 0, 122, 85, 101, 140, 104, 111, 134,
	170, 126, 138, 88, 158, 141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 77, 0, 108, 169, 133,
	95, 160, 93, 0, 0, 0, 0, 107, 0, 109,
	0, 0, 142, 118, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 68, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 71, 72, 0, 67, 0, 0,
	0, 73, 131, 0, 0, 145, 98, 97, 106, 0,
	0, 0, 89, 0, 137, 127, 157, 0, 128, 136,
	110, 149, 132, 156, 69, 164, 147, 163, 78, 146,
	155, 87, 139, 80, 153, 144, 116, 102, 103, 79,
	0, 135, 92, 96, 91, 124, 150, 151, 90, 171,
	83, 162, 82, 84, 161, 123, 148, 154, 117, 114,
	81, 152, 115, 113, 105, 94, 99, 129, 112, 130,
	100, 120, 119, 121, 0, 0, 0, 143, 159, 172,
	0, 0, 165, 166, 167, 168, 0, 0, 0, 122,
	85, 101, 140, 104, 111, 134, 170, 126, 138, 88,
	158, 141, 0, 70, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 77, 0, 108, 169, 133, 95, 160, 125, 0,
	0, 0, 575, 0, 0, 0, 0, 93, 0, 0,
	0, 0, 107, 0, 109, 0, 0, 142, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 0, 577, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 0, 0, 0, 0, 131, 0, 0,
	145, 98, 97, 106, 0, 0, 0, 89, 0, 137,
	127, 157, 0, 128, 136, 110, 149, 132, 156, 188,
	164, 147, 163, 78, 146, 155, 87, 139, 80, 153,
	144, 116, 102, 103, 79, 0, 135, 92, 96, 91,
	124, 150, 151, 90, 171, 83, 162, 82, 84, 161,
	123, 148, 154, 117, 114, 81, 152, 115, 113, 105,
	94, 99, 129, 112, 130, 100, 120, 119, 121, 0,
	0, 0, 143, 159, 172, 0, 0, 165, 166, 167,
	168, 0, 0, 0, 122, 85, 101, 140, 104, 111,
	134, 170, 126, 138, 88, 158, 141, 0, 0, 0,
	0, 0, 23, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 77, 0, 108, 169,
	133, 95, 160, 93, 0, 0, 0, 0, 107, 0,
	109, 0, 0, 142, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 75, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 187, 0,
	0, 0, 0, 131, 0, 0, 145, 98, 97, 106,
	0, 0, 0, 89, 0, 137, 127, 157, 0, 128,
	136, 110, 149, 132, 156, 188, 164, 147, 163, 78,
	146, 155, 87, 139, 80, 153, 144, 116, 102, 103,
	79, 0, 135, 92, 96, 91, 124, 150, 151, 90,
	171, 83, 162, 82, 84, 161, 123, 148, 154, 117,
	114, 81, 152, 115, 113, 105, 94, 99, 129, 112,
	130, 100, 120, 119, 121, 0, 0, 0, 143, 159,
	172, 0, 0, 165, 166, 167, 168, 0, 0, 0,
	122, 85, 101, 140, 104, 111, 134, 170, 126, 138,
	88, 158, 141, 0, 0, 0, 0, 0, 23, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 77, 0, 108, 169, 133, 95, 160, 93,
	0, 0, 0, 0, 107, 0, 109, 0, 0, 142,
	118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 185, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 187, 0, 0, 0, 0, 131,
	0, 0, 145, 98, 97, 106, 0, 0, 0, 89,
	0, 137, 127, 157, 0, 128, 136, 110, 149, 132,
	156, 188, 164, 147, 163, 78, 146, 155, 87, 139,
	80, 153, 144, 116, 102, 103, 79, 0, 135, 92,
	96, 91, 124, 150, 151, 90, 171, 83, 162, 82,
	84, 161, 123, 148, 154, 117, 114, 81, 152, 115,
	113, 105, 94, 99, 129, 112, 130, 100, 120, 119,
	121, 0, 0, 0, 143, 159, 172, 0, 0, 165,
	166, 167, 168, 0, 0, 0, 122, 85, 101, 140,
	104, 111, 134, 170, 126, 138, 88, 158, 141, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 77, 0,
	108, 169, 133, 95, 160, 93, 0, 0, 0, 0,
	107, 0, 109, 0, 0, 142, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 0, 695, 0, 0,
	696, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 0, 0, 0, 0, 131, 0, 0, 145, 98,
	97, 106, 0, 0, 0, 89, 0, 137, 127, 157,
	0, 128, 136, 110, 149, 132, 156, 188, 164, 147,
	163, 78, 146, 155, 87, 139, 80, 153, 144, 116,
	102, 103, 79, 0, 135, 92, 96, 91, 124, 150,
	151, 90, 171, 83, 162, 82, 84, 161, 123, 148,
	154, 117, 114, 81, 152, 115, 113, 105, 94, 99,
	129, 112, 130, 100, 120, 119, 121, 0, 0, 0,
	143, 159, 172, 0, 0, 165, 166, 167, 168, 0,
	0, 0, 122, 85, 101, 140, 104, 111, 134, 170,
	126, 138, 88, 158, 141, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 77, 0, 108, 169, 133, 95,
	160, 93, 0, 595, 0, 0, 107, 0, 109, 0,
	0, 142, 118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 0, 594, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 131, 0, 0, 145, 98, 97, 106, 0, 0,
	0, 89, 0, 137, 127, 157, 0, 128, 136, 110,
	149, 132, 156, 188, 164, 147, 163, 78, 146, 155,
	87, 139, 80, 153, 144, 116, 102, 103, 79, 0,
	135, 92, 96, 91, 124, 150, 151, 90, 171, 83,
	162, 82, 84, 161, 123, 148, 154, 117, 114, 81,
	152, 115, 113, 105, 94, 99, 129, 112, 130, 100,
	120, 119, 121, 0, 0, 0, 143, 159, 172, 0,
	0, 165, 166, 167, 168, 0, 0, 0, 122, 85,
	101, 140, 104, 111, 134, 170, 126, 138, 88, 158,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	77, 0, 108, 169, 133, 95, 160, 125, 0, 0,
	0, 575, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 107, 0, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 0, 577, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 187, 0, 0, 0, 0, 131, 0, 0, 145,
	98, 97, 106, 0, 0, 0, 89, 0, 137, 127,
	157, 0, 573, 136, 110, 149, 132, 156, 188, 164,
	147, 163, 78, 146, 155, 87, 139, 80, 153, 144,
	116, 102, 103, 79, 0, 135, 92, 96, 91, 124,
	150, 151, 90, 171, 83, 162, 82, 84, 161, 123,
	148, 154, 117, 114, 81, 152, 115, 113, 105, 94,
	99, 129, 112, 130, 100, 120, 119, 121, 0, 0,
	0, 143, 159, 172, 0, 0, 165, 166, 167, 168,
	0, 0, 0, 122, 85, 101, 140, 104, 111, 134,
	170, 126, 138, 88, 158, 141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 77, 0, 108, 169, 133,
	95, 160, 93, 0, 0, 0, 0, 107, 0, 109,
	0, 0, 142, 118, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 185, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 187, 0, 0,
	0, 0, 131, 0, 0, 145, 98, 97, 106, 0,
	0, 0, 89, 0, 137, 127, 157, 0, 128, 136,
	110, 149, 132, 156, 188, 164, 147, 163, 78, 146,
	155, 87, 139, 80, 153, 144, 116, 102, 103, 79,
	0, 135, 92, 96, 91, 124, 150, 151, 90, 171,
	83, 162, 82, 84, 161, 123, 148, 154, 117, 114,
	81, 152, 115, 113, 105, 94, 99, 129, 112, 130,
	100, 120, 119, 121, 0, 0, 0, 143, 159, 172,
	0, 0, 165, 166, 167, 168, 0, 0, 0, 122,
	85, 101, 140, 104, 111, 134, 170, 126, 138, 88,
	158, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 77, 0, 108, 169, 133, 95, 160, 93, 0,
	0, 0, 0, 107, 0, 109, 0, 0, 142, 118,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 0, 577,
	0, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 187, 0, 0, 0, 0, 131, 0,
	0, 145, 98, 97, 106, 0, 0, 0, 89, 0,
	137, 127, 157, 0, 128, 136, 110, 149, 132, 156,
	188, 164, 147, 163, 78, 146, 155, 87, 139, 80,
	153, 144, 116, 102, 103, 79, 0, 135, 92, 96,
	91, 124, 150, 151, 90, 171, 83, 162, 82, 84,
	161, 123, 148, 154, 117, 114, 81, 152, 115, 113,
	105, 94, 99, 129, 112, 130, 100, 120, 119, 121,
	0, 0, 0, 143, 159, 172, 0, 0, 165, 166,
	167, 168, 0, 0, 0, 122, 85, 101, 140, 104,
	111, 134, 170, 126, 138, 88, 158, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 77, 0, 108,
	169, 133, 95, 160, 93, 0, 0, 0, 0, 107,
	0, 109, 0, 0, 142, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 479, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	0, 0, 0, 0, 131, 0, 0, 145, 98, 97,
	106, 0, 0, 0, 89, 0, 137, 127, 157, 0,
	128, 136, 110, 149, 132, 156, 188, 164, 147, 163,
	78, 146, 155, 87, 139, 80, 153, 144, 116, 102,
	103, 79, 0, 135, 92, 96, 91, 124, 150, 151,
	90, 171, 83, 162, 82, 84, 161, 123, 148, 154,
	117, 114, 81, 152, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 0, 0, 143,
	159, 172, 0, 0, 165, 166, 167, 168, 0, 0,
	0, 122, 85, 101, 140, 104, 111, 134, 170, 126,
	138, 88, 158, 141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 77, 0, 108, 169, 133, 95, 160,
	553, 93, 0, 0, 0, 0, 107, 0, 109, 0,
	0, 142, 118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 131, 0, 0, 145, 98, 97, 106, 0, 0,
	0, 89, 0, 137, 127, 157, 0, 128, 136, 110,
	149, 132, 156, 188, 164, 147, 163, 78, 146, 155,
	87, 139, 80, 153, 144, 116, 102, 103, 79, 0,
	135, 92, 96, 91, 124, 150, 151, 90, 171, 83,
	162, 82, 84, 161, 123, 148, 154, 117, 114, 81,
	152, 115, 113, 105, 94, 99, 129, 112, 130, 100,
	120, 119, 121, 0, 0, 0, 143, 159, 172, 0,
	0, 165, 166, 167, 168, 0, 0, 0, 122, 85,
	101, 140, 104, 111, 134, 170, 126, 138, 88, 158,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 125, 0,
	77, 0, 108, 169, 133, 95, 160, 93, 0, 0,
	0, 0, 107, 0, 109, 0, 0, 142, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 0, 0, 0, 0, 131, 0, 0,
	145, 98, 97, 106, 0, 0, 0, 89, 0, 137,
	127, 157, 0, 128, 136, 110, 149, 132, 156, 188,
	164, 147, 163, 78, 146, 155, 87, 139, 80, 153,
	144, 116, 102, 103, 79, 0, 135, 92, 96, 91,
	124, 150, 151, 90, 171, 83, 162, 82, 84, 161,
	123, 148, 154, 117, 114, 81, 152, 115, 113, 105,
	94, 99, 129, 112, 130, 100, 120, 119, 121, 0,
	0, 0, 143, 159, 172, 0, 0, 165, 166, 167,
	168, 0, 0, 0, 122, 85, 101, 140, 104, 111,
	134, 170, 126, 138, 88, 158, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 77, 0, 108, 169,
	133, 95, 160, 93, 0, 0, 0, 0, 107, 0,
	109, 0, 0, 142, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 182, 0, 187, 0,
	0, 0, 0, 131, 0, 0, 145, 98, 97, 106,
	0, 0, 0, 89, 0, 137, 127, 157, 0, 128,
	136, 110, 149, 132, 156, 188, 164, 147, 163, 78,
	146, 155, 87, 139, 80, 153, 144, 116, 102, 103,
	79, 0, 135, 92, 96, 91, 124, 150, 151, 90,
	171, 83, 162, 82, 84, 161, 123, 148, 154, 117,
	114, 81, 152, 115, 113, 105, 94, 99, 129, 112,
	130, 100, 120, 119, 121, 0, 0, 0, 143, 159,
	172, 0, 0, 165, 166, 167, 168, 0, 0, 0,
	122, 85, 101, 140, 104, 111, 134, 170, 126, 138,
	88, 158, 141, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 77, 0, 108, 169, 133, 95, 160, 93,
	0, 0, 0, 0, 107, 0, 109, 0, 0, 142,
	118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 75, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 187, 0, 0, 0, 0, 131,
	0, 0, 145, 98, 97, 106, 0, 0, 0, 89,
	0, 137, 127, 157, 0, 128, 136, 110, 149, 132,
	156, 188, 164, 147, 163, 78, 146, 155, 87, 139,
	80, 153, 144, 116, 102, 103, 79, 0, 135, 92,
	96, 91, 124, 150, 151, 90, 171, 83, 162, 82,
	84, 161, 123, 148, 154, 117, 114, 81, 152, 115,
	113, 105, 94, 99, 129, 112, 130, 100, 120, 119,
	121, 0, 0, 0, 143, 159, 172, 0, 0, 165,
	166, 167, 168, 0, 0, 0, 122, 85, 101, 140,
	104, 111, 134, 170, 126, 138, 88, 158, 141, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 77, 0,
	108, 169, 133, 95, 160, 93, 0, 0, 0, 0,
	107, 0, 109, 0, 0, 142, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 238, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 0, 0, 0, 0, 131, 0, 0, 145, 98,
	97, 106, 0, 0, 0, 89, 0, 137, 127, 157,
	0, 128, 136, 110, 149, 132, 156, 188, 164, 147,
	163, 78, 146, 155, 87, 139, 80, 153, 144, 116,
	102, 103, 79, 0, 135, 92, 96, 91, 124, 150,
	151, 90, 171, 83, 162, 82, 84, 161, 123, 148,
	154, 117, 114, 81, 152, 115, 113, 105, 94, 99,
	129, 112, 130, 100, 120, 119, 121, 0, 0, 0,
	143, 159, 172, 0, 0, 165, 166, 167, 168, 0,
	0, 0, 122, 85, 101, 140, 104, 111, 134, 170,
	126, 138, 88, 158, 141, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 77, 0, 108, 169, 133, 95,
	160, 93, 0, 0, 0, 0, 107, 0, 109, 0,
	0, 142, 118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 131, 0, 0, 145, 98, 97, 106, 0, 0,
	0, 89, 0, 137, 127, 157, 0, 128, 136, 110,
	149, 132, 156, 188, 164, 147, 163, 78, 146, 155,
	87, 139, 80, 153, 144, 116, 102, 103, 79, 0,
	135, 92, 96, 91, 124, 150, 151, 90, 171, 83,
	162, 82, 84, 161, 123, 148, 154, 117, 114, 81,
	152, 115, 113, 105, 94, 99, 129, 112, 130, 100,
	120, 119, 121, 0, 0, 0, 143, 159, 172, 0,
	0, 165, 166, 167, 168, 0, 0, 0, 122, 85,
	101, 140, 104, 111, 134, 170, 126, 138, 88, 158,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	77, 0, 108, 169, 133, 95, 160,
}
var yyPact = [...]int{

	1490, -1000, -185, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 860, 877, -1000, -1000, -1000, -1000, -1000, -1000, 654,
	7505, 40, 65, -3, 10236, 64, 196, 10914, -1000, -10,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 594, -1000, -1000,
	-1000, -1000, -1000, 839, 857, 647, 831, 737, -1000, 5660,
	44, 9105, 10010, 4955, -1000, 496, 60, 10914, -151, 10462,
	36, 36, 36, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 62, 10914, -1000, 10914, 35, 491, 35,
	35, 35, 10914, -1000, 93, -1000, -1000, -1000, -1000, 10914,
	489, 809, 31, 2971, 2971, 2971, 2971, -2, 2971, -87,
	691, -1000, -1000, -1000, -1000, 2971, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 399, 804, 6366, 6366,
	860, -1000, 594, -1000, -1000, -1000, 782, -1000, -1000, 246,
	867, -1000, 7279, 91, -1000, 6366, 1579, 602, -1000, -1000,
	602, -1000, -1000, 75, -1000, -1000, 6818, 6818, 6818, 6818,
	6818, 6818, 6818, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 602, -1000, 6131,
	602, 602, 602, 602, 602, 602, 602, 602, 6366, 602,
	602, 602, 602, 602, 602, 602, 602, 602, 602, 602,
	602, 602, 602, 9784, 603, 754, -1000, -1000, -1000, 828,
	8192, 8879, 10914, 544, -1000, 590, 4707, -106, -1000, -1000,
	-1000, 169, 8644, -1000, -1000, -1000, 808, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	495, -1000, 1967, 487, 2971, 53, 604, 483, 197, 479,
	10914, 10914, 2971, 46, 10914, 826, 687, 10914, 478, 475,
	-1000, 4459, -1000, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
	2971, -1000, -1000, -1000, -1000, -1000, -1000, 2971, 2971, -1000,
	-79, -1000, 10914, -1000, -1000, -1000, -1000, 872, 132, 401,
	83, 595, -1000, 327, 839, 399, 737, 8418, 702, -1000,
	-1000, 10914, -1000, 6366, 6366, 315, -1000, 9557, -1000, -1000,
	3467, 155, 6818, 278, 224, 6818, 6818, 6818, 6818, 6818,
	6818, 6818, 6818, 6818, 6818, 6818, 6818, 6818, 6818, 6818,
	309, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	465, -1000, 594, 656, 656, 114, 114, 114, 114, 114,
	114, 7044, 5190, 399, 463, 180, 6131, 5660, 5660, 6366,
	6366, 10688, 10688, 5660, 833, 184, 180, 10688, 399, -1000,
	399, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 5660, 5660,
	5660, 5660, 13, 10914, -1000, 10688, 9105, 9105, 9105, 9105,
	9105, -1000, 728, 727, -1000, 705, 704, 723, 10914, -1000,
	461, 8192, 116, 602, -1000, 9331, -1000, -1000, 13, 511,
	9105, 10914, -1000, -1000, 4211, 590, -106, 530, -1000, -108,
	-128, 5895, 113, -1000, -1000, -1000, -1000, 2723, 330, 267,
	-72, -1000, -1000, -1000, 608, -1000, 608, 608, 608, 608,
	-36, -36, -36, -36, -1000, -1000, -1000, -1000, -1000, 652,
	650, -1000, 608, 608, 608, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 648, 648, 648, 631, 631, 658, -1000, 10914, -173,
	425, 2971, 825, 2971, -1000, 118, -1000, 10914, -1000, -1000,
	10914, 2971, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 235, -1000, -1000,
	-1000, -1000, 757, 6366, 6366, 3963, 6366, -1000, -1000, -1000,
	804, -1000, 833, 851, -1000, 789, 787, 5660, -1000, -1000,
	155, 228, -1000, -1000, 280, -1000, -1000, -1000, -1000, 82,
	602, -1000, 1611, -1000, -1000, -1000, -1000, 278, 6818, 6818,
	6818, 115, 1611, 1887, 712, 1652, 114, 344, 344, 121,
	121, 121, 121, 121, 657, 657, -1000, -1000, -1000, 399,
	-1000, -1000, -1000, 399, 5660, 584, -1000, -1000, 6366, -1000,
	399, 457, 457, 253, 396, 640, -1000, 81, 574, 457,
	5660, 230, -1000, 6366, 399, -161, -1000, 457, 399, 457,
	457, 538, 602, -1000, 636, -1000, 167, 754, 679, 684,
	481, -1000, -1000, -1000, -1000, 720, -1000, 706, -1000, -1000,
	-1000, -1000, -1000, 59, 55, 49, 10462, -1000, 865, 9105,
	568, -1000, -1000, 530, -106, -88, -1000, -1000, -1000, 180,
	-1000, 417, 524, 2475, -1000, -1000, -1000, -1000, -1000, -1000,
	646, 816, 145, 144, 376, -1000, -1000, 805, -1000, 212,
	-78, -1000, -1000, 301, -36, -36, -1000, -1000, 113, 807,
	113, 113, 113, 351, 351, -1000, -1000, -1000, -1000, 294,
	-1000, -1000, -1000, 274, -1000, 682, 10462, 2971, -1000, 3715,
	-1000, -1000, -1000, -1000, -1000, -1000, 1186, 1034, 310, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	12, -1000, 2971, -1000, 214, 10914, 10914, 753, 180, 180,
	80, -1000, -1000, 10914, -1000, -1000, -1000, -1000, 572, -1000,
	-1000, -1000, 3219, 5660, -1000, 115, 1611, 1853, -1000, 6818,
	6818, -1000, -1000, 457, 5660, 180, -1000, -1000, -1000, 219,
	309, 219, 6818, 6818, 3963, 6818, 6818, -168, 582, 175,
	-1000, 6366, 258, -1000, 602, -1000, -1000, -1000, -1000, 669,
	10688, 602, -1000, 7966, 10462, 860, 10688, 6366, 6366, -1000,
	-1000, 6366, 642, -1000, 6366, -1000, -1000, -1000, 602, 602,
	602, 430, -1000, 860, 568, -1000, -1000, -1000, -130, -136,
	-1000, -1000, 2723, -1000, 2723, 10462, -1000, 346, 329, -1000,
	-1000, 661, 70, -1000, -1000, -1000, 439, 113, 113, -1000,
	148, -1000, -1000, -1000, 454, -1000, 438, 523, 436, 10914,
	-1000, -1000, 519, -1000, 165, -1000, -1000, 10462, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	10462, 10914, -1000, -1000, -1000, -1000, -1000, 10462, -1000, -1000,
	338, 6366, -1000, -1000, -1000, 3715, -1000, 865, 9105, -1000,
	-1000, 399, -1000, 6818, 1611, 1611, -1000, -1000, 399, 608,
	608, -1000, 608, 631, -1000, 608, -19, 608, -20, -1000,
	399, 399, 686, 1737, -1000, 404, 1356, 602, -158, -1000,
	180, 6366, 11, -1000, 819, 500, 512, -1000, -1000, 5425,
	399, 432, 79, 430, 839, -1000, 180, 180, 180, 10462,
	180, 10462, 10462, 10462, 7740, 10462, 839, -1000, -1000, -1000,
	-1000, 2475, -1000, 423, -1000, 608, -1000, -1000, -61, 871,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -36, 337, -36, 271, -1000, 268, 2971, 3715, 2723,
	-1000, 605, -1000, -1000, -1000, -1000, 821, -1000, 180, 854,
	515, -1000, 1611, -1000, -1000, 85, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 6818, 6818, -1000, 6818, 6818,
	6818, 399, 335, 180, 859, 855, 815, -1000, 602, -1000,
	-1000, 626, 10462, 10462, -1000, -1000, 421, -1000, 408, 408,
	408, 116, -1000, -1000, 106, 10462, -1000, 131, -1000, -141,
	113, -1000, 113, 424, 409, -1000, -1000, -1000, 10462, 602,
	862, 853, -1000, -1000, 917, 917, 917, 917, 7, -1000,
	-1000, 852, 6366, 870, -1000, 602, -1000, 594, 78, -1000,
	10462, -1000, -1000, -1000, -1000, -1000, 106, -1000, 312, 163,
	331, -1000, 239, 814, -1000, 812, -1000, -1000, -1000, -1000,
	-1000, 398, 9, -1000, 6366, 6366, -1000, -1000, -1000, -1000,
	399, 48, -176, 6366, 513, 180, 10688, 512, 399, 10462,
	-1000, -1000, -1000, 252, -1000, -1000, -1000, 313, -1000, -1000,
	604, 362, -1000, 10462, 180, 508, -1000, 752, -171, -180,
	356, 6366, 502, -1000, -1000, -1000, -1000, -173, -1000, 9,
	771, -1000, 732, -1000, -1000, 180, -1000, -1000, 3, -174,
	0, -178, 602, -181, 6592, -1000, 917, 399, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1089, 21, 553, 1085, 1084, 1083, 1082, 1081, 1080,
	1079, 1078, 1076, 1073, 1072, 1071, 1069, 1066, 1065, 1060,
	1059, 1057, 1056, 1052, 95, 1051, 1048, 1046, 59, 1045,
	63, 1044, 1043, 34, 157, 37, 31, 300, 1041, 36,
	67, 60, 1034, 51, 1033, 1032, 66, 1031, 55, 1030,
	1029, 1438, 1028, 1026, 15, 25, 1022, 1021, 1008, 1005,
	61, 177, 1004, 1003, 1002, 1001, 1000, 999, 44, 5,
	7, 11, 13, 998, 53, 8, 996, 43, 995, 993,
	992, 989, 27, 4, 45, 988, 986, 983, 17, 46,
	982, 14, 52, 26, 23, 9, 65, 50, 980, 29,
	58, 40, 979, 978, 359, 977, 975, 974, 970, 969,
	968, 140, 264, 966, 963, 957, 954, 33, 167, 841,
	586, 64, 951, 948, 947, 1347, 57, 54, 20, 945,
	35, 1153, 41, 943, 939, 30, 938, 937, 936, 930,
	929, 927, 926, 73, 925, 924, 922, 28, 18, 921,
	920, 49, 32, 919, 917, 913, 39, 47, 912, 42,
	910, 909, 908, 904, 24, 19, 900, 10, 899, 6,
	895, 894, 2, 891, 16, 890, 3, 889, 12, 38,
	888, 887, 0, 163, 886, 885, 92,
}
var yyR1 = [...]int{

	0, 180, 181, 181, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 184,
	184, 46, 46, 92, 92, 10, 10, 10, 10, 97,
	97, 101, 101, 101, 102, 102, 102, 102, 133, 133,
	11, 11, 11, 11, 11, 11, 11, 178, 178, 177,
	176, 176, 175, 175, 174, 16, 161, 162, 162, 162,
	157, 136, 136, 136, 136, 139, 139, 137, 137, 137,
	137, 137, 137, 137, 138, 138, 138, 138, 138, 140,
	140, 140, 140, 140, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 142,
	142, 142, 142, 142, 142, 142, 142, 156, 156, 143,
	143, 151, 151, 152, 152, 152, 149, 149, 150, 150,
	153, 153, 153, 144, 144, 144, 144, 144, 144, 144,
	146, 146, 154, 154, 147, 147, 147, 148, 148, 155,
	155, 155, 155, 155, 145, 145, 158, 158, 170, 170,
	169, 169, 169, 160, 160, 166, 166, 166, 166, 166,
	159, 159, 168, 168, 167, 163, 163, 163, 164, 164,
	164, 165, 165, 165, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 173, 171, 171, 172, 172, 13,
	14, 14, 14, 14, 14, 15, 15, 17, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 109, 109, 106, 106, 107, 107, 108, 108, 108,
	110, 110, 110, 134, 134, 134, 19, 19, 21, 21,
	22, 23, 20, 20, 20, 20, 20, 185, 24, 25,
	25, 26, 26, 26, 30, 30, 30, 28, 28, 29,
	29, 35, 35, 34, 34, 36, 36, 36, 36, 122,
	122, 122, 121, 121, 38, 38, 39, 39, 40, 40,
	41, 41, 41, 41, 53, 53, 91, 91, 93, 93,
	42, 42, 42, 42, 43, 43, 44, 44, 45, 45,
	129, 129, 128, 128, 128, 127, 127, 47, 47, 47,
	49, 48, 48, 48, 48, 50, 50, 52, 52, 51,
	51, 54, 54, 54, 54, 55, 55, 37, 37, 37,
	37, 37, 37, 37, 105, 105, 57, 57, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 67, 67,
	67, 67, 67, 67, 58, 58, 58, 58, 58, 58,
	58, 58, 33, 33, 68, 68, 68, 74, 69, 69,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 65, 65, 65, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	86, 86, 87, 87, 64, 64, 64, 64, 64, 64,
	64, 64, 186, 186, 66, 66, 66, 66, 31, 31,
	31, 31, 31, 132, 132, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 78,
	78, 32, 32, 76, 76, 77, 79, 79, 75, 75,
	75, 60, 60, 60, 60, 60, 60, 60, 60, 62,
	62, 62, 80, 80, 81, 81, 82, 82, 83, 83,
	84, 85, 85, 85, 88, 88, 88, 88, 89, 89,
	89, 59, 59, 59, 59, 59, 59, 90, 90, 90,
	90, 94, 94, 70, 70, 72, 72, 71, 73, 95,
	95, 99, 96, 96, 100, 100, 100, 98, 98, 98,
	124, 124, 124, 103, 103, 111, 111, 112, 112, 104,
	104, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 114, 114, 114, 115, 115, 116, 116, 116, 123,
	123, 119, 119, 120, 120, 125, 125, 126, 126, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 182,
	183, 130, 131, 131, 131,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 8, 4, 6, 5, 5, 5, 0, 2, 1,
	0, 2, 1, 3, 3, 4, 4, 1, 3, 3,
	8, 3, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 1, 4, 4, 2, 2, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 6, 6, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	0, 1, 2, 0, 2, 2, 2, 2, 2, 2,
	0, 3, 0, 1, 0, 3, 3, 0, 2, 0,
	2, 1, 2, 1, 0, 2, 5, 4, 1, 2,
	2, 3, 2, 0, 1, 2, 3, 3, 2, 2,
	1, 1, 1, 3, 2, 0, 1, 3, 1, 2,
	3, 1, 1, 1, 6, 7, 7, 12, 7, 7,
	7, 4, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 3, 8, 8, 5,
	4, 6, 5, 4, 4, 3, 2, 3, 4, 4,
	4, 4, 4, 4, 4, 4, 3, 3, 3, 3,
	4, 3, 6, 4, 2, 4, 2, 2, 2, 2,
	3, 1, 1, 0, 1, 0, 1, 0, 2, 2,
	0, 2, 2, 0, 1, 1, 2, 1, 1, 2,
	1, 1, 2, 2, 2, 2, 2, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 0,
	1, 0, 1, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 1, 0, 2, 1, 3, 1, 1,
	1, 1, 3, 3, 3, 7, 1, 3, 1, 3,
	4, 4, 4, 3, 2, 4, 0, 1, 0, 2,
	0, 1, 0, 1, 2, 1, 1, 1, 2, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 1, 1,
	3, 0, 5, 5, 5, 0, 2, 1, 3, 3,
	2, 3, 1, 2, 0, 3, 1, 1, 3, 3,
	4, 4, 5, 3, 4, 5, 6, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 1, 1, 3, 1, 3,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 2, 2, 3, 1, 1, 1,
	1, 4, 5, 6, 4, 4, 6, 6, 6, 6,
	8, 8, 6, 8, 8, 9, 7, 5, 4, 10,
	0, 3, 1, 3, 2, 2, 2, 2, 2, 2,
	2, 2, 0, 2, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 1, 2, 3, 3, 1, 2,
	2, 1, 2, 1, 2, 2, 1, 2, 1, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 0, 3, 0, 2, 0, 3, 1, 3,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 2, 1, 3, 5, 4, 6, 1, 3, 3,
	5, 0, 5, 1, 3, 1, 2, 3, 1, 1,
	3, 3, 1, 3, 3, 3, 3, 1, 2, 1,
	1, 1, 1, 1, 1, 0, 2, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 0, 1, 1, 0,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -180, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 30, -16,
	113, 114, 116, 115, 141, 117, 134, 49, 153, 154,
	156, 157, 25, 135, 136, 139, 140, -182, 8, 236,
	53, -181, 253, -82, 15, -26, 5, -24, -185, -24,
	-24, -24, -24, -24, -161, 53, -116, 122, 70, 149,
	228, 119, 120, 126, -119, 56, -118, 246, 153, 164,
	158, 185, 177, 175, 178, 215, 65, 156, 224, 137,
	173, 169, 167, 27, 190, 251, 168, 132, 131, 191,
	195, 216, 162, 163, 218, 189, 133, 32, 248, 34,
	145, 219, 193, 188, 184, 187, 161, 183, 38, 197,
	196, 198, 214, 180, 170, 18, 222, 140, 143, 192,
	194, 127, 147, 250, 220, 166, 144, 139, 223, 157,
	217, 226, 37, 202, 160, 130, 154, 151, 181, 146,
	171, 172, 186, 159, 182, 155, 148, 141, 225, 203,
	252, 179, 176, 152, 150, 207, 208, 209, 210, 249,
	221, 174, 204, -104, 122, 124, 120, 120, 121, 122,
	228, 119, 120, -51, -125, 56, -118, 122, 149, 120,
	107, 178, 113, 205, 121, 32, 147, -134, 120, -106,
	150, 207, 208, 209, 210, 56, 217, 216, 211, -125,
	155, -130, -130, -130, -130, -130, -2, -88, 17, 16,
	-5, -3, -182, 6, 20, 21, -30, 39, 40, -25,
	-36, 98, -37, -125, -56, 72, -61, 29, 56, -118,
	23, -60, -57, -75, -73, -74, 107, 108, 96, 97,
	104, 73, 109, -65, -63, -64, -66, 58, 57, 66,
	59, 60, 61, 62, 67, 68, 69, -119, -71, -182,
	43, 44, 237, 238, 239, 240, 245, 241, 75, 33,
	243, 227, 235, 234, 233, 231, 232, 229, 230, 125,
	228, 102, 236, -104, -39, -40, -41, -42, -53, -74,
	-182, -51, 11, -46, -51, -96, -133, 155, -100, 217,
	216, -120, -98, -119, -117, 215, 178, 214, 118, 71,
	22, 24, 200, 74, 107, 16, 75, 106, 237, 113,
	47, 229, 230, 227, 239, 240, 228, 205, 29, 10,
	25, 135, 21, 100, 115, 78, 79, 138, 23, 136,
	69, 19, 50, 11, 13, 14, 125, 124, 90, 121,
	45, 8, 109, 26, 87, 41, 28, 43, 88, 17,
	231, 232, 31, 245, 142, 102, 48, 35, 72, 67,
	51, 70, 15, 46, 89, 116, 236, 44, 119, 6,
	242, 30, 134, 42, 120, 206, 77, 123, 68, 5,
	126, 9, 49, 52, 233, 234, 235, 33, 76, 12,
	-162, -157, 56, 121, -51, 236, -119, -112, 125, -112,
	-112, 120, -51, -51, -111, 125, 56, -111, -111, -111,
	-51, 110, -51, 56, 30, 228, 56, 147, 120, 148,
	122, -131, -182, -120, -131, -131, -131, 151, 152, -131,
	-107, 212, 51, -131, -183, 55, -89, 19, 31, -37,
	-125, -83, -84, -37, -82, -2, -24, 35, -28, 21,
	64, 11, -122, 71, 70, 87, -121, 22, -119, 58,
	110, -37, -58, 90, 72, 88, 89, 74, 93, 92,
	103, 96, 97, 98, 99, 100, 101, 102, 94, 95,
	106, 80, 81, 82, 83, 84, 85, 86, 91, -105,
	-182, -74, -182, 111, 112, -61, -61, -61, -61, -61,
	-61, -61, -182, -2, -69, -37, -182, -182, -182, -182,
	-182, -182, -182, -182, -182, -78, -37, -182, -182, -186,
	-182, -186, -186, -186, -186, -186, -186, -186, -182, -182,
	-182, -182, -52, 26, -51, 30, 54, -47, -49, -48,
	-50, 41, 45, 47, 42, 43, 44, 48, -129, 22,
	-39, -182, -128, 143, -127, 22, -125, 58, -51, -46,
	-184, 54, 11, 52, 54, -96, 155, -97, -101, 218,
	220, 80, -124, -119, 58, 29, 30, 55, 54, -136,
	-139, -141, -140, -142, -137, -138, 175, 176, 107, 179,
	181, 182, 183, 184, 185, 186, 187, 188, 189, 190,
	30, 137, 171, 172, 173, 174, 191, 192, 193, 194,
	195, 196, 197, 198, 158, 159, 160, 161, 162, 163,
	164, 166, 167, 168, 169, 170, 56, -131, 122, -178,
	52, 56, 72, 56, -51, -51, -131, 123, -51, 23,
	51, -51, 56, 56, -126, -125, -117, -131, -131, -131,
	-131, -131, -131, -131, -131, -131, -131, -109, 206, 213,
	-51, 9, 90, 54, 18, 110, 54, -85, 24, 25,
	-88, -183, -30, -62, -119, 59, 62, -29, 42, -51,
	-37, -37, -67, 67, 72, 68, 69, -121, 98, -126,
	-120, -117, -61, -68, -71, -74, 63, 90, 88, 89,
	74, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -132, 56, 58, 56,
	-60, -60, -119, -35, 21, -34, -36, -183, 54, -183,
	-2, -34, -34, -37, -37, -75, -119, -125, -75, -34,
	-28, -76, -77, 76, -75, -183, -183, -34, -35, -34,
	-34, -92, 143, -51, -95, -99, -75, -40, -41, -41,
	-40, -41, 41, 41, 41, 46, 41, 46, 41, -48,
	-125, -183, -54, 49, 124, 50, -182, -127, -92, 52,
	-39, -51, -100, -97, 54, 219, 221, 222, 51, -37,
	-148, 106, -163, -164, -165, -120, 58, 59, -157, -158,
	-166, 127, 130, 126, -159, 121, 28, -153, 67, 72,
	-149, 203, -143, 53, -143, -143, -143, -143, -147, 178,
	-147, -147, -147, 53, 53, -143, -143, -143, -151, 53,
	-151, -151, -152, 53, -152, -123, 52, -51, -176, 249,
	-177, 56, -131, 23, -131, -113, 118, 115, 116, -173,
	114, 200, 178, 65, 29, 15, 237, 143, 252, 56,
	144, -51, -51, -131, -108, 11, 90, 37, -37, -37,
	-126, -84, -89, -103, 19, 11, 33, 33, -34, 67,
	68, 69, 110, -182, -68, -61, -61, -61, -33, 138,
	71, -183, -183, -34, 54, -37, -183, -183, -183, 54,
	52, 22, 54, 11, 110, 54, 11, -183, -34, -79,
	-77, 78, -37, -183, 244, -183, -183, -183, -183, -59,
	30, 33, -2, -182, -182, -55, 54, 12, 80, -44,
	-43, 51, 52, -45, 51, -43, 41, 41, 121, 121,
	121, -93, -119, -55, -39, -55, -101, -102, 223, 220,
	226, 56, 54, -165, 80, 53, 28, -159, -159, 56,
	56, -144, 29, 67, -150, 204, 59, -147, -147, -148,
	30, -148, -148, -148, -156, 58, -156, 59, 59, 51,
	-119, -131, -175, -174, -120, -130, -179, 149, 128, 129,
	132, 131, 56, 121, 28, 127, 130, 143, 126, -179,
	149, -114, -115, 123, 22, 121, 28, 143, -131, -110,
	88, 12, -125, -125, 38, 110, -51, -38, 11, 98,
	-120, -35, -33, 71, -61, -61, -183, -36, -135, 107,
	175, 137, 173, 169, 189, 180, 202, 171, 203, 172,
	-132, -135, -61, -61, -120, -61, -61, 246, -82, 79,
	-37, 77, -182, -94, 51, -95, -70, -72, -71, -182,
	-2, -90, -119, -93, -82, -99, -37, -37, -37, 53,
	-37, -182, -182, -182, -183, 54, -82, -55, 220, 224,
	225, -164, -165, -168, -167, -119, 56, 56, -146, 51,
	58, 59, 60, 67, 227, 66, 55, -148, -148, 56,
	107, 55, 54, 55, 54, 55, 54, -51, 54, 80,
	-130, -119, -130, -119, -51, -130, -119, 58, -37, -55,
	-39, -183, -61, -183, -143, -143, -143, -152, -143, 163,
	-143, 163, -183, -183, -183, 54, 19, -183, 54, 19,
	-182, -32, 242, -37, -86, 143, 27, -94, 54, -183,
	-183, -183, 54, 110, -183, -88, -91, -119, -91, -91,
	-91, -128, -119, -88, 55, 54, -143, -154, 200, 9,
	-147, 58, -147, 59, 59, -131, -174, -165, 53, 26,
	-80, 13, -147, 56, -61, -61, -61, -61, -61, -183,
	58, 15, 16, 28, -72, 33, -2, -182, -119, -119,
	54, 55, -183, -183, -183, -54, -170, -169, 52, 133,
	65, -167, -155, 127, 28, 126, 227, -148, -148, 55,
	55, -91, -182, -81, 14, 16, -183, -183, -183, -183,
	-31, 90, 249, 16, -87, -37, 9, -70, -2, 110,
	-119, -169, 56, -160, 80, 58, -145, 65, 28, 28,
	55, -171, -172, 143, -37, -69, -183, 247, 48, 250,
	-83, 54, -95, -183, -119, 59, 58, -178, -183, 54,
	-119, 38, 248, 251, -183, -37, -176, -172, 33, 38,
	145, 249, 146, 250, -182, 251, -61, 142, -183, -183,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 516, 0, 277, 277, 277, 277, 277, 277, 0,
	586, 569, 0, 0, 0, 0, -2, 267, 268, 0,
	270, 271, 791, 791, 791, 791, 791, 0, 33, 34,
	789, 1, 3, 524, 0, 0, 281, 284, 279, 0,
	569, 0, 0, 0, 60, 0, 0, 778, 0, 779,
	567, 567, 567, 587, 588, 591, 592, 691, 692, 693,
	694, 695, 696, 697, 698, 699, 700, 701, 702, 703,
	704, 705, 706, 707, 708, 709, 710, 711, 712, 713,
	714, 715, 716, 717, 718, 719, 720, 721, 722, 723,
	724, 725, 726, 727, 728, 729, 730, 731, 732, 733,
	734, 735, 736, 737, 738, 739, 740, 741, 742, 743,
	744, 745, 746, 747, 748, 749, 750, 751, 752, 753,
	754, 755, 756, 757, 758, 759, 760, 761, 762, 763,
	764, 765, 766, 767, 768, 769, 770, 771, 772, 773,
	774, 775, 776, 777, 780, 781, 782, 783, 784, 785,
	786, 787, 788, 0, 0, 570, 0, 565, 0, 565,
	565, 565, 0, 226, 349, 595, 596, 778, 779, 0,
	0, 0, 0, 792, 792, 792, 792, 0, 792, 255,
	244, 246, 247, 248, 249, 792, 264, 265, 254, 266,
	269, 272, 273, 274, 275, 276, 27, 528, 0, 0,
	516, 29, 0, 277, 282, 283, 287, 285, 286, 278,
	0, 295, 299, 0, 357, 0, 362, 364, -2, -2,
	0, 400, 401, 402, 403, 404, 0, 0, 0, 0,
	0, 0, 0, 427, 428, 429, 430, 501, 502, 503,
	504, 505, 506, 507, 508, 366, 367, 498, 548, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 489, 0,
	0, 462, 462, 462, 462, 462, 462, 462, 462, 0,
	0, 0, 0, 0, 0, 306, 308, 309, 310, -2,
	0, 332, 0, 0, 41, 45, 0, 769, 552, -2,
	-2, 0, 0, 593, 594, -2, 698, -2, 599, 600,
	601, 602, 603, 604, 605, 606, 607, 608, 609, 610,
	611, 612, 613, 614, 615, 616, 617, 618, 619, 620,
	621, 622, 623, 624, 625, 626, 627, 628, 629, 630,
	631, 632, 633, 634, 635, 636, 637, 638, 639, 640,
	641, 642, 643, 644, 645, 646, 647, 648, 649, 650,
	651, 652, 653, 654, 655, 656, 657, 658, 659, 660,
	661, 662, 663, 664, 665, 666, 667, 668, 669, 670,
	671, 672, 673, 674, 675, 676, 677, 678, 679, 680,
	681, 682, 683, 684, 685, 686, 687, 688, 689, 690,
	0, 77, 0, 0, 792, 0, 67, 0, 0, 0,
	0, 0, 792, 0, 0, 0, 0, 0, 0, 0,
	225, 0, 227, 792, 792, 792, 792, 792, 792, 792,
	792, 236, 793, 794, 237, 238, 239, 792, 792, 241,
	0, 256, 0, 250, 28, 790, 22, 0, 0, 525,
	0, 517, 518, 521, 524, 27, 284, 0, 289, 288,
	280, 0, 296, 0, 0, 0, 300, 0, 302, 303,
	0, 360, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 384, 385, 386, 387, 388, 389, 390, 391, 363,
	0, 377, 0, 0, 0, 420, 421, 422, 423, 424,
	425, 0, 291, 27, 0, 398, 0, 0, 0, 0,
	0, 0, 0, 0, 287, 0, 490, 0, 0, 454,
	0, 455, 456, 457, 458, 459, 460, 461, 0, 291,
	0, 0, 43, 0, 348, 0, 0, 0, 0, 0,
	0, 337, 0, 0, 340, 0, 0, 0, 0, 331,
	0, 0, 351, 742, 333, 0, 335, 336, -2, 0,
	0, 0, 39, 40, 0, 46, 769, 48, 49, 0,
	0, 0, 157, 560, 561, 562, 558, 185, 0, 140,
	136, 82, 83, 84, 129, 86, 129, 129, 129, 129,
	154, 154, 154, 154, 112, 113, 114, 115, 116, 0,
	0, 99, 129, 129, 129, 103, 119, 120, 121, 122,
	123, 124, 125, 126, 87, 88, 89, 90, 91, 92,
	93, 131, 131, 131, 133, 133, 589, 62, 0, 70,
	0, 792, 0, 792, 75, 0, 201, 0, 220, 566,
	0, 792, 223, 224, 350, 597, 598, 228, 229, 230,
	231, 232, 233, 234, 235, 240, 243, 257, 251, 252,
	245, 529, 0, 0, 0, 0, 0, 520, 522, 523,
	528, 30, 287, 0, 509, 0, 0, 0, 290, 25,
	358, 359, 361, 378, 0, 380, 382, 301, 297, 0,
	499, -2, 368, 369, 394, 395, 396, 0, 0, 0,
	0, 392, 373, 0, 405, 406, 407, 408, 409, 410,
	411, 412, 413, 414, 415, 416, 419, 473, 474, 0,
	417, 418, 426, 0, 0, 292, 293, 397, 0, 547,
	27, 0, 0, 0, 0, 0, 498, 0, 0, 0,
	0, 496, 493, 0, 0, 0, 463, 0, 0, 0,
	0, 0, 0, 347, 355, 549, 0, 307, 326, 328,
	0, 323, 338, 339, 341, 0, 343, 0, 345, 346,
	312, 313, 314, 0, 0, 0, 0, 334, 355, 0,
	355, 42, 553, 47, 0, 0, 52, 53, 554, 555,
	556, 0, 76, 186, 188, 191, 192, 193, 78, 79,
	0, 0, 0, 0, 0, 180, 181, 143, 141, 0,
	138, 137, 85, 0, 154, 154, 106, 107, 157, 0,
	157, 157, 157, 0, 0, 100, 101, 102, 94, 0,
	95, 96, 97, 0, 98, 0, 0, 792, 64, 0,
	68, 69, 65, 568, 66, 791, 0, 0, 581, 202,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	0, 219, 792, 222, 260, 0, 0, 0, 526, 527,
	0, 519, 23, 0, 563, 564, 510, 511, 304, 379,
	381, 383, 0, 291, 370, 392, 374, 0, 371, 0,
	0, 365, 431, 0, 0, 399, -2, 434, 435, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 516, 0,
	494, 0, 0, 448, 0, 464, 465, 466, 467, 541,
	0, 0, -2, 0, 0, 516, 0, 0, 0, 320,
	327, 0, 0, 321, 0, 322, 342, 344, 0, 0,
	0, 0, 318, 516, 355, 38, 50, 51, 0, 0,
	57, 158, 0, 189, 0, 0, 175, 0, 0, 178,
	179, 150, 0, 142, 81, 139, 0, 157, 157, 108,
	0, 109, 110, 111, 0, 127, 0, 0, 0, 0,
	590, 63, 71, 72, 0, 194, 791, 0, 203, 204,
	205, 206, 207, 208, 209, 210, 211, 212, 213, 791,
	0, 0, 791, 582, 583, 584, 585, 0, 221, 242,
	0, 0, 258, 259, 530, 0, 24, 355, 0, 298,
	500, 0, 372, 0, 393, 375, 432, 294, 0, 129,
	129, 478, 129, 133, 481, 129, 483, 129, 486, 488,
	0, 0, 0, 0, 499, 0, 0, 0, 491, 447,
	497, 0, 450, 31, 0, 541, 531, 543, 545, 0,
	27, 0, 537, 0, 524, 550, 356, 551, 324, 0,
	329, 0, 0, 0, 332, 0, 524, 37, 54, 55,
	56, 187, 190, 0, 182, 129, 176, 177, 152, 0,
	144, 145, 146, 147, 148, 149, 130, 104, 105, 155,
	156, 154, 0, 154, 0, 134, 0, 792, 0, 0,
	195, 0, 196, 198, 199, 200, 0, 261, 262, 512,
	305, 433, 376, 436, 475, 154, 479, 480, 482, 484,
	485, 487, 438, 437, 439, 0, 0, 442, 0, 0,
	0, 0, 0, 495, 0, 0, 0, 32, 0, 546,
	-2, 0, 0, 0, 44, 35, 0, 316, 0, 0,
	0, 351, 319, 36, 167, 0, 184, 159, 153, 0,
	157, 128, 157, 0, 0, 61, 73, 74, 0, 0,
	514, 0, 476, 477, 0, 0, 0, 0, 468, 446,
	492, 0, 0, 0, 544, 0, -2, 0, 539, 538,
	0, 325, 352, 353, 354, 315, 166, 168, 0, 173,
	0, 183, 164, 0, 161, 163, 151, 117, 118, 132,
	135, 0, 0, 26, 0, 0, 440, 441, 443, 444,
	0, 0, 0, 0, 451, 452, 0, 534, 27, 0,
	317, 169, 170, 0, 174, 172, 80, 0, 160, 162,
	67, 0, 215, 0, 515, 513, 445, 0, 0, 0,
	0, 0, 542, -2, 540, 171, 165, 70, 214, 0,
	0, 469, 0, 472, 449, 453, 197, 216, 0, 470,
	0, 0, 0, 0, 0, 471, 0, 0, 217, 218,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 73, 3, 3, 3, 101, 93, 3,
	53, 55, 98, 96, 54, 97, 110, 99, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 253,
	81, 80, 82, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 103, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 92, 3, 104,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 74, 75,
	76, 77, 78, 79, 83, 84, 85, 86, 87, 88,
	89, 90, 91, 94, 95, 100, 102, 105, 106, 107,
	108, 109, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:305
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:310
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:311
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:315
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:338
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:346
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:350
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:356
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:363
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:369
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:373
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:379
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:383
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:390
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:402
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:414
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:418
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:424
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:430
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:434
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:438
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:443
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:444
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:448
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:452
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:457
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:461
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:467
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:471
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:475
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:479
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:485
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:489
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:495
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:499
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:503
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:509
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:513
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:517
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:521
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:527
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:531
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:537
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:542
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:547
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 63:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:551
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 64:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:555
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:563
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:567
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:572
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:576
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:582
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:587
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:592
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:598
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:603
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:609
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:615
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:622
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:629
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:634
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:638
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 80:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:644
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:655
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:666
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:671
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:677
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:681
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:685
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:689
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:693
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:697
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:701
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:707
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:713
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:719
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:725
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:731
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:739
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:743
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:747
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:751
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:755
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:761
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 105:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:765
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:769
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:773
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:777
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:781
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:785
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:789
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:793
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:797
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:801
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:805
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:809
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:813
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 118:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:818
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:828
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:832
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:836
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:840
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:852
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:858
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:863
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:868
		{
			yyVAL.optVal = nil
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:872
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:877
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 132:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:881
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:889
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:893
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 135:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:899
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:907
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:911
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:916
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:920
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:926
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:930
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:934
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:939
		{
			yyVAL.optVal = nil
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:943
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:947
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:951
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:955
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:959
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:963
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:968
		{
			yyVAL.optVal = nil
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:972
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:977
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:981
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:986
		{
			yyVAL.str = ""
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:990
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:994
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:999
		{
			yyVAL.str = ""
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1003
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1008
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1012
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1016
		{
			yyVAL.colKeyOpt = colKey
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1020
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1024
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1029
		{
			yyVAL.optVal = nil
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1033
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1039
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1043
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1049
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1053
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1059
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1063
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1068
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1074
		{
			yyVAL.str = ""
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1078
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1084
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1088
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1092
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1096
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1100
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1106
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1110
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1116
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1120
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1126
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1131
		{
			yyVAL.str = ""
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1135
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1139
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1147
		{
			yyVAL.str = yyDollar[1].str
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1151
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1155
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1161
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1165
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1169
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1175
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 195:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1179
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 196:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1183
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 197:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1187
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 198:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1200
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 199:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1210
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 200:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1215
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1220
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 202:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1224
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 214:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1243
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1249
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1253
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 217:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1259
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 218:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1263
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 219:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1269
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 220:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1275
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 221:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1283
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 222:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1288
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1296
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1300
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1306
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1310
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1315
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1321
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1325
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1329
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1334
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1338
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1342
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1346
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1350
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1354
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1358
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1362
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1366
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1370
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1374
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1378
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1388
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1392
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1396
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1400
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1404
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1408
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1412
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1422
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1428
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1432
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 253:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1438
		{
			yyVAL.str = ""
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1442
		{
			yyVAL.str = "extended "
		}
	case 255:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1448
		{
			yyVAL.str = ""
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1452
		{
			yyVAL.str = "full "
		}
	case 257:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1458
		{
			yyVAL.str = ""
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1462
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1466
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1472
		{
			yyVAL.showFilter = nil
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1476
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1480
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1486
		{
			yyVAL.str = ""
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1490
		{
			yyVAL.str = SessionStr
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1494
		{
			yyVAL.str = GlobalStr
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1500
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1504
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1510
		{
			yyVAL.statement = &Begin{}
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1514
		{
			yyVAL.statement = &Begin{}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1520
		{
			yyVAL.statement = &Commit{}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1526
		{
			yyVAL.statement = &Rollback{}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1532
		{
			yyVAL.statement = &OtherRead{}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1536
		{
			yyVAL.statement = &OtherRead{}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1540
		{
			yyVAL.statement = &OtherRead{}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1544
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1548
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 277:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1553
		{
			setAllowComments(yylex, true)
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1557
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 279:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1563
		{
			yyVAL.bytes2 = nil
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1567
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1573
		{
			yyVAL.str = UnionStr
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1577
		{
			yyVAL.str = UnionAllStr
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1581
		{
			yyVAL.str = UnionDistinctStr
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1586
		{
			yyVAL.str = ""
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1590
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1594
		{
			yyVAL.str = SQLCacheStr
		}
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1599
		{
			yyVAL.str = ""
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1603
		{
			yyVAL.str = DistinctStr
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1608
		{
			yyVAL.str = ""
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1612
		{
			yyVAL.str = StraightJoinHint
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1617
		{
			yyVAL.selectExprs = nil
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1621
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1627
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1631
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1637
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1641
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1645
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 298:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1649
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1654
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1658
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1662
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1669
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1674
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1678
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1684
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1688
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1698
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1702
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1706
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1710
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1716
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 315:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1720
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1726
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1730
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1736
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1740
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 320:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1753
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 321:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1757
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1761
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1765
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1771
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1773
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1777
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1779
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1783
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1785
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1788
		{
			yyVAL.empty = struct{}{}
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1790
		{
			yyVAL.empty = struct{}{}
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1793
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1797
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1801
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1808
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1814
		{
			yyVAL.str = JoinStr
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1818
		{
			yyVAL.str = InnerJoinStr
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1822
		{
			yyVAL.str = CrossJoinStr
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1828
		{
			yyVAL.str = StraightJoinStr
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1834
		{
			yyVAL.str = LeftJoinStr
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1838
		{
			yyVAL.str = LeftJoinStr
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1842
		{
			yyVAL.str = RightJoinStr
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1846
		{
			yyVAL.str = RightJoinStr
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1852
		{
			yyVAL.str = NaturalJoinStr
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1856
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1866
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1870
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1876
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1880
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 351:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1885
		{
			yyVAL.indexHints = nil
		}
	case 352:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1889
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 353:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1893
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 354:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1897
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 355:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1902
		{
			yyVAL.expr = nil
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1906
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1912
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1916
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1920
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1924
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1928
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1932
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1936
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1942
		{
			yyVAL.str = ""
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1946
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1952
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1956
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1962
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1966
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 370:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1970
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 371:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1974
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 372:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1978
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1982
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1986
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 375:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1990
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 376:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1994
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1998
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2004
		{
			yyVAL.str = IsNullStr
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2008
		{
			yyVAL.str = IsNotNullStr
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2012
		{
			yyVAL.str = IsTrueStr
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2016
		{
			yyVAL.str = IsNotTrueStr
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2020
		{
			yyVAL.str = IsFalseStr
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2024
		{
			yyVAL.str = IsNotFalseStr
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2030
		{
			yyVAL.str = EqualStr
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2034
		{
			yyVAL.str = LessThanStr
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2038
		{
			yyVAL.str = GreaterThanStr
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2042
		{
			yyVAL.str = LessEqualStr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2046
		{
			yyVAL.str = GreaterEqualStr
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2050
		{
			yyVAL.str = NotEqualStr
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2054
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2058
		{
			yyVAL.str = NullSafeNotEqualStr
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2063
		{
			yyVAL.expr = nil
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2067
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2073
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2077
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2081
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2087
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2093
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2097
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2103
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2107
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2111
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2115
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2119
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2123
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2127
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2131
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2135
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2139
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2143
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2147
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2151
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2155
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2159
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2163
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2167
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2171
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2175
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2179
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2183
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2187
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2191
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2199
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2213
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2217
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2221
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 431:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2239
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 432:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2243
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 433:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2247
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 434:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2257
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 435:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2261
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 436:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2265
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 437:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2269
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 438:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2273
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 439:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2277
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 440:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2281
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 441:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2285
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 442:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2289
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 443:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2293
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 444:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2297
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 445:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2301
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 446:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2305
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 447:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2309
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 448:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2313
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 449:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:2317
		{
			yyVAL.expr = &RowNumberOverExpr{PartitionBy: yyDollar[6].partitionBy, OrderBy: yyDollar[9].orderBy}
		}
	case 450:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2322
		{
			yyVAL.partitionBy = nil
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2326
		{
			yyVAL.partitionBy = yyDollar[3].partitionBy
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2332
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].expr}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2336
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].expr)
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2346
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2350
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2354
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2358
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2363
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2368
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2373
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2378
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 464:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2392
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 465:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2396
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2400
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2404
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 468:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2410
		{
			yyVAL.str = ""
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2414
		{
			yyVAL.str = BooleanModeStr
		}
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2418
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 471:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2422
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2426
		{
			yyVAL.str = QueryExpansionStr
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2432
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2436
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2442
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2446
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2450
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2454
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2458
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2462
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2468
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2472
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2476
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2480
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2484
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2488
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2492
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2496
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 489:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2501
		{
			yyVAL.expr = nil
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2505
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 491:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2510
		{
			yyVAL.str = string("")
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2514
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2520
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2524
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 495:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2530
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 496:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2535
		{
			yyVAL.expr = nil
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2539
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2545
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2549
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 500:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2553
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2559
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2563
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2567
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2571
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2575
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2579
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2583
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2587
		{
			yyVAL.expr = &NullVal{}
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2593
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2602
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2606
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2611
		{
			yyVAL.exprs = nil
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2615
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2620
		{
			yyVAL.expr = nil
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2624
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2629
		{
			yyVAL.orderBy = nil
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2633
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2639
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2643
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2649
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 521:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2654
		{
			yyVAL.str = AscScr
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2658
		{
			yyVAL.str = AscScr
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2662
		{
			yyVAL.str = DescScr
		}
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2667
		{
			yyVAL.limit = nil
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2671
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2675
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2679
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2684
		{
			yyVAL.str = ""
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2688
		{
			yyVAL.str = ForUpdateStr
		}
	case 530:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2692
		{
			yyVAL.str = ShareModeStr
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2705
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2709
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2713
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 534:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2718
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2722
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 536:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2726
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2733
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2737
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2741
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 540:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2745
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2750
		{
			yyVAL.updateExprs = nil
		}
	case 542:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2754
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2760
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2764
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2770
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2774
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2780
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2786
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2796
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2800
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2806
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2812
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2816
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2822
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2826
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2830
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2837
		{
			yyVAL.bytes = []byte("charset")
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2844
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2848
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2852
		{
			yyVAL.expr = &Default{}
		}
	case 565:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2861
		{
			yyVAL.byt = 0
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2863
		{
			yyVAL.byt = 1
		}
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2866
		{
			yyVAL.empty = struct{}{}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2868
		{
			yyVAL.empty = struct{}{}
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2871
		{
			yyVAL.str = ""
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2873
		{
			yyVAL.str = IgnoreStr
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2877
		{
			yyVAL.empty = struct{}{}
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2879
		{
			yyVAL.empty = struct{}{}
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2881
		{
			yyVAL.empty = struct{}{}
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2883
		{
			yyVAL.empty = struct{}{}
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2885
		{
			yyVAL.empty = struct{}{}
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2887
		{
			yyVAL.empty = struct{}{}
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2889
		{
			yyVAL.empty = struct{}{}
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2891
		{
			yyVAL.empty = struct{}{}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2893
		{
			yyVAL.empty = struct{}{}
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2895
		{
			yyVAL.empty = struct{}{}
		}
	case 581:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2898
		{
			yyVAL.empty = struct{}{}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2900
		{
			yyVAL.empty = struct{}{}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2902
		{
			yyVAL.empty = struct{}{}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2906
		{
			yyVAL.empty = struct{}{}
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2908
		{
			yyVAL.empty = struct{}{}
		}
	case 586:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2911
		{
			yyVAL.empty = struct{}{}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2913
		{
			yyVAL.empty = struct{}{}
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2915
		{
			yyVAL.empty = struct{}{}
		}
	case 589:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2918
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2920
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2924
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2928
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2935
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2941
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2945
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2952
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3168
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3177
		{
			decNesting(yylex)
		}
	case 791:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3182
		{
			forceEOF(yylex)
		}
	case 792:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3187
		{
			forceEOF(yylex)
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3191
		{
			forceEOF(yylex)
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3195
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
